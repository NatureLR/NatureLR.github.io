[{"title":"ansible基本使用","url":"/2020/12/16/ansible%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","content":"<p>Ansible是一个自动化运维工具，可以实现批量配置，部署，命令等功能</p>\n<span id=\"more\"></span>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>yum 安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install ansible</span><br></pre></td></tr></table></figure>\n\n<p>pip安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install ansible</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置路径\"><a href=\"#配置路径\" class=\"headerlink\" title=\"配置路径\"></a>配置路径</h4><p>默认读取<code>/etc/ansible/</code>目录下的<code>主机清单</code>和<code>规则</code></p>\n<h4 id=\"主机清单\"><a href=\"#主机清单\" class=\"headerlink\" title=\"主机清单\"></a>主机清单</h4><blockquote>\n<p>记录ansible需要执行操作的目标机器文件，默认读取<code>/etc/ansible/hosts</code>，一般通过 <code>-i</code>参数指定,也可以分类写到一个文件夹下</p>\n</blockquote>\n<ul>\n<li>#开头为注释</li>\n<li>忽略空行</li>\n<li>组由[组名]定义</li>\n<li>主机名和域名都可以</li>\n<li>一个ip或域名可以是组的成员</li>\n<li>没有分组的主机写在任意的一个组的前面</li>\n</ul>\n<h5 id=\"连续IP\"><a href=\"#连续IP\" class=\"headerlink\" title=\"连续IP\"></a>连续IP</h5><figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 等价于 192.168.1.1 192.168.1.2 192.168.1.2 192.168.1.3 192.168.1.4等等</span></span><br><span class=\"line\">192.168.1.<span class=\"section\">[1:4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 等价于 server1.example.com server2.example.com server3.example.com等等</span></span><br><span class=\"line\">server<span class=\"section\">[1:3]</span>.example.com</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h5><figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\">192.168.1.1 <span class=\"attr\">ansible_ssh_user</span>=root ansible_ssh_pass=root</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h6><ul>\n<li>ansible_ssh_host              目标主机地址</li>\n<li>ansible_ssh_port              目标主机端口，默认22</li>\n<li>ansible_ssh_user              目标主机用户</li>\n<li>ansible_ssh_pass              目标主机ssh密码</li>\n<li>ansible_sudo_pass             sudo密码</li>\n<li>ansible_sudo_exe</li>\n<li>ansible_connection            与主机的连接类型，比如：local,ssh或者paramiko</li>\n<li>ansible_ssh_private_key_file  私钥地址</li>\n<li>ansible_shell_type            目标系统的shell类型</li>\n<li>ansible_python_interpreter    python版本</li>\n</ul>\n<h5 id=\"别名\"><a href=\"#别名\" class=\"headerlink\" title=\"别名\"></a>别名</h5><figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\">test1 <span class=\"attr\">ansible_ssh_port</span>=<span class=\"number\">22</span> ansible_ssh_host=<span class=\"number\">192.168</span>.<span class=\"number\">1.1</span> ansible_ssh_user=root  　　<span class=\"comment\"># 别名test1</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"主机组\"><a href=\"#主机组\" class=\"headerlink\" title=\"主机组\"></a>主机组</h5><figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[foo]</span></span><br><span class=\"line\">192.168.1.1</span><br><span class=\"line\">192.168.2.1</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"主机组嵌套\"><a href=\"#主机组嵌套\" class=\"headerlink\" title=\"主机组嵌套\"></a>主机组嵌套</h5><figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[db]</span></span><br><span class=\"line\">192.168.1.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[server]</span></span><br><span class=\"line\">192.168.2.1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[all:children]</span></span><br><span class=\"line\">db</span><br><span class=\"line\">server</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"主机组参数\"><a href=\"#主机组参数\" class=\"headerlink\" title=\"主机组参数\"></a>主机组参数</h5><figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[test]</span></span><br><span class=\"line\">name1 <span class=\"attr\">ansible_ssh_host</span>=<span class=\"number\">192.168</span>.<span class=\"number\">1</span>.[<span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[test:vars]</span></span><br><span class=\"line\"><span class=\"attr\">ansible_ssh_user</span>=root</span><br><span class=\"line\"><span class=\"attr\">ansible_ssh_pass</span>=<span class=\"string\">&quot;root&quot;</span></span><br><span class=\"line\"><span class=\"attr\">testvar</span>=<span class=\"string\">&quot;test&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h4><blockquote>\n<p>ansible的功能都是通过模块来完成的 <br><code>ansible-doc -s &lt;模块名&gt;</code>查看模块的参数 <br><code>ansible-doc -l</code> 查看所有模块</p>\n</blockquote>\n<h5 id=\"常用模块\"><a href=\"#常用模块\" class=\"headerlink\" title=\"常用模块\"></a>常用模块</h5><blockquote>\n<p>参数中的<code>free_form</code>是各个模块的命令或args，并不是一个存在的参数</p>\n</blockquote>\n<h6 id=\"command\"><a href=\"#command\" class=\"headerlink\" title=\"command\"></a>command</h6><blockquote>\n<p>在目标主机上执行命令</p>\n</blockquote>\n<ul>\n<li>参数：<ul>\n<li>free_form              必选表在目标机器上执行的命令</li>\n<li>chdir                  在目标主机的哪里执行命令</li>\n<li>creates                文件存在时就不执行此命令</li>\n<li>removes                和creates相反存在时就执行</li>\n</ul>\n</li>\n<li>例子：ansible test -m command -a “chdir&#x3D;&#x2F;var&#x2F;log removes&#x3D;kern.log cat kern.log” &#x2F;var&#x2F;log下kern.log存在就查看kern.log</li>\n</ul>\n<h6 id=\"shell\"><a href=\"#shell\" class=\"headerlink\" title=\"shell\"></a>shell</h6><blockquote>\n<p>和command一样不过command不支持重定向等管道操作，shell会调用<code>/bin/sh</code>执行</p>\n</blockquote>\n<ul>\n<li>参数：  <ul>\n<li>free_form:             执行的命令</li>\n<li>chdir:                 改变运行执行的目录</li>\n<li>creates:               文件存在则不就不执行命令</li>\n<li>executable:            改变命令说用的shell解释器，默认为&#x2F;bin&#x2F;sh</li>\n<li>removes:               和creates相反存在时就执行</li>\n</ul>\n</li>\n<li>例子：ansible  test -m shell -a “cat &#x2F;etc&#x2F;hosts”</li>\n</ul>\n<h6 id=\"script\"><a href=\"#script\" class=\"headerlink\" title=\"script\"></a>script</h6><blockquote>\n<p>在目标主机上执行本地主机的脚本</p>\n</blockquote>\n<ul>\n<li>参数：<ul>\n<li>free_form:             需要执行的脚本路径</li>\n<li>chdir:                 执行脚本的目录</li>\n<li>creates:               目标机器的文件存在则不执行</li>\n<li>removes:               目标机器的文件存在则不执行</li>\n</ul>\n</li>\n<li>例子： ansible test -m script -a “test.sh”</li>\n</ul>\n<h6 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy\"></a>copy</h6><blockquote>\n<p>复制本地文件或文件夹到目标主机上</p>\n</blockquote>\n<ul>\n<li>参数：<ul>\n<li>src：                   指定需要copy的文件或目录</li>\n<li>dest：                  文件将被拷贝到目标主机的哪个目录中，dest为必须参数</li>\n<li>content                 不适用src时用此参数写入内容</li>\n<li>force:                  目标主机路径已经有文件且内容不相同时是否覆盖</li>\n<li>backup:                 目标主机已经有文件且内容不同时是否备份</li>\n<li>owner:                  拷贝到目标主机后的所有者</li>\n<li>group:                  拷贝到目标主机后的属组</li>\n<li>mode:                   拷贝到目标主机后的权限</li>\n</ul>\n</li>\n<li>例子： ansible test -m copy -a “src&#x3D;&#x2F;root&#x2F;test.sh dest&#x3D;&#x2F;tmp”</li>\n</ul>\n<h6 id=\"file\"><a href=\"#file\" class=\"headerlink\" title=\"file\"></a>file</h6><blockquote>\n<p>对目标主机的文件管理</p>\n</blockquote>\n<ul>\n<li>参数：<ul>\n<li>path：                  指定目标目录或文件</li>\n<li>state：<ul>\n<li>directory：           如果目录不存在，创建目录</li>\n<li>file：                即使文件不存在，也不会被创建</li>\n<li>link：                创建软连接</li>\n<li>hard：                创建硬连接</li>\n<li>touch：               如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时</li>\n<li>absent：              删除目录、文件或者取消链接文</li>\n</ul>\n</li>\n<li>src：                   当state设置为link或者hard时，需要操作的源文件</li>\n<li>force:                  需要在两种情况下强制创建软连接，一种是源文件不存在但之后会建立的情况下；另一种是目标连接已存在，需要先取消之前的软连接，有两个选项：yes|no</li>\n<li>owner：                 指定被操作文件的所有者，</li>\n<li>group：                 指定被操作文件的所属组</li>\n<li>mode：                  权限</li>\n<li>recurse：               文件为目录时，递归目录</li>\n</ul>\n</li>\n<li>例子：<ul>\n<li>设置权限为777所属组为minikube所有者为：ansible test -m file -a “path&#x3D;&#x2F;tmp&#x2F;test.sh  mode&#x3D;777 owner&#x3D;minikube group&#x3D;minikube”</li>\n<li>创建<code>/etc/hosts</code>的软连接到home目录：ansible test -m file -a “path&#x3D;&#x2F;root&#x2F;hosts  src&#x3D;&#x2F;etc&#x2F;hosts state&#x3D;link”</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"blockinfile\"><a href=\"#blockinfile\" class=\"headerlink\" title=\"blockinfile\"></a>blockinfile</h6><blockquote>\n<p>在指定的文件里修改一段文本</p>\n</blockquote>\n<ul>\n<li>参数：<ul>\n<li>path：                 必须参数，指定要操作的文件</li>\n<li>block：                指定要操作的一段文本</li>\n<li>marker：               ansibel默认修改时会添加一个以#开头标记，可以改为自定义</li>\n<li>state:                 present为插入或者更新;absent删除</li>\n<li>insertafter：          默认会将文本插入到指定的位置的后面</li>\n<li>insertbefore：         默认会将文本插入到指定的位置的前面</li>\n<li>backup：               是否在修改文件之前对文件进行备份。</li>\n<li>create：               当要操作的文件并不存在时，是否创建对应的文件。</li>\n</ul>\n</li>\n<li>例子：<ul>\n<li>在目标主机的&#x2F;tmp&#x2F;test文件中插入ansible-test且标记内容为teststart：ansible localhost -m blockinfile -a “path&#x3D;&#x2F;tmp&#x2F;test block&#x3D;ansible-test marker&#x3D;’#{mark}teststart’”</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"lineinfile\"><a href=\"#lineinfile\" class=\"headerlink\" title=\"lineinfile\"></a>lineinfile</h6><blockquote>\n<p>和<code>blockinfile</code>相似不过是一行还可以使用正则表达式</p>\n</blockquote>\n<ul>\n<li>参数：<ul>\n<li>path：                  必须参数，指定要操作的文件</li>\n<li>line:                   要指定的文本内容</li>\n<li>regexp：                正则匹配对应的行，当替换文本时，如果有多行文本都能被匹配，则只有最后面被匹配到的那行文本才会被替换，当删除文本时，如果有多行文本都能被匹配，这么这些行都会被删除</li>\n<li>state：                 absent为删除，state的默认值为present</li>\n<li>backrefs：              在使用正则匹配时如果没有匹配到默认会在文件的末尾插入要替换的文本，设置为yes则不会</li>\n<li>insertafter：           默认会将文本插入到指定的位置的后面</li>\n<li>insertbefore：          默认会将文本插入到指定的位置的前面</li>\n<li>backup：                是否在修改文件之前对文件进行备份</li>\n<li>create：                当要操作的文件并不存在时，是否创建对应的文件<br>-例子：</li>\n<li>将&#x2F;tmp&#x2F;test的文件中#kern开头行换成kern.* &#x2F;var&#x2F;log&#x2F;kern.log:ansible localhost -m lineinfile -a ‘path&#x3D;&#x2F;tmp&#x2F;test regexp&#x3D;”^#kern” line&#x3D;”kern.* &#x2F;var&#x2F;log&#x2F;kern.log”‘</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"replace\"><a href=\"#replace\" class=\"headerlink\" title=\"replace\"></a>replace</h6><blockquote>\n<p>文本替换模块</p>\n</blockquote>\n<ul>\n<li>参数：<ul>\n<li>path：                 必须参数，指定要操作的文件，2.3版本之前，只能使用dest, destfile, name指定要操作的文件，2.4版本中，仍然可以使用这些参数名，这些参数名作为path参数的别名使用。</li>\n<li>regexp:                必须参数，指定一个python正则表达式，文件中与正则匹配的字符串将会被替换。</li>\n<li>replace：              指定最终要替换成的字符串。</li>\n<li>backup：               是否在修改文件之前对文件进行备份，最好设置为yes。</li>\n</ul>\n</li>\n<li>例子：将&#x2F;etc&#x2F;test文件中所有的<code>localhost</code>换成<code>FOO</code>: ansible localhost -m replace -a ‘path&#x3D;&#x2F;tmp&#x2F;test  regexp&#x3D;”localhost” replace&#x3D;foo’</li>\n</ul>\n<h6 id=\"systemd\"><a href=\"#systemd\" class=\"headerlink\" title=\"systemd\"></a>systemd</h6><blockquote>\n<p>运行systemd相关的命令</p>\n</blockquote>\n<ul>\n<li>参数：<ul>\n<li>enabled:               是否设置为开机启动</li>\n<li>name:                  systemd模块名字</li>\n<li>state:                 想要设置的状态，比如<code>restartd</code>重启<code>started</code>启动、<code>stopped</code>停止、<code>reloaded</code>重新加载</li>\n<li>daemon_reload:         运行daemon-reload命令</li>\n<li>daemon_reexec:         运行daemon_reexec命令</li>\n</ul>\n</li>\n<li>例子：ansible test -m systemd -a “name&#x3D;rsyslog state&#x3D;restarted”</li>\n</ul>\n<h6 id=\"yum\"><a href=\"#yum\" class=\"headerlink\" title=\"yum\"></a>yum</h6><blockquote>\n<p>yum包管理</p>\n</blockquote>\n<ul>\n<li>参数：<ul>\n<li>action: yum</li>\n<li>conf_file              yum的配置文件</li>\n<li>disable_gpg_check      关闭gpg_check</li>\n<li>disablerepo            不启用某个源</li>\n<li>enablerepo             启用某个源</li>\n<li>name                   指定要安装的包，如果有多个版本需要指定版本，否则安装最新的包</li>\n<li>state                  安装:<code>present</code>，安装最新版:<code>latest</code>，卸载程序包:<code>absent</code></li>\n</ul>\n</li>\n<li>例子: 安装最新版psree命令：ansible localhost -m yum -a “name&#x3D;psmisc state&#x3D;latest”</li>\n</ul>\n<h6 id=\"cron\"><a href=\"#cron\" class=\"headerlink\" title=\"cron\"></a>cron</h6><blockquote>\n<p>定时模块</p>\n</blockquote>\n<ul>\n<li>参数：<ul>\n<li>backup                 如果设置，创建一个crontab备份</li>\n<li>cron_file              如果指定, 使用这个文件cron.d，而不是单个用户crontab</li>\n<li>day                    日应该运行的工作( 1-31, *, *&#x2F;2, etc )</li>\n<li>hour                   小时 ( 0-23, *, *&#x2F;2, etc )</li>\n<li>job                    指明运行的命令是什么</li>\n<li>minute                 分钟( 0-59, *, *&#x2F;2, etc )</li>\n<li>month                  月( 1-12, *, *&#x2F;2, etc )</li>\n<li>name                   定时任务描述</li>\n<li>reboot                 任务在重启时运行，不建议使用，建议使用special_time</li>\n<li>special_time           特殊的时间范围，参数：reboot（重启时）,annually（每年）,monthly（每月）,weekly（每周）,daily（每天）,hourly（每小时）</li>\n<li>state                  指定状态，默认<code>prsent</code>添加定时任务，<code>absent</code>删除定时任务</li>\n<li>user                   以哪个用户的身份执行</li>\n<li>weekday                周 ( 0-6 for Sunday-Saturday, *, etc )</li>\n</ul>\n</li>\n<li>例子：<ul>\n<li>每天8点半执行cat &#x2F;etc&#x2F;hosts这个命令：ansible localhost -m cron -a “name&#x3D;test minute&#x3D;30 hour&#x3D;8 day&#x3D;* job&#x3D;’cat &#x2F;etc&#x2F;hosts’”</li>\n<li>删除test这个cronjob：ansible localhost -m cron -a “name&#x3D;test state&#x3D;absent”</li>\n<li>重启时rm -rf &#x2F;tmp命令： ansible test -m cron -a ‘name&#x3D;”test” special_time&#x3D;reboot job&#x3D;”rm -rf &#x2F;tmp”‘</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a>执行命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ansible &lt;主机&gt; -m &lt;模块&gt; -a &lt;模块参数&gt;</span></span><br><span class=\"line\">ansible &lt;主机&gt; -m shell -a &quot;cat /etc/hosts&quot;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"指定某些机器执行\"><a href=\"#指定某些机器执行\" class=\"headerlink\" title=\"指定某些机器执行\"></a>指定某些机器执行</h5><p>ansbile &lt;主机组&gt; -m &lt;模块&gt; -a &lt;参数&gt; –limit &lt;主机&gt;  指定执行主机<br>ansbile &lt;主机组&gt; -m &lt;模块&gt; -a &lt;参数&gt; –limit &lt;!主机&gt; 排除执行的主机<br>ansbile &lt;主机组&gt; -m &lt;模块&gt; -a &lt;参数&gt; –limit &lt;主机1：主机2&gt; 只在主机1和主机2中执行</p>\n<h5 id=\"一步一步的执行且确认\"><a href=\"#一步一步的执行且确认\" class=\"headerlink\" title=\"一步一步的执行且确认\"></a>一步一步的执行且确认</h5><p>在执行 剧本的时候加上 –step，每执行一个任务就询问一次</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible-playbook  -i inventories test.yaml --step</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"playbook\"><a href=\"#playbook\" class=\"headerlink\" title=\"playbook\"></a>playbook</h4><blockquote>\n<p>剧本就是一系列ansible命令组合类似shell脚本和shell命令</p>\n</blockquote>\n<p>一个将内核日志输出到&#x2F;var&#x2F;log&#x2F;kern.log的剧本</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">all</span>                 <span class=\"comment\"># 要执行的主机组</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">修改rsyslog配置文件</span> <span class=\"comment\"># 任务名字</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span> <span class=\"string\">rsyslog</span>            <span class=\"comment\"># 任务标签</span></span><br><span class=\"line\">    <span class=\"attr\">lineinfile:</span>              <span class=\"comment\"># 任务模块</span></span><br><span class=\"line\">       <span class=\"attr\">dest:</span> <span class=\"string\">/etc/rsyslog.conf</span></span><br><span class=\"line\">       <span class=\"attr\">regexp:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item.regexp &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">       <span class=\"attr\">line:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item.line &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span>              <span class=\"comment\"># 循环执行</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> &#123; <span class=\"attr\">regexp:</span> <span class=\"string\">&#x27;^#kern&#x27;</span>,<span class=\"attr\">line:</span> <span class=\"string\">&#x27;kern.* /var/log/kern.log&#x27;</span> &#125;</span><br><span class=\"line\">     <span class=\"bullet\">-</span> &#123; <span class=\"attr\">regexp:</span> <span class=\"string\">&#x27;^#\\$ModLoad imklog&#x27;</span>,<span class=\"attr\">line:</span> <span class=\"string\">&#x27;$ModLoad imklog&#x27;</span> &#125;</span><br><span class=\"line\">     <span class=\"bullet\">-</span> &#123; <span class=\"attr\">regexp:</span> <span class=\"string\">&#x27;^#\\$ModLoad imjournal&#x27;</span>,<span class=\"attr\">line:</span> <span class=\"string\">&#x27;$ModLoad imjournal&#x27;</span> &#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">修改logrotate的syslog配置</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">sed</span> <span class=\"string\">-i</span> <span class=\"string\">&#x27;1i\\\\/var\\/log\\/kern.log&#x27;</span> <span class=\"string\">/etc/logrotate.d/syslog</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span> <span class=\"string\">logrotate</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">重启rsyslog服务</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span> <span class=\"string\">rsyslog</span></span><br><span class=\"line\">    <span class=\"attr\">systemd:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">rsyslog</span></span><br><span class=\"line\">      <span class=\"attr\">state:</span> <span class=\"string\">restarted</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"tags\"><a href=\"#tags\" class=\"headerlink\" title=\"tags\"></a>tags</h5><blockquote>\n<p>标签可以灵活的选择执行那些task或其他的对象</p>\n</blockquote>\n<p>特殊的标签：</p>\n<ul>\n<li>always 当把标签设置为always即使使用–tags指定tags任务也会执行，可以使用–skip-tags always跳过</li>\n<li>never  和always相反即使用–tags指定也不会执行</li>\n<li>tagged 只执行有标签的任务</li>\n<li>untagged 只执行未打标签的含有always也会执行</li>\n<li>all 所有都执行不用指定</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">创建文件test1</span></span><br><span class=\"line\">      <span class=\"attr\">tags:</span> <span class=\"string\">test1</span></span><br><span class=\"line\">      <span class=\"attr\">file:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/tmp/test1</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">touch</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">创建文件test2</span></span><br><span class=\"line\">      <span class=\"attr\">tags:</span> <span class=\"string\">always</span></span><br><span class=\"line\">      <span class=\"attr\">file:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/tmp/test2</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">touch</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">创建文件test3</span></span><br><span class=\"line\">      <span class=\"attr\">file:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/tmp/test3</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">touch</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h5><blockquote>\n<p>变量非常常用</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/tmp/</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">创建文件test1</span></span><br><span class=\"line\">      <span class=\"attr\">tags:</span> <span class=\"string\">test1</span></span><br><span class=\"line\">      <span class=\"attr\">file:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; path &#125;&#125;</span>test1&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">touch</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"DEBUG\"><a href=\"#DEBUG\" class=\"headerlink\" title=\"DEBUG\"></a>DEBUG</h6><blockquote>\n<p>调试打印</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/tmp/</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">创建文件test1</span></span><br><span class=\"line\">      <span class=\"attr\">tags:</span> <span class=\"string\">test1</span></span><br><span class=\"line\">      <span class=\"attr\">file:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; path &#125;&#125;</span>test1&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">touch</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">print</span> <span class=\"string\">var</span></span><br><span class=\"line\">      <span class=\"attr\">debug:</span></span><br><span class=\"line\">        <span class=\"attr\">var:</span> <span class=\"string\">path</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">msg</span></span><br><span class=\"line\">      <span class=\"attr\">debug:</span></span><br><span class=\"line\">        <span class=\"attr\">msg:</span> <span class=\"string\">this</span> <span class=\"string\">is</span> <span class=\"string\">debug</span> <span class=\"string\">info,The</span> <span class=\"string\">test</span> <span class=\"string\">file</span> <span class=\"string\">has</span> <span class=\"string\">been</span> <span class=\"string\">touched</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"注册变量\"><a href=\"#注册变量\" class=\"headerlink\" title=\"注册变量\"></a>注册变量</h6><blockquote>\n<p>将模块运行的返回值进行赋值</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">test</span> <span class=\"string\">shell</span></span><br><span class=\"line\">    <span class=\"attr\">shell:</span> <span class=\"string\">&quot;cat /etc/hosts&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">register:</span> <span class=\"string\">testvar</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">shell</span> <span class=\"string\">模块返回值</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">var:</span> <span class=\"string\">testvar</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">指定shell模块的返回</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;testvar.stdout&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"交互\"><a href=\"#交互\" class=\"headerlink\" title=\"交互\"></a>交互</h6><blockquote>\n<p>命令行交互输入的变脸类似c语言的scan函数</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">vars_prompt:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;user&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">prompt:</span> <span class=\"string\">&quot;请选择帐号 \\n</span></span><br><span class=\"line\"><span class=\"string\">      root \\n</span></span><br><span class=\"line\"><span class=\"string\">      poweruser \\n</span></span><br><span class=\"line\"><span class=\"string\">      test \\n</span></span><br><span class=\"line\"><span class=\"string\">      &quot;</span></span><br><span class=\"line\">      <span class=\"attr\">private:</span> <span class=\"literal\">no</span> <span class=\"comment\"># 输入的字符显示出来</span></span><br><span class=\"line\">      <span class=\"attr\">default:</span> <span class=\"string\">root</span> <span class=\"comment\"># 默认值</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;passwd&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">prompt:</span> <span class=\"string\">&quot;请输入密码&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">输出变量</span></span><br><span class=\"line\">     <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">你的帐号：&#123;&#123;user&#125;&#125;;你的密码：&#123;&#123;passwd&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"命令行传值\"><a href=\"#命令行传值\" class=\"headerlink\" title=\"命令行传值\"></a>命令行传值</h6><blockquote>\n<p>通过命令行输入变量的值</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">var2:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;通过命令行传值&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">var的值是：&#123;&#123;var&#125;&#125;;var2的值：</span> &#123;&#123;<span class=\"string\">var2</span>&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将上面的yaml保存为test.yaml然后执行 <code>ansible-playbook -i inventories test.yaml --extra-vars &quot;var=test&quot; -e &quot;var2=test2&quot;</code>,-e是–extra-vars的缩写，<code>命令行的值会覆盖默认值</code><br>还可以使用<code>@</code>传变量文件</p>\n<h6 id=\"主机-组-变量\"><a href=\"#主机-组-变量\" class=\"headerlink\" title=\"主机(组)变量\"></a>主机(组)变量</h6><blockquote>\n<p>为每个主机（组）设置的变量，当使用次主机时变量生效</p>\n</blockquote>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[test]</span></span><br><span class=\"line\"></span><br><span class=\"line\">localhost <span class=\"attr\">hostvar1</span>=test_host_var hostvar2=host_var_test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[test:vars]</span></span><br><span class=\"line\"><span class=\"attr\">groupvar</span>=testgroupvar</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;主机变量&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">hostvar1的值是：&#123;&#123;hostvar1&#125;&#125;;hostvar2的值：</span> &#123;&#123;<span class=\"string\">hostvar2</span>&#125;&#125;</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">&quot;主机组变量&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">test组的变量是：&#123;&#123;groupvar&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"set-fact定义变量\"><a href=\"#set-fact定义变量\" class=\"headerlink\" title=\"set_fact定义变量\"></a>set_fact定义变量</h6><blockquote>\n<p>通过set_fact模块配置变量</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">set_fact:</span></span><br><span class=\"line\">      <span class=\"attr\">testvasr:</span> <span class=\"string\">testvas</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">打印值</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;testvasr&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"内置变量\"><a href=\"#内置变量\" class=\"headerlink\" title=\"内置变量\"></a>内置变量</h6><blockquote>\n<p>ansible有一些保留变量</p>\n</blockquote>\n<ul>\n<li>ansible_version</li>\n<li>hostvars</li>\n<li>inventory_hostname</li>\n<li>inventory_hostname_short</li>\n<li>play_hosts</li>\n<li>groups</li>\n<li>group_names</li>\n</ul>\n<h5 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h5><h6 id=\"with-items\"><a href=\"#with-items\" class=\"headerlink\" title=\"with_items\"></a>with_items</h6><blockquote>\n<p>以条目为单位循环with_items下的的元素</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">循环打印变量</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"number\">2</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">循环打印kv变量</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;k的值是：<span class=\"template-variable\">&#123;&#123;item.k&#125;&#125;</span>:v的值是：<span class=\"template-variable\">&#123;&#123;item.v&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123; <span class=\"attr\">k:</span> <span class=\"number\">1</span>, <span class=\"attr\">v:</span> <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">      <span class=\"bullet\">-</span> &#123; <span class=\"attr\">k:</span> <span class=\"number\">3</span>, <span class=\"attr\">v:</span> <span class=\"number\">4</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"with-list\"><a href=\"#with-list\" class=\"headerlink\" title=\"with_list\"></a>with_list</h6><blockquote>\n<p>以list为单位循环元素,也即是一次性答应出一个list而不是list里面的元素</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">循环打印变量</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"string\">a</span>,<span class=\"string\">b</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">循环打印list</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"string\">a</span>,<span class=\"string\">b</span>]</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"with-flattened\"><a href=\"#with-flattened\" class=\"headerlink\" title=\"with_flattened\"></a>with_flattened</h6><blockquote>\n<p>和with_item很像将item一个元素一个元素的打印出来</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">循环打印item</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"string\">a</span>,<span class=\"string\">b</span>,<span class=\"string\">c</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">循环打印list</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_list:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"string\">a</span>,<span class=\"string\">b</span>,<span class=\"string\">c</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">循环打印flattened</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_flattened:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"string\">a</span>,<span class=\"string\">b</span>,<span class=\"string\">c</span>]</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"with-together\"><a href=\"#with-together\" class=\"headerlink\" title=\"with_together\"></a>with_together</h6><blockquote>\n<p>将list的元素纵排打印</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">循环打印item</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"string\">a</span>,<span class=\"string\">b</span>,<span class=\"string\">c</span>]</span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">循环打印together</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_together:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"string\">a</span>,<span class=\"string\">b</span>,<span class=\"string\">c</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"with-cartesian\"><a href=\"#with-cartesian\" class=\"headerlink\" title=\"with_cartesian\"></a>with_cartesian</h6><blockquote>\n<p>将list的元素交叉打印出来</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">循环打印with_cartesian</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_cartesian:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"string\">a</span>,<span class=\"string\">b</span>,<span class=\"string\">c</span>]</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"with-indexed-items\"><a href=\"#with-indexed-items\" class=\"headerlink\" title=\"with_indexed_items\"></a>with_indexed_items</h6><blockquote>\n<p>将所有list变成一个大的list然后将这个大的list按顺序从0开始添加索引和值</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">循环打印with_indexed_items</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_indexed_items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">      <span class=\"bullet\">-</span> [<span class=\"string\">a</span>,<span class=\"string\">b</span>,<span class=\"string\">c</span>]</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"with-sequence\"><a href=\"#with-sequence\" class=\"headerlink\" title=\"with_sequence\"></a>with_sequence</h6><blockquote>\n<p>类似golang序言的for循环，定义步长开始值，结束值</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">with_sequence</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span> </span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_sequence:</span> <span class=\"string\">start=1</span> <span class=\"string\">end=10</span> <span class=\"string\">stride=2</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"with-dict\"><a href=\"#with-dict\" class=\"headerlink\" title=\"with_dict\"></a>with_dict</h6><blockquote>\n<p>顾名思义是循环处理字典的</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">account:</span></span><br><span class=\"line\">      <span class=\"attr\">user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">passwd:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">with_dict</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span> </span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;键是：<span class=\"template-variable\">&#123;&#123; item.key &#125;&#125;</span> ；值是：<span class=\"template-variable\">&#123;&#123; item.value &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_dict:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;account&#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"with-subelements\"><a href=\"#with-subelements\" class=\"headerlink\" title=\"with_subelements\"></a>with_subelements</h6><blockquote>\n<p>也是对字典镜像操作，制定的字段作为key把其他字段作为value</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">account:</span></span><br><span class=\"line\">      <span class=\"attr\">root:</span></span><br><span class=\"line\">        <span class=\"attr\">user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">        <span class=\"attr\">passwd:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">        <span class=\"attr\">open:</span> </span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">tmp</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">server</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span></span><br><span class=\"line\">        <span class=\"attr\">user:</span> <span class=\"string\">test</span></span><br><span class=\"line\">        <span class=\"attr\">passwd:</span> <span class=\"string\">abc</span></span><br><span class=\"line\">        <span class=\"attr\">open:</span> </span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">hosts</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">log</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">with_sequence</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span> </span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_subelements:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123;account&#125;&#125;</span>&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">open</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"with-file\"><a href=\"#with-file\" class=\"headerlink\" title=\"with_file\"></a>with_file</h6><blockquote>\n<p>按行读取一个文件的内容</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">with_file</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span> </span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_file:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/etc/hosts</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"with-fileglob\"><a href=\"#with-fileglob\" class=\"headerlink\" title=\"with_fileglob\"></a>with_fileglob</h6><blockquote>\n<p>读取文件名字</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">with_fileglob</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span> </span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_fileglob:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/etc/*</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"判断\"><a href=\"#判断\" class=\"headerlink\" title=\"判断\"></a>判断</h5><h6 id=\"比较符\"><a href=\"#比较符\" class=\"headerlink\" title=\"比较符\"></a>比较符</h6><ul>\n<li>&#x3D;&#x3D; 相等</li>\n<li>!&#x3D; 不等</li>\n<li>&gt; 大于</li>\n<li>&lt;  小于</li>\n<li>&gt;&#x3D;小于等于</li>\n<li>&lt;&#x3D;大于等于</li>\n</ul>\n<h6 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h6><ul>\n<li>and 与</li>\n<li>or 或</li>\n<li>not 非</li>\n<li>() 组合</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name :</span> <span class=\"string\">判断</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span> </span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; item &#125;&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">with_items:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">item</span> <span class=\"string\">&gt;</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"文件判断\"><a href=\"#文件判断\" class=\"headerlink\" title=\"文件判断\"></a>文件判断</h6><ul>\n<li>is exists 如果文件存在则为真</li>\n<li>is not exists  如果文件不存在则为假</li>\n<li>not &lt;path&gt; is exists 和is not相同</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"comment\">#gather_facts: false</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">testpath:</span> <span class=\"string\">/tmp/test</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">判断/tmp/test文件是否存在</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span> </span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">是centos</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span>  <span class=\"string\">testpath</span> <span class=\"string\">is</span> <span class=\"string\">not</span> <span class=\"string\">exists</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"变量判断\"><a href=\"#变量判断\" class=\"headerlink\" title=\"变量判断\"></a>变量判断</h6><ul>\n<li>is defined 定义则为真</li>\n<li>is undefined 没定义则为真</li>\n<li>is none 为空则为真</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"comment\">#gather_facts: false</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">testpath:</span> <span class=\"string\">/tmp/test</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">判断testpath是否存在</span></span><br><span class=\"line\">    <span class=\"attr\">debug:</span> </span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">testpath文件存在</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">testpath</span> <span class=\"string\">is</span> <span class=\"string\">defined</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"执行结果判断\"><a href=\"#执行结果判断\" class=\"headerlink\" title=\"执行结果判断\"></a>执行结果判断</h6><ul>\n<li>success 或 succeeded 执行成功则返回真</li>\n<li>failure 或 failed    执行失败则返回真</li>\n<li>change 或 changed    执行状态为changed则返回真</li>\n<li>skip 或 skipped      没有满足条件，而被跳过执行时，则返回真</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"comment\">#gather_facts: false</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">shell:</span> <span class=\"string\">cat</span> <span class=\"string\">/etc/hosts</span></span><br><span class=\"line\">    <span class=\"attr\">register:</span> <span class=\"string\">ret</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;执行成功&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">ret</span> <span class=\"string\">is</span> <span class=\"string\">success</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"文件类型判断\"><a href=\"#文件类型判断\" class=\"headerlink\" title=\"文件类型判断\"></a>文件类型判断</h6><ul>\n<li>file 是文件则为真</li>\n<li>directory 是目录则为真</li>\n<li>link 软连接则为真</li>\n<li>mount 挂载点则为真</li>\n<li>exists 存在则为真</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"comment\">#gather_facts: false</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/etc/hosts</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; path &#125;&#125;</span> 是个文件&quot;</span> </span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">path</span> <span class=\"string\">is</span> <span class=\"string\">file</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"字符串判断\"><a href=\"#字符串判断\" class=\"headerlink\" title=\"字符串判断\"></a>字符串判断</h6><ul>\n<li>lower 字符为小写则为真</li>\n<li>upper 字符为大写则为真</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"comment\">#gather_facts: false</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">TEST</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; path &#125;&#125;</span> 是大写&quot;</span> </span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">path</span> <span class=\"string\">is</span> <span class=\"string\">upper</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"整除判断\"><a href=\"#整除判断\" class=\"headerlink\" title=\"整除判断\"></a>整除判断</h6><ul>\n<li>even  偶数为真</li>\n<li>odd  奇数为真</li>\n<li>divisibleby(num) 整除则为真</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">X:</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"attr\">Y:</span> <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"attr\">Z:</span> <span class=\"number\">66</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; X &#125;&#125;</span> 是奇数&quot;</span> </span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">X</span> <span class=\"string\">is</span> <span class=\"string\">odd</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; Y &#125;&#125;</span> 是偶数&quot;</span> </span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">Y</span> <span class=\"string\">is</span> <span class=\"string\">even</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; Z &#125;&#125;</span> 能被66整除&quot;</span> </span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">Z</span> <span class=\"string\">is</span> <span class=\"string\">divisibleby(66)</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"其他判断\"><a href=\"#其他判断\" class=\"headerlink\" title=\"其他判断\"></a>其他判断</h6><ul>\n<li>version 判断版本大小</li>\n<li>string 是字符则为真</li>\n<li>number 是数字则为真</li>\n<li>subset 一个list是另一个list的子集则为真</li>\n<li>superset 一个list<code>不</code>是另一个list的子集则为真</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">Versions:</span> <span class=\"number\">1.2</span><span class=\"number\">.4</span></span><br><span class=\"line\">    <span class=\"attr\">A:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"attr\">B:</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">    <span class=\"attr\">str:</span> <span class=\"string\">test</span></span><br><span class=\"line\">    <span class=\"attr\">str2:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; Versions &#125;&#125;</span> 版本是否大于1.2.1&quot;</span> </span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">Versions</span> <span class=\"string\">is</span> <span class=\"string\">version(&quot;1.2.1&quot;,&quot;&gt;&quot;)</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">b是a的子集</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">B</span> <span class=\"string\">is</span> <span class=\"string\">subset(A)</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">str是字符串</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">str</span> <span class=\"string\">is</span> <span class=\"string\">string</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">str2</span> <span class=\"string\">是数字</span></span><br><span class=\"line\">    <span class=\"attr\">when:</span> <span class=\"string\">str2</span> <span class=\"string\">is</span> <span class=\"string\">number</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"handler\"><a href=\"#handler\" class=\"headerlink\" title=\"handler\"></a>handler</h5><blockquote>\n<p>在上面的例子中无论前面修改配置文件是否修改都会执行rsyslog重启，这样有些不妥 <br>handler的执行顺序与被notify的顺序无关</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 这样只有配置文件真正被修改了才会执行重启</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">修改rsyslog配置文件</span></span><br><span class=\"line\">      <span class=\"attr\">tags:</span> <span class=\"string\">rsyslog</span></span><br><span class=\"line\">      <span class=\"attr\">lineinfile:</span></span><br><span class=\"line\">         <span class=\"attr\">dest:</span> <span class=\"string\">/etc/rsyslog.conf</span></span><br><span class=\"line\">         <span class=\"attr\">regexp:</span> <span class=\"string\">^#kern</span></span><br><span class=\"line\">         <span class=\"attr\">line:</span> <span class=\"string\">kern.*</span> <span class=\"string\">/var/log/kern.log</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span>                <span class=\"comment\"># 引用handlers</span></span><br><span class=\"line\">        <span class=\"string\">重启rsyslog服务</span></span><br><span class=\"line\">  <span class=\"attr\">handlers:</span>                  <span class=\"comment\"># 和tasks同级</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">重启rsyslog服务</span></span><br><span class=\"line\">      <span class=\"attr\">systemd:</span></span><br><span class=\"line\">         <span class=\"attr\">name:</span> <span class=\"string\">rsyslog</span></span><br><span class=\"line\">         <span class=\"attr\">state:</span> <span class=\"string\">restarted</span></span><br><span class=\"line\">         <span class=\"attr\">enabled:</span> <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>meta关键字可以让notify之后立刻执行handlers</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">修改rsyslog配置文件</span></span><br><span class=\"line\">      <span class=\"attr\">tags:</span> <span class=\"string\">rsyslog</span></span><br><span class=\"line\">      <span class=\"attr\">lineinfile:</span></span><br><span class=\"line\">         <span class=\"attr\">dest:</span> <span class=\"string\">/etc/rsyslog.conf</span></span><br><span class=\"line\">         <span class=\"attr\">regexp:</span> <span class=\"string\">^#kern</span></span><br><span class=\"line\">         <span class=\"attr\">line:</span> <span class=\"string\">kern.*</span> <span class=\"string\">/var/log/kern.log</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span></span><br><span class=\"line\">        <span class=\"string\">重启rsyslog服务</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">meta:</span> <span class=\"string\">flush_handlers</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">查看配置文件状态</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">cat</span> <span class=\"string\">/etc/rsyslog.conf</span> <span class=\"string\">|grep</span> <span class=\"string\">&quot;kern.\\*&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">ps</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span> <span class=\"string\">msg=&#123;&#123;</span> <span class=\"string\">ps.stdout</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">handlers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">重启rsyslog服务</span></span><br><span class=\"line\">      <span class=\"attr\">systemd:</span></span><br><span class=\"line\">         <span class=\"attr\">name:</span> <span class=\"string\">rsyslog</span></span><br><span class=\"line\">         <span class=\"attr\">state:</span> <span class=\"string\">restarted</span></span><br><span class=\"line\">         <span class=\"attr\">enabled:</span> <span class=\"literal\">yes</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>listen handlers组</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">修改rsyslog配置文件</span></span><br><span class=\"line\">      <span class=\"attr\">tags:</span> <span class=\"string\">rsyslog</span></span><br><span class=\"line\">      <span class=\"attr\">lineinfile:</span></span><br><span class=\"line\">         <span class=\"attr\">dest:</span> <span class=\"string\">/etc/rsyslog.conf</span></span><br><span class=\"line\">         <span class=\"attr\">regexp:</span> <span class=\"string\">^#kern</span></span><br><span class=\"line\">         <span class=\"attr\">line:</span> <span class=\"string\">kern.*</span> <span class=\"string\">/var/log/kern.log</span></span><br><span class=\"line\">      <span class=\"attr\">notify:</span></span><br><span class=\"line\">         <span class=\"string\">handler</span> <span class=\"string\">group1</span> <span class=\"comment\"># 通知了handler group1</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">meta:</span> <span class=\"string\">flush_handlers</span> </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">查看配置文件状态</span></span><br><span class=\"line\">      <span class=\"attr\">shell:</span> <span class=\"string\">cat</span> <span class=\"string\">/etc/rsyslog.conf</span> <span class=\"string\">|grep</span> <span class=\"string\">&quot;kern.\\*&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">register:</span> <span class=\"string\">ps</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span> <span class=\"string\">msg=&#123;&#123;</span> <span class=\"string\">ps.stdout</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">handlers:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">重启rsyslog服务</span></span><br><span class=\"line\">      <span class=\"attr\">listen:</span> <span class=\"string\">handler</span> <span class=\"string\">group1</span></span><br><span class=\"line\">      <span class=\"attr\">systemd:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">rsyslog</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">restarted</span></span><br><span class=\"line\">        <span class=\"attr\">enabled:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">创建测试文件</span></span><br><span class=\"line\">      <span class=\"attr\">listen:</span> <span class=\"string\">handler</span> <span class=\"string\">group1</span></span><br><span class=\"line\">      <span class=\"attr\">file:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">/tmp/test</span></span><br><span class=\"line\">        <span class=\"attr\">state:</span> <span class=\"string\">touch</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"include-import-tasks\"><a href=\"#include-import-tasks\" class=\"headerlink\" title=\"include &amp;&amp; import tasks\"></a>include &amp;&amp; import tasks</h5><blockquote>\n<p>当task越来越多的时候如果都在一个文件不是很好管理，将一些相关性很强的写到一个文件然后引用另外的yaml文件 <br>import_tasks静态的，在playbook解析阶段将所有文件中的变量读取加载 <br>include_tasks动态则是在执行playbook之前才会加载自己变量</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">修改rsyslog配置文件</span></span><br><span class=\"line\">      <span class=\"attr\">tags:</span> <span class=\"string\">rsyslog</span></span><br><span class=\"line\">      <span class=\"attr\">lineinfile:</span></span><br><span class=\"line\">         <span class=\"attr\">dest:</span> <span class=\"string\">/etc/rsyslog.conf</span></span><br><span class=\"line\">         <span class=\"attr\">regexp:</span> <span class=\"string\">^#kern</span></span><br><span class=\"line\">         <span class=\"attr\">line:</span> <span class=\"string\">kern.*</span> <span class=\"string\">/var/log/kern.log</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">查看配置文件状态</span></span><br><span class=\"line\">      <span class=\"attr\">import_tasks:</span> <span class=\"string\">config.yaml</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"comment\"># config.yaml</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">查看配置文件状态</span></span><br><span class=\"line\">  <span class=\"attr\">shell:</span> <span class=\"string\">cat</span> <span class=\"string\">/etc/rsyslog.conf</span> <span class=\"string\">|grep</span> <span class=\"string\">&quot;kern.\\*&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">register:</span> <span class=\"string\">ps</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">debug:</span> <span class=\"string\">msg=&#123;&#123;</span> <span class=\"string\">ps.stdout</span> <span class=\"string\">&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a>模版</h5><blockquote>\n<p>有些时候应用的配置文件会根据部署的机器调整一些参数，但是大部分参数不需要调整额这个时候就需要模版来处理 <br>ansibel的template<code>模块</code>使用python的jinja2模版引擎</p>\n</blockquote>\n<ul>\n<li>参数:<ul>\n<li>owner  在目标主机上通过模版生成的文件的所属者</li>\n<li>group  在目标主机上通过模版生成的文件的所属组</li>\n<li>mode   在目标主机上通过模版生成的文件的权限</li>\n<li>force  目标主机上已经有了文件是否强制覆盖</li>\n<li>backup 目标主机上已经有了文件是否覆盖</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"占位符\"><a href=\"#占位符\" class=\"headerlink\" title=\"占位符\"></a>占位符</h6><ul>\n<li>&lt;!–swig￼52–&gt; 表达式，比如变量、运算表达式、比较表达式等写法参考<a href=\"#%E6%AF%94%E8%BE%83%E7%AC%A6\">比较符</a></li>\n<li>&lt;!–swig￼53–&gt; 控制语句,如if控制结构，for循环控制结构</li>\n<li>注释，模板文件被渲染后，注释不会包含在最终生成的文件中</li>\n</ul>\n<h6 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h6><p>模版文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">基本变量替换</span><br><span class=\"line\">&#123;&#123; testvar &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">逻辑计算</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; number &gt; 1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; number is defined &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123; &#x27;/tmp&#x27; is exists  &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">数据结构取值</span><br><span class=\"line\">&#123;&#123; account.user &#125;&#125;</span><br><span class=\"line\">&#123;&#123; numbers.1 &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;# 这个是注释 #&#125;</span><br><span class=\"line\">&#123;# </span><br><span class=\"line\">这个是多行注释，</span><br><span class=\"line\">不会在生成的末班中显示</span><br><span class=\"line\">#&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">判断</span><br><span class=\"line\">&#123;% if numbers.1&gt;1 %&#125;</span><br><span class=\"line\">嘿嘿嘿</span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">循环</span><br><span class=\"line\">&#123;% for i in [3,14,15,9,26] -%&#125;</span><br><span class=\"line\">&#123;&#123; i &#125;&#125; &#123;&#123;&#x27; &#x27;&#125;&#125;</span><br><span class=\"line\">&#123;%- endfor %&#125;</span><br></pre></td></tr></table></figure>\n\n<p>playbook如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">testvar:</span> <span class=\"string\">footest</span></span><br><span class=\"line\">    <span class=\"attr\">number:</span> <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"attr\">account:</span></span><br><span class=\"line\">        <span class=\"attr\">user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">        <span class=\"attr\">passwd:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">numbers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;test&quot;</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">template:</span></span><br><span class=\"line\">      <span class=\"attr\">src:</span> <span class=\"string\">test.j2</span></span><br><span class=\"line\">      <span class=\"attr\">dest:</span> <span class=\"string\">/tmp/test</span></span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>ansible-playbook  -i inventories test.yaml</code></p>\n<h5 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h5><blockquote>\n<p>当任务越来越多时一个文件放这么多有些不一样配合include和import分门别类的存放ansible资源文件</p>\n</blockquote>\n<h6 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h6><blockquote>\n<p>每个目录下都有an.yaml用语导入此目录其他的yaml</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── inventories</span><br><span class=\"line\">├── roles</span><br><span class=\"line\">│   ├── defaults</span><br><span class=\"line\">│   ├── files       # 文件的目录</span><br><span class=\"line\">│   ├── handlers    # handler目录</span><br><span class=\"line\">│   ├── meta        # 特殊设定及其依赖关系</span><br><span class=\"line\">│   ├── tasks       # 存放task的目录</span><br><span class=\"line\">│   ├── templates   # 存放模版</span><br><span class=\"line\">│   └── vars        # 存放变量</span><br><span class=\"line\">└── test.yaml       # 剧本文件</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"角色例子\"><a href=\"#角色例子\" class=\"headerlink\" title=\"角色例子\"></a>角色例子</h6><p>在和roles文件同级目录创建剧本</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">roles:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">role:</span> <span class=\"string\">roles</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在roles文件夹的task中创建task</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">debug:</span> </span><br><span class=\"line\">    <span class=\"attr\">msg:</span> <span class=\"string\">hahaha</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>运行<code>ansible-playbook  -i inventories test.yaml</code></p>\n<h5 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h5><blockquote>\n<p>对一些数据进行处理</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">vars:</span></span><br><span class=\"line\">    <span class=\"attr\">testvar:</span> <span class=\"string\">haha</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">debug:</span></span><br><span class=\"line\">      <span class=\"attr\">msg:</span> <span class=\"string\">&quot;<span class=\"template-variable\">&#123;&#123; testvar | upper &#125;&#125;</span>&quot;</span>    <span class=\"comment\"># 将全部字母转换成大写</span></span><br></pre></td></tr></table></figure>\n\n<p>基本格式就像上面一样其他功能只需要将<code>upper</code>替换为其他的字段即可</p>\n<p>常用过滤器</p>\n<ul>\n<li>upper 字符转换为大写</li>\n<li>lower 字符转换为小写</li>\n<li>indent 设置缩进</li>\n<li>json_query 将字符串作为json</li>\n<li>dirname 路径字符串的路径名</li>\n<li>hash() 进行hash处理</li>\n<li>password_hash 密码专用的hash</li>\n<li>checksum  计算md5</li>\n<li>ipaddr() 需要安装netaddr，针对ip地址处理</li>\n</ul>\n<h5 id=\"lookup\"><a href=\"#lookup\" class=\"headerlink\" title=\"lookup\"></a>lookup</h5><blockquote>\n<p>上面的过滤器和lookup其实都是插件具体介绍:<a href=\"https://docs.ansible.com/ansible/latest/plugins/plugins.html\">https://docs.ansible.com/ansible/latest/plugins/plugins.html</a></p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">渲染模版到变量</span></span><br><span class=\"line\">  <span class=\"attr\">set_fact:</span></span><br><span class=\"line\">    <span class=\"attr\">yaml:</span> <span class=\"string\">&#x27;<span class=\"template-variable\">&#123;&#123; lookup(&quot;template&quot;, &quot;test.j2&quot;) &#125;&#125;</span>&#x27;</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">读取文件到变量</span></span><br><span class=\"line\">  <span class=\"attr\">set_fact:</span></span><br><span class=\"line\">    <span class=\"attr\">file:</span> <span class=\"string\">&#x27;<span class=\"template-variable\">&#123;&#123; lookup(&quot;file&quot;, &quot;/etc/hosts&quot;) &#125;&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在本地-只执行一次\"><a href=\"#在本地-只执行一次\" class=\"headerlink\" title=\"在本地&amp;&amp;只执行一次\"></a>在本地&amp;&amp;只执行一次</h5><blockquote>\n<p>有些时候一些剧本在本地执行，就像本地执行shell一样,由于在本地执行所以需要搭配<code>run_once</code></p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\">  <span class=\"attr\">connection:</span> <span class=\"string\">local</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">run_once:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;test&quot;</span> <span class=\"string\">&gt;</span> <span class=\"string\">/tmp/test</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"并行执行\"><a href=\"#并行执行\" class=\"headerlink\" title=\"并行执行\"></a>并行执行</h5><blockquote>\n<p>在机器比较多时一台一台执行太慢<code>serial</code>可以指定并行执行的数量</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">hosts:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">remote_user:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">serial:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">#serial: 20% 按百分比</span></span><br><span class=\"line\">  <span class=\"attr\">gather_facts:</span> <span class=\"literal\">no</span></span><br><span class=\"line\">  <span class=\"attr\">tasks:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"attr\">shell:</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;test&quot;</span> <span class=\"string\">&gt;</span> <span class=\"string\">/tmp/test</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"http://www.zsythink.net/archives/category/%e8%bf%90%e7%bb%b4%e7%9b%b8%e5%85%b3/ansible/\">http://www.zsythink.net/archives/category/%e8%bf%90%e7%bb%b4%e7%9b%b8%e5%85%b3/ansible/</a><br><a href=\"https://docs.ansible.com/\">https://docs.ansible.com/</a><br><a href=\"http://www.ansible.com.cn/\">http://www.ansible.com.cn/</a></p>\n","tags":["ansible"]},{"title":"chattr","url":"/2022/05/21/chattr/","content":"<p>chattr是一个可以修改文件属性的命令</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>linux是一个多用户系统，防止一个用户删除了另一个用户的文件，有些病毒入侵服务器之后就会修改此属性让管理员无法删除和修改文件</p>\n</blockquote>\n<h4 id=\"基本参数说明\"><a href=\"#基本参数说明\" class=\"headerlink\" title=\"基本参数说明\"></a>基本参数说明</h4><blockquote>\n<p>格式为 chattr [-pRVf] [-+&#x3D;aAcCdDeijPsStTu] [-v version] files…</p>\n</blockquote>\n<p>选项:</p>\n<ul>\n<li>R：用于递归显示目录的列表属性及其内容。</li>\n<li>V：它将显示程序的版本。</li>\n<li>a：用于列出目录的所有文件，其中还包括名称以句点（’.’）开头的文件。</li>\n<li>d：此选项会将目录列为常规文件，而不是列出其内容。</li>\n<li>v：用于显示文件的版本</li>\n</ul>\n<p>操作符:</p>\n<ul>\n<li>-：删除文件一个属性</li>\n<li>+：添加文件一个属性</li>\n<li>&#x3D;：使选定的属性成为文件所具有的唯一属性</li>\n</ul>\n<p>操作属性:</p>\n<ul>\n<li>a：让文件或目录仅供附加用途。</li>\n<li>b：不更新文件或目录的最后存取时间。</li>\n<li>c：将文件或目录压缩后存放。</li>\n<li>d：将文件或目录排除在倾倒操作之外。</li>\n<li>e: 此属性表示文件正在使用扩展数据块映射磁盘上的块。不能使用chattr修改e属性。</li>\n<li>i：不得任意更动文件或目录。</li>\n<li>s：保密性删除文件或目录。</li>\n<li>S：即时更新文件或目录。</li>\n<li>u：预防意外删除。</li>\n</ul>\n<h4 id=\"查看文件属性lsattr\"><a href=\"#查看文件属性lsattr\" class=\"headerlink\" title=\"查看文件属性lsattr\"></a>查看文件属性lsattr</h4><p>列出文件属性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">lsattr file</span><br></pre></td></tr></table></figure>\n\n<p>只显示了”e”属性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">--------------e---- file</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h4><p>添加”i”属性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo chattr +i file</span><br></pre></td></tr></table></figure>\n\n<p>查看文件属性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">lsattr file</span><br></pre></td></tr></table></figure>\n\n<p>增加了”e”属性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">----i---------e---- file</span><br></pre></td></tr></table></figure>\n\n<p>这个时候写入文件时</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo echo &quot;test&quot; &gt; file</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">zsh: operation not permitted: file</span></span><br></pre></td></tr></table></figure>\n\n<p>删除文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo rm -rf file</span><br><span class=\"line\">rm: cannot remove &#x27;file&#x27;: Operation not permitted</span><br></pre></td></tr></table></figure>\n\n<p>删除”i”属性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo chattr -i file</span><br></pre></td></tr></table></figure>\n\n<p>这个时候就可以写入和删除操作了</p>\n<p>添加唯一属性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo chattr &quot;=i&quot; file</span><br></pre></td></tr></table></figure>\n\n<p>再查看只有一个”i”属性</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">lsattr file</span><br><span class=\"line\">----i-------------- file</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.runoob.com/linux/linux-comm-chattr.html\">https://www.runoob.com/linux/linux-comm-chattr.html</a><br><a href=\"https://www.geeksforgeeks.org/chattr-command-in-linux-with-examples\">https://www.geeksforgeeks.org/chattr-command-in-linux-with-examples</a></p>\n","tags":["lsattr"]},{"title":"argocd","url":"/2022/03/04/argocd/","content":"<p>argocd 是个有可视化界面的git-ops工具</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>argocd是一个gitops工具，可以将git上的文件同步到k8s集群，且支持多集群，这样我只需要修改git上的内容就可以完成发布</p>\n</blockquote>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><blockquote>\n<p>单节点安装</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create namespace argocd</span><br><span class=\"line\">kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.2.5/manifests/install.yaml</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>高可用安装</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create namespace argocd</span><br><span class=\"line\">kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.2.5/manifests/ha/install.yaml</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"登录界面\"><a href=\"#登录界面\" class=\"headerlink\" title=\"登录界面\"></a>登录界面</h4><p>argocd默认安装没有用nodePort，我们需要手动将<code>argocd-server</code>改为nodePort</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl patch svc argocd-server -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;type&quot;:&quot;NodePort&quot;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以通过NodePort来访问了，账号为admin</p>\n<p>获取初始密码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=&quot;&#123;.data.password&#125;&quot; | base64 -d</span><br></pre></td></tr></table></figure>\n\n<p>接下来就可以在界面上点点点了</p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://argo-cd.readthedocs.io/en/stable/\">https://argo-cd.readthedocs.io/en/stable/</a></p>\n","tags":["gitops"]},{"title":"Apache Guacamole","url":"/2020/10/29/apache-Guacamole/","content":"<p>Apache Guacamole是一个基于web的远程终端支持ssh,vnc,rdp等协议</p>\n<span id=\"more\"></span>\n\n<h4 id=\"架构图如下\"><a href=\"#架构图如下\" class=\"headerlink\" title=\"架构图如下\"></a>架构图如下</h4><p>官网地址：<a href=\"http://guacamole.apache.org/\">http://guacamole.apache.org</a></p>\n<p><img src=\"/../images/pasted-4.png\" alt=\"guac-arch\"></p>\n<blockquote>\n<p>从图中可看出分为guacamole服务和guacd服务，guacd服务负责连接远程的vpc，rdp，ssh等服务器</p>\n</blockquote>\n<h4 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h4><p>这里使用k8s部署，注意本安装仅用于测试使用，由于mysql没做持久化重启之后数据会丢失</p>\n<h5 id=\"部署guacamole\"><a href=\"#部署guacamole\" class=\"headerlink\" title=\"部署guacamole\"></a>部署guacamole</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: guacamole</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: guacamole</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: guacamole</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - env:</span><br><span class=\"line\">        - name: GUACD_HOSTNAME # guacd地址</span><br><span class=\"line\">          value: guacamole-guacd</span><br><span class=\"line\">        - name: MYSQL_DATABASE # mysql数据库</span><br><span class=\"line\">          value: guacamole</span><br><span class=\"line\">        - name: MYSQL_HOSTNAME # mysql地址</span><br><span class=\"line\">          value: guacamole-mysql</span><br><span class=\"line\">        - name: MYSQL_PASSWORD # mysql密码</span><br><span class=\"line\">          value: root</span><br><span class=\"line\">        - name: MYSQL_USER # mysql用户</span><br><span class=\"line\">          value: root</span><br><span class=\"line\">        image: guacamole/guacamole:latest # 这里使用了最新版</span><br><span class=\"line\">        name: guacamole</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 8080</span><br><span class=\"line\">          name: 8080tcp02</span><br><span class=\"line\">          protocol: TCP</span><br><span class=\"line\">        resources: &#123;&#125;</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: guacamole</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 8080</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 8080</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: guacamole</span><br><span class=\"line\">  type: NodePort # 使用nodeport进行访问，也可以用ingress</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"部署guacd\"><a href=\"#部署guacd\" class=\"headerlink\" title=\"部署guacd\"></a>部署guacd</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: guacamole-guacd</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: guacamole-guacd</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: guacamole-guacd</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: guacamole-guacd</span><br><span class=\"line\">        image: guacamole/guacd:latest</span><br><span class=\"line\">        resources: &#123;&#125;</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 4822</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: guacamole-guacd</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: guacamole-guacd</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 4822</span><br><span class=\"line\">    targetPort: 4822</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"部署mysql\"><a href=\"#部署mysql\" class=\"headerlink\" title=\"部署mysql\"></a>部署mysql</h5><blockquote>\n<p>mysql可以使用已经有的,且以下资源未做持久化重启之后数据会丢失不要用于生产！！！</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: guacamole-mysql</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: guacamole-mysql</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: guacamole-mysql</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: guacamole-mysql</span><br><span class=\"line\">        image: mysql:latest</span><br><span class=\"line\">        env:</span><br><span class=\"line\">        - name: MYSQL_ROOT_PASSWORD</span><br><span class=\"line\">          value: root</span><br><span class=\"line\">        resources: &#123;&#125;</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 3306</span><br><span class=\"line\">---</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: guacamole-mysql</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    app: guacamole-mysql</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 3306</span><br><span class=\"line\">    targetPort: 3306</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"初始化mysql\"><a href=\"#初始化mysql\" class=\"headerlink\" title=\"初始化mysql\"></a>初始化mysql</h5><ol>\n<li><p>将guacamole的Entrypoint改为<code>sleep 1h</code>以方便进入容器</p>\n</li>\n<li><p>容器里执行<code>/opt/guacamole/bin/initdb.sh --mysql &gt; initdb.sql</code> 导出mysql的表结构</p>\n</li>\n<li><p><code>apt update &amp;&amp; apt install mysql-client</code>安装mysql客户端</p>\n</li>\n<li><p><code>mysql -h guacamole-mysql -uroot -proot</code>登录mysql数据库</p>\n<ul>\n<li>如果出现 ERROR 2059 (HY000): Authentication plugin ‘caching_sha2_password’ cannot be loaded 错误则需要在guacamole-mysql容器里登录数据库执行<br> <code>ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;root&#39;;</code></li>\n</ul>\n</li>\n<li><p><code>create database guacamole;</code> 创建数据库</p>\n</li>\n<li><p><code>use guacamole;</code> 进入数据库， <code>source initdb.sql</code>导入表结构</p>\n</li>\n</ol>\n<h5 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h5><ul>\n<li>因为是nodeport所有可以使用 &lt;nodePort&gt;&#x2F;guacamole</li>\n<li>默认账号密码为guacadmin&#x2F;guacadmin</li>\n</ul>\n<h5 id=\"添加链接\"><a href=\"#添加链接\" class=\"headerlink\" title=\"添加链接\"></a>添加链接</h5><p><img src=\"/../images/pasted-5.png\" alt=\"upload successful\"></p>\n<p>进入配置界面配置根据目标主机的情况填写</p>\n<p><img src=\"/../images/pasted-6.png\" alt=\"upload successful\"></p>\n<p>这个时候首页就出现了可以连接的机器，点击即可连接此机器</p>\n<p><img src=\"/../images/pasted-7.png\" alt=\"upload successful\"></p>\n<p>Ctrl + Alt + Shift 可以打开控制面板，复制文件也可以直接拖进去</p>\n","tags":["终端"]},{"title":"cilium安装部署","url":"/2023/06/21/cilium%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/","content":"<p>clium是一个使用ebpf实现的cni</p>\n<span id=\"more\"></span>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><div class=\"note warning\"><p>ebpf需要高版本内核支持,建议5.0以上</p>\n</div>\n\n<ul>\n<li>下载二进制文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/master/stable.txt)</span><br><span class=\"line\">CLI_ARCH=amd64</span><br><span class=\"line\">if [ &quot;$(uname -m)&quot; = &quot;aarch64&quot; ]; then CLI_ARCH=arm64; fi</span><br><span class=\"line\">curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/$&#123;CILIUM_CLI_VERSION&#125;/cilium-linux-$&#123;CLI_ARCH&#125;.tar.gz&#123;,.sha256sum&#125;</span><br><span class=\"line\">sha256sum --check cilium-linux-$&#123;CLI_ARCH&#125;.tar.gz.sha256sum</span><br><span class=\"line\">sudo tar xzvfC cilium-linux-$&#123;CLI_ARCH&#125;.tar.gz /usr/local/bin</span><br><span class=\"line\">rm cilium-linux-$&#123;CLI_ARCH&#125;.tar.gz&#123;,.sha256sum&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装cilium</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cilium install</span><br><span class=\"line\"></span><br><span class=\"line\">cilium status</span><br><span class=\"line\"></span><br><span class=\"line\">cilium hubble enable</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>开启hubble可观测性界面</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载二进制文件</span></span><br><span class=\"line\">wget https://github.com/cilium/hubble/releases/download/v0.10.0/hubble-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开启hubble界面</span></span><br><span class=\"line\">cilium hubble enable --ui</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">打开hubble界面</span></span><br><span class=\"line\">cilium hubble ui</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://docs.cilium.io/en/stable/\">https://docs.cilium.io/en/stable/</a></p>\n","tags":["cni","网络","k8s"]},{"title":"Centos8 web console(cockpit)","url":"/2020/08/03/centos8-web-console/","content":"<p>有些时候我们不想登录上centos的服务器执行一些操作这个时候就需要一个图形化界面</p>\n<span id=\"more\"></span>\n\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><pre><code>dnf -y install cockpit\n</code></pre>\n<h5 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h5><pre><code>systemctl start cockpit\n</code></pre>\n<h5 id=\"开机自动启动\"><a href=\"#开机自动启动\" class=\"headerlink\" title=\"开机自动启动\"></a>开机自动启动</h5><pre><code>systemctl enable cockpit\n</code></pre>\n<h5 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h5><p>在浏览器中输入&lt;服务器的IP:9090&gt;即可登录到web界面</p>\n<p>输入账号密码后进去如类似下界面</p>\n<p><img src=\"/../images/pasted-2.png\" alt=\"upload successful\"></p>\n<blockquote>\n<p>端口号可以在 <code>/usr/lib/systemd/system/cockpit.socket</code>中修改</p>\n</blockquote>\n","tags":["linux"]},{"title":"contaInerd源码-diff","url":"/2023/11/03/contaInerd%E6%BA%90%E7%A0%81-diff/","content":"<p>diff主要负责解压缩过程</p>\n<span id=\"more\"></span>\n\n<p>代码版本为v.17.5</p>\n<h4 id=\"接口定义\"><a href=\"#接口定义\" class=\"headerlink\" title=\"接口定义\"></a>接口定义</h4><ul>\n<li>接口比较少只有2个</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// diff/diff.go</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Applier <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Apply applies the content referred to by the given descriptor to</span></span><br><span class=\"line\">  <span class=\"comment\">// the provided mount. The method of applying is based on the</span></span><br><span class=\"line\">  <span class=\"comment\">// implementation and content descriptor. For example, in the common</span></span><br><span class=\"line\">  <span class=\"comment\">// case the descriptor is a file system difference in tar format,</span></span><br><span class=\"line\">  <span class=\"comment\">// that tar would be applied on top of the mounts.</span></span><br><span class=\"line\">  Apply(ctx context.Context, desc ocispec.Descriptor, mount []mount.Mount, opts ...ApplyOpt) (ocispec.Descriptor, <span class=\"type\">error</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Comparer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Compare computes the difference between two mounts and returns a</span></span><br><span class=\"line\">  <span class=\"comment\">// descriptor for the computed diff. The options can provide</span></span><br><span class=\"line\">  <span class=\"comment\">// a ref which can be used to track the content creation of the diff.</span></span><br><span class=\"line\">  <span class=\"comment\">// The media type which is used to determine the format of the created</span></span><br><span class=\"line\">  <span class=\"comment\">// content can also be provided as an option.</span></span><br><span class=\"line\">  Compare(ctx context.Context, lower, upper []mount.Mount, opts ...Opt) (ocispec.Descriptor, <span class=\"type\">error</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"diff-grpc类型\"><a href=\"#diff-grpc类型\" class=\"headerlink\" title=\"diff grpc类型\"></a>diff grpc类型</h4><ul>\n<li>常规的注册,从<code>serivce</code>类型中拿到<code>diffservice</code>一个实例</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/diff/service.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type: plugin.GRPCPlugin,</span><br><span class=\"line\">    ID:   <span class=\"string\">&quot;diff&quot;</span>,</span><br><span class=\"line\">    Requires: []plugin.Type&#123;</span><br><span class=\"line\">      plugin.ServicePlugin,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      plugins, err := ic.GetByType(plugin.ServicePlugin)</span><br><span class=\"line\"></span><br><span class=\"line\">      p, ok := plugins[services.DiffService]</span><br><span class=\"line\"> </span><br><span class=\"line\">      i, err := p.Instance()</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &amp;service&#123;local: i.(diffapi.DiffClient)&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同样实现了接口直接调用了service的apply</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *service)</span></span> Apply(ctx context.Context, er *diffapi.ApplyRequest) (*diffapi.ApplyResponse, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.local.Apply(ctx, er)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"diff-service类型\"><a href=\"#diff-service类型\" class=\"headerlink\" title=\"diff service类型\"></a>diff service类型</h4><ul>\n<li>这里注册的时候添加了一个config,获取更下面的<code>DiffPlugin</code>一个实例</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/diff/local.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type: plugin.ServicePlugin,</span><br><span class=\"line\">    ID:   services.DiffService,</span><br><span class=\"line\">    Requires: []plugin.Type&#123;</span><br><span class=\"line\">      plugin.DiffPlugin,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Config: defaultDifferConfig,</span><br><span class=\"line\">    InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      differs, err := ic.GetByType(plugin.DiffPlugin)</span><br><span class=\"line\">  </span><br><span class=\"line\">      orderedNames := ic.Config.(*config).Order</span><br><span class=\"line\">      ordered := <span class=\"built_in\">make</span>([]differ, <span class=\"built_in\">len</span>(orderedNames))</span><br><span class=\"line\">      <span class=\"keyword\">for</span> i, n := <span class=\"keyword\">range</span> orderedNames &#123;</span><br><span class=\"line\">        differp, ok := differs[n]</span><br><span class=\"line\">    </span><br><span class=\"line\">        d, err := differp.Instance()</span><br><span class=\"line\">   </span><br><span class=\"line\">        ordered[i], ok = d.(differ)</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &amp;local&#123;</span><br><span class=\"line\">        differs: ordered,</span><br><span class=\"line\">      &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>组合好opt然后传入到Apply</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/diff/local.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *local)</span></span> Apply(ctx context.Context, er *diffapi.ApplyRequest, _ ...grpc.CallOption) (*diffapi.ApplyResponse, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    ocidesc ocispec.Descriptor</span><br><span class=\"line\">    err     <span class=\"type\">error</span></span><br><span class=\"line\">    desc    = toDescriptor(er.Diff)</span><br><span class=\"line\">    mounts  = toMounts(er.Mounts)</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts []diff.ApplyOpt</span><br><span class=\"line\">  <span class=\"keyword\">if</span> er.Payloads != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    opts = <span class=\"built_in\">append</span>(opts, diff.WithPayloads(er.Payloads))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, differ := <span class=\"keyword\">range</span> l.differs &#123;</span><br><span class=\"line\">    ocidesc, err = differ.Apply(ctx, desc, mounts, opts...)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !errdefs.IsNotImplemented(err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;diffapi.ApplyResponse&#123;</span><br><span class=\"line\">    Applied: fromDescriptor(ocidesc),</span><br><span class=\"line\">  &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"diff类型\"><a href=\"#diff类型\" class=\"headerlink\" title=\"diff类型\"></a>diff类型</h4><ul>\n<li>这里注册一个<code>DiffPlugin</code>,这里不一样的是从插件里拿的是<code>MetadataPlugin</code>,然后获取metadata的ContentStore()并传值给<code>Comparer</code>和<code>Applier</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// diff/walking/plugin/plugin.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type: plugin.DiffPlugin,</span><br><span class=\"line\">    ID:   <span class=\"string\">&quot;walking&quot;</span>,</span><br><span class=\"line\">    Requires: []plugin.Type&#123;</span><br><span class=\"line\">      plugin.MetadataPlugin,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      md, err := ic.Get(plugin.MetadataPlugin)</span><br><span class=\"line\"></span><br><span class=\"line\">      ic.Meta.Platforms = <span class=\"built_in\">append</span>(ic.Meta.Platforms, platforms.DefaultSpec())</span><br><span class=\"line\">      cs := md.(*metadata.DB).ContentStore()</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> diffPlugin&#123;</span><br><span class=\"line\">        Comparer: walking.NewWalkingDiff(cs),</span><br><span class=\"line\">        Applier:  apply.NewFileSystemApplier(cs),</span><br><span class=\"line\">      &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>fsApplier只有个store</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// diff/apply/apply.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewFileSystemApplier returns an applier which simply mounts</span></span><br><span class=\"line\"><span class=\"comment\">// and applies diff onto the mounted filesystem.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewFileSystemApplier</span><span class=\"params\">(cs content.Provider)</span></span> diff.Applier &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;fsApplier&#123;</span><br><span class=\"line\">    store: cs,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这里开始从<code>content</code>里读取blob</li>\n<li>然后申明一个<code>processor</code>,<code>processor</code>主要和解压有关如gz等</li>\n<li>从配置里获取一个processor并赋值</li>\n<li>随后processor赋值到<code>readCounter</code>中</li>\n<li>ra传递给<code>apply()</code>进行下一步处理</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// diff/apply/apply.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *fsApplier)</span></span> Apply(ctx context.Context, desc ocispec.Descriptor, mounts []mount.Mount, opts ...diff.ApplyOpt) (d ocispec.Descriptor, err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 从content读取</span></span><br><span class=\"line\">  ra, err := s.store.ReaderAt(ctx, desc)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> ra.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> processors []diff.StreamProcessor</span><br><span class=\"line\">  processor := diff.NewProcessorChain(desc.MediaType, content.NewReader(ra))</span><br><span class=\"line\">  processors = <span class=\"built_in\">append</span>(processors, processor)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> processor, err = diff.GetProcessor(ctx, processor, config.ProcessorPayloads); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> emptyDesc, errors.Wrapf(err, <span class=\"string\">&quot;failed to get stream processor for %s&quot;</span>, desc.MediaType)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    processors = <span class=\"built_in\">append</span>(processors, processor)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> processor.MediaType() == ocispec.MediaTypeImageLayer &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> processor.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">  digester := digest.Canonical.Digester()</span><br><span class=\"line\">  rc := &amp;readCounter&#123;</span><br><span class=\"line\">    r: io.TeeReader(processor, digester.Hash()),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//真正开始apply</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := apply(ctx, mounts, rc); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> emptyDesc, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Read any trailing data</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> _, err := io.Copy(io.Discard, rc); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> emptyDesc, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, p := <span class=\"keyword\">range</span> processors &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ep, ok := p.(<span class=\"keyword\">interface</span>&#123; Err() <span class=\"type\">error</span> &#125;); ok &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := ep.Err(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> emptyDesc, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ocispec.Descriptor&#123;</span><br><span class=\"line\">    MediaType: ocispec.MediaTypeImageLayer,</span><br><span class=\"line\">    Size:      rc.c,</span><br><span class=\"line\">    Digest:    digester.Digest(),</span><br><span class=\"line\">  &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>apply()</code>首先通过mouonts的长度和类型判断是否是临时挂载和使用哪个驱动</li>\n<li>一般在解压是需要<code>mount.WithTempMount()</code>挂载</li>\n<li>需要注意的是apply有各个平台的实现</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// diff/apply/apply_linux.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">apply</span><span class=\"params\">(ctx context.Context, mounts []mount.Mount, r io.Reader)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"built_in\">len</span>(mounts) == <span class=\"number\">1</span> &amp;&amp; mounts[<span class=\"number\">0</span>].Type == <span class=\"string\">&quot;overlay&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\">// OverlayConvertWhiteout (mknod c 0 0) doesn&#x27;t work in userns.</span></span><br><span class=\"line\">    <span class=\"comment\">// https://github.com/containerd/containerd/issues/3762</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> userns.RunningInUserNS() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    path, parents, err := getOverlayPath(mounts[<span class=\"number\">0</span>].Options)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> errdefs.IsInvalidArgument(err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    opts := []archive.ApplyOpt&#123;</span><br><span class=\"line\">      archive.WithConvertWhiteout(archive.OverlayConvertWhiteout),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(parents) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      opts = <span class=\"built_in\">append</span>(opts, archive.WithParents(parents))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _, err = archive.Apply(ctx, path, r, opts...)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"built_in\">len</span>(mounts) == <span class=\"number\">1</span> &amp;&amp; mounts[<span class=\"number\">0</span>].Type == <span class=\"string\">&quot;aufs&quot;</span>:</span><br><span class=\"line\">    path, parents, err := getAufsPath(mounts[<span class=\"number\">0</span>].Options)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> errdefs.IsInvalidArgument(err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    opts := []archive.ApplyOpt&#123;</span><br><span class=\"line\">      archive.WithConvertWhiteout(archive.AufsConvertWhiteout),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(parents) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      opts = <span class=\"built_in\">append</span>(opts, archive.WithParents(parents))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _, err = archive.Apply(ctx, path, r, opts...)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mount.WithTempMount(ctx, mounts, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(root <span class=\"type\">string</span>)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    _, err := archive.Apply(ctx, root, r)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这里开始执行bind挂载</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mount/temp.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// WithTempMount mounts the provided mounts to a temp dir, and pass the temp dir to f.</span></span><br><span class=\"line\"><span class=\"comment\">// The mounts are valid during the call to the f.</span></span><br><span class=\"line\"><span class=\"comment\">// Finally we will unmount and remove the temp dir regardless of the result of f.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WithTempMount</span><span class=\"params\">(ctx context.Context, mounts []Mount, f <span class=\"keyword\">func</span>(root <span class=\"type\">string</span>)</span></span> <span class=\"type\">error</span>) (err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  root, uerr := ioutil.TempDir(tempMountLocation, <span class=\"string\">&quot;containerd-mount&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> uerr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.Wrapf(uerr, <span class=\"string\">&quot;failed to create temp dir&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// We use Remove here instead of RemoveAll.</span></span><br><span class=\"line\">  <span class=\"comment\">// The RemoveAll will delete the temp dir and all children it contains.</span></span><br><span class=\"line\">  <span class=\"comment\">// When the Unmount fails, RemoveAll will incorrectly delete data from</span></span><br><span class=\"line\">  <span class=\"comment\">// the mounted dir. However, if we use Remove, even though we won&#x27;t</span></span><br><span class=\"line\">  <span class=\"comment\">// successfully delete the temp dir and it may leak, we won&#x27;t loss data</span></span><br><span class=\"line\">  <span class=\"comment\">// from the mounted dir.</span></span><br><span class=\"line\">  <span class=\"comment\">// For details, please refer to #1868 #1785.</span></span><br><span class=\"line\">  <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> uerr = os.Remove(root); uerr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      log.G(ctx).WithError(uerr).WithField(<span class=\"string\">&quot;dir&quot;</span>, root).Errorf(<span class=\"string\">&quot;failed to remove mount temp dir&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We should do defer first, if not we will not do Unmount when only a part of Mounts are failed.</span></span><br><span class=\"line\">  <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> uerr = UnmountAll(root, <span class=\"number\">0</span>); uerr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      uerr = errors.Wrapf(uerr, <span class=\"string\">&quot;failed to unmount %s&quot;</span>, root)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        err = uerr</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        err = errors.Wrap(err, uerr.Error())</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// [&#123;bind /root/snapshotter/snapshots/1/fs [rw rbind]&#125;] /var/lib/containerd/tmpmounts/containerd-mount4278343774</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> uerr = All(mounts, root); uerr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.Wrapf(uerr, <span class=\"string\">&quot;failed to mount %s&quot;</span>, root)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> errors.Wrapf(f(root), <span class=\"string\">&quot;mount callback failed on %s&quot;</span>, root)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>All()</code>遍历所有mouts并执行挂载</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mount/mount.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// All mounts all the provided mounts to the provided target</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">All</span><span class=\"params\">(mounts []Mount, target <span class=\"type\">string</span>)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, m := <span class=\"keyword\">range</span> mounts &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := m.Mount(target); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mount/mount_linux.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Mount)</span></span> Mount(target <span class=\"type\">string</span>) (err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, helperBinary := <span class=\"keyword\">range</span> allowedHelperBinaries &#123;</span><br><span class=\"line\">    <span class=\"comment\">// helperBinary = &quot;mount.fuse&quot;, typePrefix = &quot;fuse.&quot;</span></span><br><span class=\"line\">    typePrefix := strings.TrimPrefix(helperBinary, <span class=\"string\">&quot;mount.&quot;</span>) + <span class=\"string\">&quot;.&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> strings.HasPrefix(m.Type, typePrefix) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> m.mountWithHelper(helperBinary, typePrefix, target)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    chdir   <span class=\"type\">string</span></span><br><span class=\"line\">    options = m.Options</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// avoid hitting one page limit of mount argument buffer</span></span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> 512 is a buffer during pagesize check.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> m.Type == <span class=\"string\">&quot;overlay&quot;</span> &amp;&amp; optionsSize(options) &gt;= pagesize<span class=\"number\">-512</span> &#123;</span><br><span class=\"line\">    chdir, options = compactLowerdirOption(options)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  flags, data, losetup := parseMountOptions(options)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(data) &gt; pagesize &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.Errorf(<span class=\"string\">&quot;mount options is too long&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// propagation types.</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ptypes = unix.MS_SHARED | unix.MS_PRIVATE | unix.MS_SLAVE | unix.MS_UNBINDABLE</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Ensure propagation type change flags aren&#x27;t included in other calls.</span></span><br><span class=\"line\">  oflags := flags &amp;^ ptypes</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// In the case of remounting with changed data (data != &quot;&quot;), need to call mount (moby/moby#34077).</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> flags&amp;unix.MS_REMOUNT == <span class=\"number\">0</span> || data != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Initial call applying all non-propagation flags for mount</span></span><br><span class=\"line\">    <span class=\"comment\">// or remount with changed data</span></span><br><span class=\"line\">    source := m.Source</span><br><span class=\"line\">    <span class=\"keyword\">if</span> losetup &#123;</span><br><span class=\"line\">      loFile, err := setupLoop(m.Source, LoopParams&#123;</span><br><span class=\"line\">        Readonly:  oflags&amp;unix.MS_RDONLY == unix.MS_RDONLY,</span><br><span class=\"line\">        Autoclear: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">defer</span> loFile.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Mount the loop device instead</span></span><br><span class=\"line\">      source = loFile.Name()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 执行mount系统调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := mountAt(chdir, source, target, m.Type, <span class=\"type\">uintptr</span>(oflags), data); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>看完bind挂载在看下普通的Apply()</li>\n<li>根据applyFunc参数来确定使用哪个apply，没有则默认使用<code>applyFunc</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// archive/tar.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Apply applies a tar stream of an OCI style diff tar.</span></span><br><span class=\"line\"><span class=\"comment\">// See https://github.com/opencontainers/image-spec/blob/master/layer.md#applying-changesets</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Apply</span><span class=\"params\">(ctx context.Context, root <span class=\"type\">string</span>, r io.Reader, opts ...ApplyOpt)</span></span> (<span class=\"type\">int64</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  root = filepath.Clean(root)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> options ApplyOptions</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, opt := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := opt(&amp;options); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>, errors.Wrap(err, <span class=\"string\">&quot;failed to apply option&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> options.Filter == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    options.Filter = all</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> options.applyFunc == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    options.applyFunc = applyFunc <span class=\"comment\">// 这里调用了applyNaive</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> options.applyFunc(ctx, root, r, options)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>applyNaive负责将tar文件解压到指定目录中(和snap绑定的临时目录tmpmounts)</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// archive/tar.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// applyNaive applies a tar stream of an OCI style diff tar to a directory</span></span><br><span class=\"line\"><span class=\"comment\">// applying each file as either a whole file or whiteout.</span></span><br><span class=\"line\"><span class=\"comment\">// See https://github.com/opencontainers/image-spec/blob/master/layer.md#applying-changesets</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">applyNaive</span><span class=\"params\">(ctx context.Context, root <span class=\"type\">string</span>, r io.Reader, options ApplyOptions)</span></span> (size <span class=\"type\">int64</span>, err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    dirs []*tar.Header</span><br><span class=\"line\"></span><br><span class=\"line\">    tr = tar.NewReader(r)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Used for handling opaque directory markers which</span></span><br><span class=\"line\">    <span class=\"comment\">// may occur out of order</span></span><br><span class=\"line\">    unpackedPaths = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    convertWhiteout = options.ConvertWhiteout</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> convertWhiteout == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle whiteouts by removing the target files</span></span><br><span class=\"line\">    convertWhiteout = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(hdr *tar.Header, path <span class=\"type\">string</span>)</span></span> (<span class=\"type\">bool</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      base := filepath.Base(path)</span><br><span class=\"line\">      dir := filepath.Dir(path)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> base == whiteoutOpaqueDir &#123;</span><br><span class=\"line\">        _, err := os.Lstat(dir)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        err = filepath.Walk(dir, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(path <span class=\"type\">string</span>, info os.FileInfo, err <span class=\"type\">error</span>)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> os.IsNotExist(err) &#123;</span><br><span class=\"line\">              err = <span class=\"literal\">nil</span> <span class=\"comment\">// parent was deleted</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> err</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> path == dir &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> _, exists := unpackedPaths[path]; !exists &#123;</span><br><span class=\"line\">            err := os.RemoveAll(path)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> err</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> strings.HasPrefix(base, whiteoutPrefix) &#123;</span><br><span class=\"line\">        originalBase := base[<span class=\"built_in\">len</span>(whiteoutPrefix):]</span><br><span class=\"line\">        originalPath := filepath.Join(dir, originalBase)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>, os.RemoveAll(originalPath)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Iterate through the files in the archive.</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>, ctx.Err()</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    hdr, err := tr.Next()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err == io.EOF &#123;</span><br><span class=\"line\">      <span class=\"comment\">// end of tar archive</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    size += hdr.Size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Normalize name, for safety and for a simple is-root check</span></span><br><span class=\"line\">    hdr.Name = filepath.Clean(hdr.Name)</span><br><span class=\"line\"></span><br><span class=\"line\">    accept, err := options.Filter(hdr)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !accept &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> skipFile(hdr) &#123;</span><br><span class=\"line\">      log.G(ctx).Warnf(<span class=\"string\">&quot;file %q ignored: archive may not be supported on system&quot;</span>, hdr.Name)</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Split name and resolve symlinks for root directory.</span></span><br><span class=\"line\">    ppath, base := filepath.Split(hdr.Name)</span><br><span class=\"line\">    ppath, err = fs.RootPath(root, ppath)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>, errors.Wrap(err, <span class=\"string\">&quot;failed to get root path&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Join to root before joining to parent path to ensure relative links are</span></span><br><span class=\"line\">    <span class=\"comment\">// already resolved based on the root before adding to parent.</span></span><br><span class=\"line\">    path := filepath.Join(ppath, filepath.Join(<span class=\"string\">&quot;/&quot;</span>, base))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> path == root &#123;</span><br><span class=\"line\">      log.G(ctx).Debugf(<span class=\"string\">&quot;file %q ignored: resolved to root&quot;</span>, hdr.Name)</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If file is not directly under root, ensure parent directory</span></span><br><span class=\"line\">    <span class=\"comment\">// exists or is created.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ppath != root &#123;</span><br><span class=\"line\">      parentPath := ppath</span><br><span class=\"line\">      <span class=\"keyword\">if</span> base == <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">        parentPath = filepath.Dir(path)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := mkparent(ctx, parentPath, root, options.Parents); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Naive whiteout convert function which handles whiteout files by</span></span><br><span class=\"line\">    <span class=\"comment\">// removing the target files.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := validateWhiteout(path); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    writeFile, err := convertWhiteout(hdr, path)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>, errors.Wrapf(err, <span class=\"string\">&quot;failed to convert whiteout file %q&quot;</span>, hdr.Name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !writeFile &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// If path exits we almost always just want to remove and replace it.</span></span><br><span class=\"line\">    <span class=\"comment\">// The only exception is when it is a directory *and* the file from</span></span><br><span class=\"line\">    <span class=\"comment\">// the layer is also a directory. Then we want to merge them (i.e.</span></span><br><span class=\"line\">    <span class=\"comment\">// just apply the metadata from the layer).</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> fi, err := os.Lstat(path); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> !(fi.IsDir() &amp;&amp; hdr.Typeflag == tar.TypeDir) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err := os.RemoveAll(path); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    srcData := io.Reader(tr)</span><br><span class=\"line\">    srcHdr := hdr</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := createTarFile(ctx, path, root, srcHdr, srcData); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Directory mtimes must be handled at the end to avoid further</span></span><br><span class=\"line\">    <span class=\"comment\">// file creation in them to modify the directory mtime</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> hdr.Typeflag == tar.TypeDir &#123;</span><br><span class=\"line\">      dirs = <span class=\"built_in\">append</span>(dirs, hdr)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    unpackedPaths[path] = <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, hdr := <span class=\"keyword\">range</span> dirs &#123;</span><br><span class=\"line\">    path, err := fs.RootPath(root, hdr.Name)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := chtimes(path, boundTime(latestTime(hdr.AccessTime, hdr.ModTime)), boundTime(hdr.ModTime)); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> size, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Processor\"><a href=\"#Processor\" class=\"headerlink\" title=\"Processor\"></a>Processor</h4><ul>\n<li>processor主要负责解压缩相关比如gz等</li>\n<li>在apply这个函数中获取了processor</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// diff/apply/apply.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *fsApplier)</span></span> Apply(ctx context.Context, desc ocispec.Descriptor, mounts []mount.Mount, opts ...diff.ApplyOpt) (d ocispec.Descriptor, err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 从content读取</span></span><br><span class=\"line\">  ra, err := s.store.ReaderAt(ctx, desc)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> ra.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> processors []diff.StreamProcessor</span><br><span class=\"line\">  processor := diff.NewProcessorChain(desc.MediaType, content.NewReader(ra))</span><br><span class=\"line\">  processors = <span class=\"built_in\">append</span>(processors, processor)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> processor, err = diff.GetProcessor(ctx, processor, config.ProcessorPayloads); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> emptyDesc, errors.Wrapf(err, <span class=\"string\">&quot;failed to get stream processor for %s&quot;</span>, desc.MediaType)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    processors = <span class=\"built_in\">append</span>(processors, processor)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> processor.MediaType() == ocispec.MediaTypeImageLayer &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> processor.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">  digester := digest.Canonical.Digester()</span><br><span class=\"line\">  rc := &amp;readCounter&#123;</span><br><span class=\"line\">    r: io.TeeReader(processor, digester.Hash()),</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注册在这里，从配置文件遍历然后注册</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/server/server.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// New creates and initializes a new containerd server</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">New</span><span class=\"params\">(ctx context.Context, config *srvconfig.Config)</span></span> (*Server, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> id, p := <span class=\"keyword\">range</span> config.StreamProcessors &#123;</span><br><span class=\"line\">    diff.RegisterProcessor(diff.BinaryHandler(id, p.Returns, p.Accepts, p.Path, p.Args, p.Env)) <span class=\"comment\">// 注册 processor</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从注释来看是根据配置配置的<code>MediaType</code>,来选择二进制解压</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// diff/stream.go</span></span><br><span class=\"line\"><span class=\"comment\">// BinaryHandler creates a new stream processor handler which calls out to the given binary.</span></span><br><span class=\"line\"><span class=\"comment\">// The id is used to identify the stream processor and allows the caller to send</span></span><br><span class=\"line\"><span class=\"comment\">// payloads specific for that stream processor (i.e. decryption keys for decrypt stream processor).</span></span><br><span class=\"line\"><span class=\"comment\">// The binary will be called for the provided mediaTypes and return the given media type.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">BinaryHandler</span><span class=\"params\">(id, returnsMediaType <span class=\"type\">string</span>, mediaTypes []<span class=\"type\">string</span>, path <span class=\"type\">string</span>, args, env []<span class=\"type\">string</span>)</span></span> Handler &#123;</span><br><span class=\"line\">  set := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">struct</span>&#123;&#125;, <span class=\"built_in\">len</span>(mediaTypes))</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, m := <span class=\"keyword\">range</span> mediaTypes &#123;</span><br><span class=\"line\">    set[m] = <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(_ context.Context, mediaType <span class=\"type\">string</span>)</span></span> (StreamProcessorInit, <span class=\"type\">bool</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> _, ok := set[mediaType]; ok &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context, stream StreamProcessor, payloads <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]*types.Any)</span></span> (StreamProcessor, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">        payload := payloads[id]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NewBinaryProcessor(ctx, mediaType, returnsMediaType, stream, path, args, env, payload)</span><br><span class=\"line\">      &#125;, <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>而默认情况下是<code>compressedHandler()</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// register the default compression handler</span></span><br><span class=\"line\">  RegisterProcessor(compressedHandler)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">compressedHandler</span><span class=\"params\">(ctx context.Context, mediaType <span class=\"type\">string</span>)</span></span> (StreamProcessorInit, <span class=\"type\">bool</span>) &#123;</span><br><span class=\"line\">  compressed, err := images.DiffCompression(ctx, mediaType)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> compressed != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context, stream StreamProcessor, payloads <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]*types.Any)</span></span> (StreamProcessor, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      ds, err := compression.DecompressStream(stream)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &amp;compressedProcessor&#123;</span><br><span class=\"line\">        rc: ds,</span><br><span class=\"line\">      &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;, <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context, stream StreamProcessor, payloads <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]*types.Any)</span></span> (StreamProcessor, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;stdProcessor&#123;</span><br><span class=\"line\">      rc: stream,</span><br><span class=\"line\">    &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;, <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Decompress()就负责读取压缩格式</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DecompressStream decompresses the archive and returns a ReaderCloser with the decompressed archive.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DecompressStream</span><span class=\"params\">(archive io.Reader)</span></span> (DecompressReadCloser, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  buf := newBufferedReader(archive)</span><br><span class=\"line\">  bs, err := buf.Peek(<span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != io.EOF &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Note: we&#x27;ll ignore any io.EOF error because there are some odd</span></span><br><span class=\"line\">    <span class=\"comment\">// cases where the layer.tar file will be empty (zero bytes) and</span></span><br><span class=\"line\">    <span class=\"comment\">// that results in an io.EOF from the Peek() call. So, in those</span></span><br><span class=\"line\">    <span class=\"comment\">// cases we&#x27;ll just treat it as a non-compressed stream and</span></span><br><span class=\"line\">    <span class=\"comment\">// that means just create an empty layer.</span></span><br><span class=\"line\">    <span class=\"comment\">// See Issue docker/docker#18170</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> compression := DetectCompression(bs); compression &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> Uncompressed:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;readCloserWrapper&#123;</span><br><span class=\"line\">      Reader:      buf,</span><br><span class=\"line\">      compression: compression,</span><br><span class=\"line\">    &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> Gzip:</span><br><span class=\"line\">    ctx, cancel := context.WithCancel(context.Background())</span><br><span class=\"line\">    gzReader, err := gzipDecompress(ctx, buf)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      cancel()</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;readCloserWrapper&#123;</span><br><span class=\"line\">      Reader:      gzReader,</span><br><span class=\"line\">      compression: compression,</span><br><span class=\"line\">      closer: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">        cancel()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gzReader.Close()</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> Zstd:</span><br><span class=\"line\">    zstdReader, err := zstd.NewReader(buf)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;readCloserWrapper&#123;</span><br><span class=\"line\">      Reader:      zstdReader,</span><br><span class=\"line\">      compression: compression,</span><br><span class=\"line\">      closer: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">        zstdReader.Close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;unsupported compression format %s&quot;</span>, (&amp;compression).Extension())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":["k8s","containerd"]},{"title":"containerd基本使用","url":"/2023/10/24/containerd%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","content":"<p>containerd是一个容器运行时标准,也是k8s目前主流的运行时，本文介绍历史，存储方式，和oci</p>\n<span id=\"more\"></span>\n\n<h4 id=\"containerd历史\"><a href=\"#containerd历史\" class=\"headerlink\" title=\"containerd历史\"></a>containerd历史</h4><p>containerd是一个运行时，最开始集成在docker中拆解出来捐赠给cncf，同样被拆解出来的还有runc，以及根据docker镜像v2制定的oci镜像规范</p>\n<ul>\n<li>1.24版本之前k8s的kubelet内置了dokcer-shim插件负责和docker通讯，之后则只能通过cri</li>\n</ul>\n<pre><code class=\"highlight mermaid\">flowchart LR\n  kubelet(kubelet)--&gt;docker-shim(docker-shim)\n  docker-shim(docker-shim)--&gt;docker(docker)\n  docker(docker)--&gt;containers([containers])</code></pre>\n\n<ul>\n<li>最开始cri是一个单独的进程,然后发现效率太差</li>\n</ul>\n<pre><code class=\"highlight mermaid\">flowchart LR\n  kubelet(kubelet)--&quot;grpc&quot;--&gt;cri-plugin(cri-plugin)\n\n  cri-plugin(cri-plugin)--&quot;grpc&quot;--&gt;containerd(containerd)\n\n  containerd(containerd)--&quot;exec&quot;--&gt;containerd-shim-runc(containerd-shim-runc)\n  containerd-shim-runc(containerd-shim-runc)--&quot;exec&quot;--&gt;runc(runc)\n  runc(runc)--&quot;exec&quot;--&gt;containers([containers])</code></pre>\n\n<ul>\n<li>最后将cri已插件的形式集成到containerd中</li>\n</ul>\n<pre><code class=\"highlight mermaid\">flowchart LR\n  kubelet(kubelet)--&quot;grpc&quot;--&gt;cri-plugin(cri-plugin)\n\n  subgraph containerd组件\n  cri-plugin(cri-plugin)--&gt;containerd(containerd)\n  end\n\n  containerd(containerd)--&quot;exec&quot;--&gt;containerd-shim-runc(containerd-shim-runc)\n  containerd-shim-runc(containerd-shim-runc)--&quot;exec&quot;--&gt;runc(runc)\n  runc(runc)--&quot;exec&quot;--&gt;containers([containers])</code></pre>\n\n<h4 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h4><ul>\n<li>全局架构</li>\n</ul>\n<p><img src=\"/../images/containerd-2.png\" alt=\"Alt text\"></p>\n<ul>\n<li>containerd与kubelet</li>\n</ul>\n<p><img src=\"/../images/containerd-1.png\" alt=\"Alt text\"></p>\n<ul>\n<li>内部插件架构</li>\n</ul>\n<p><img src=\"/../images/containerd-3.webp\" alt=\"Alt text\"></p>\n<pre><code class=\"highlight mermaid\">flowchart LR\n  kubectl(kubctl)&lt;--&gt;api-server(api-server)\n\n  subgraph master\n  api-server(api-server)&lt;--&gt;etcd[(etcd)]\n  api-server(api-server)&lt;--&gt;scheduler(scheduler)\n  api-server(api-server)&lt;--&gt;controller-manage(controller-manage)\n  end\n\n  api-server(api-server)&lt;--&gt;kubelet(kubelet)\n  kubelet(kubelet)&lt;--&quot;grpc&quot;--&gt;containerd(containerd)\n\n  subgraph containerd组件\n  containerd(containerd)&lt;--&quot;exec&quot;--&gt;containerd-shim-runc(containerd-shim-runc)\n  containerd-shim-runc(containerd-shim-runc)&lt;--&quot;exec&quot;--&gt;runc(runc)\n  runc(runc)&lt;--&quot;exec&quot;--&gt;containers(containers)\n  end\n\n  api-server(api-server)&lt;--&gt;kube-proxy(kube-proxy)\n  kube-proxy(kube-proxy)&lt;--&gt;ipt(iptables/ipvs)</code></pre>\n\n<h4 id=\"containerd下载安装\"><a href=\"#containerd下载安装\" class=\"headerlink\" title=\"containerd下载安装\"></a>containerd下载安装</h4><ul>\n<li><p>docker官方打包的rpm<a href=\"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/\">地址</a></p>\n</li>\n<li><p>官方仓库下载<a href=\"https://github.com/containerd/containerd/releases\">https://github.com/containerd/containerd/releases</a></p>\n</li>\n<li><p>一般安装docker的时候自动安装</p>\n</li>\n</ul>\n<h4 id=\"ctr使用\"><a href=\"#ctr使用\" class=\"headerlink\" title=\"ctr使用\"></a>ctr使用</h4><blockquote>\n<p>containerd可以使用的客户端有很多比如crictl，nerdctl命令</p>\n</blockquote>\n<ul>\n<li><p>–address value, -a value 指定 containerd’s GRPC server，默认 &#x2F;run&#x2F;containerd&#x2F;containerd.sock</p>\n</li>\n<li><p>查看K8S命名空间下的镜像,-n指定namespace</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctr -n k8s.io images ls</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看所有namespace</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctr ns ls</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载镜像</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctr images pull docker.io/library/alpine:3.18.3</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建 container</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctr c create docker.io/library/alpine:3.18.3 alpine</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctr c ls</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>后台启动</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctr t start -d alpine</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看container</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctr t ls</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看 k8s 中正在运行的容器</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctr -n k8s.io task ls</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打tag</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctr images tag docker.io/library/alpine:3.18.3 &lt;仓库&gt;/alpine:3.18.3</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>push 上传镜像</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctr images push &lt;镜像&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看插件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctr plugin ls</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打印containerd默认配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">containerd config default</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"OCI镜像格式\"><a href=\"#OCI镜像格式\" class=\"headerlink\" title=\"OCI镜像格式\"></a>OCI镜像格式</h4><ul>\n<li>各个类型的关系</li>\n</ul>\n<p>oci镜像格式的<code>mediaType</code>参考<a href=\"https://github.com/opencontainers/image-spec/blob/main/media-types.md\">这里</a></p>\n<p><img src=\"/../images/media-types.png\" alt=\"Alt text\"></p>\n<h5 id=\"类型mediaType\"><a href=\"#类型mediaType\" class=\"headerlink\" title=\"类型mediaType\"></a>类型mediaType</h5><blockquote>\n<p>所有例子基于alpine:3.18.3</p>\n</blockquote>\n<h6 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h6><ul>\n<li>最顶级的类型主要存放各个操作系统和平台对应的manifest类型</li>\n</ul>\n<details>\n\n<summary>例子</summary>\n\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;manifests&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;digest&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sha256:c5c5fda71656f28e49ac9c5416b3643eaa6a108a8093151d6d1afc9463be8e33&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;mediaType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application/vnd.docker.distribution.manifest.v2+json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;platform&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;architecture&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;amd64&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;os&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;linux&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">528</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;digest&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sha256:f748290eb66ad6f938e25dd348acfb3527a422e280b7547b1cdfaf38d4492c4b&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;mediaType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application/vnd.docker.distribution.manifest.v2+json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;platform&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;architecture&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;arm&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;os&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;linux&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variant&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;v6&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">528</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;digest&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sha256:16e86b2388774982fbdf230101a72201691b1f97cb0066c2099abf30dd7e6d59&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;mediaType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application/vnd.docker.distribution.manifest.v2+json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;platform&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;architecture&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;arm&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;os&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;linux&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variant&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;v7&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">528</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;digest&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sha256:b312e4b0e2c665d634602411fcb7c2699ba748c36f59324457bc17de485f36f6&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;mediaType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application/vnd.docker.distribution.manifest.v2+json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;platform&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;architecture&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;arm64&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;os&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;linux&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variant&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;v8&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">528</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;digest&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sha256:1fd62556954250bac80d601a196bb7fd480ceba7c10e94dd8fd4c6d1c08783d5&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;mediaType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application/vnd.docker.distribution.manifest.v2+json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;platform&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;architecture&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;386&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;os&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;linux&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">528</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;digest&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sha256:c75ede79e457d6454bca6fc51967a247a4b9daff9f31197cfbef69b1a651cada&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;mediaType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application/vnd.docker.distribution.manifest.v2+json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;platform&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;architecture&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ppc64le&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;os&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;linux&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">528</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;digest&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sha256:5febc00b4d2a84af2a077bc34ea90659b6570110a54253f19c5dca8164b1dbf6&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;mediaType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application/vnd.docker.distribution.manifest.v2+json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;platform&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;architecture&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;s390x&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;os&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;linux&quot;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">528</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;mediaType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application/vnd.docker.distribution.manifest.list.v2+json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;schemaVersion&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n</details>\n\n<h6 id=\"manifest\"><a href=\"#manifest\" class=\"headerlink\" title=\"manifest\"></a>manifest</h6><ul>\n<li>主要定义镜像相关的清单，主要包含config类型和layers类型</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;schemaVersion&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;mediaType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application/vnd.docker.distribution.manifest.v2+json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;mediaType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application/vnd.docker.container.image.v1+json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1471</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;digest&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sha256:7e01a0d0a1dcd9e539f8e9bbd80106d59efbdf97293b3d38f5d7a34501526cdb&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;layers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;mediaType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3401613</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;digest&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sha256:7264a8db6415046d36d16ba98b79778e18accee6ffa71850405994cffa9be7de&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h6><ul>\n<li>记录镜像的历史，启动参数环境变量以及最重要的解压后的层等信息</li>\n</ul>\n<details>\n\n<summary>例子</summary>\n\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;architecture&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;amd64&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Hostname&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Domainname&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;User&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;AttachStdin&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;AttachStdout&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;AttachStderr&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Tty&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;OpenStdin&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;StdinOnce&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Env&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"string\">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Cmd&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"string\">&quot;/bin/sh&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Image&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sha256:39dfd593e04b939e16d3a426af525cad29b8fc7410b06f4dbad8528b45e1e5a9&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Volumes&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;WorkingDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Entrypoint&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;OnBuild&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Labels&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;container&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ba09fe2c8f99faad95871d467a22c96f4bc8166bd01ce0a7c28dd5472697bfd1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;container_config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Hostname&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ba09fe2c8f99&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Domainname&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;User&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;AttachStdin&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;AttachStdout&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;AttachStderr&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Tty&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;OpenStdin&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;StdinOnce&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Env&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"string\">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Cmd&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"string\">&quot;/bin/sh&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"string\">&quot;-c&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"string\">&quot;#(nop) &quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"string\">&quot;CMD [\\&quot;/bin/sh\\&quot;]&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Image&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;sha256:39dfd593e04b939e16d3a426af525cad29b8fc7410b06f4dbad8528b45e1e5a9&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Volumes&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;WorkingDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Entrypoint&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;OnBuild&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;Labels&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;created&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2023-08-07T19:20:20.894140623Z&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;docker_version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;20.10.23&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;history&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;created&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2023-08-07T19:20:20.71894984Z&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;created_by&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/bin/sh -c #(nop) ADD file:32ff5e7a78b890996ee4681cc0a26185d3e9acdb4eb1e2aaccb2411f922fed6b in / &quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;created&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2023-08-07T19:20:20.894140623Z&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;created_by&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/bin/sh -c #(nop)  CMD [\\&quot;/bin/sh\\&quot;]&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;empty_layer&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;os&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;linux&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;rootfs&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;layers&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;diff_ids&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"string\">&quot;sha256:4693057ce2364720d39e57e85a5b8e0bd9ac3573716237736d6470ec5b7b7230&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n</details>\n\n<h6 id=\"layer\"><a href=\"#layer\" class=\"headerlink\" title=\"layer\"></a>layer</h6><ul>\n<li>记录压缩过后的层sha256信息,是真正层的内容一般采用tar.gz压缩</li>\n</ul>\n<h5 id=\"下载保存oci镜像格式\"><a href=\"#下载保存oci镜像格式\" class=\"headerlink\" title=\"下载保存oci镜像格式\"></a>下载保存oci镜像格式</h5><p>使用skopeo可以和方便的保存到本地，之前介绍过<a href=\"/2022/12/19/%E4%BD%BF%E7%94%A8skopeo%E5%90%8C%E6%AD%A5docker%E9%95%9C%E5%83%8F/\" title=\"使用skopeo同步docker镜像\">使用skopeo同步docker镜像</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">skopeo copy docker://docker.io/alpine:3.18.3 oci:alpine-oci --override-os linux --override-arch amd64</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ tree                                                                   </span><br><span class=\"line\">.</span><br><span class=\"line\">├── blobs</span><br><span class=\"line\">│   └── sha256</span><br><span class=\"line\">│       ├── 7264a8db6415046d36d16ba98b79778e18accee6ffa71850405994cffa9be7de</span><br><span class=\"line\">│       ├── 913cf3a39d377faf89ed388ad913a318a390488c9f34c46e43424795cdabffe8</span><br><span class=\"line\">│       └── cf4e5bc0709f07284518b287f570c47bdb2afc14b8ae4f14077e9ff810a0120b</span><br><span class=\"line\">├── index.json</span><br><span class=\"line\">└── oci-layout</span><br><span class=\"line\"></span><br><span class=\"line\">3 directories, 5 files</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Containerd存储方式\"><a href=\"#Containerd存储方式\" class=\"headerlink\" title=\"Containerd存储方式\"></a>Containerd存储方式</h4><h5 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h5><ul>\n<li><p>其目录命名格式以<code>类型.id</code>的格式</p>\n</li>\n<li><p>有些目录根据插件并没有显示</p>\n</li>\n<li><p>默认数据存放在<code>/var/lib/containerd/</code>中</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tree -L 2</span><br><span class=\"line\">.</span><br><span class=\"line\">├── io.containerd.content.v1.content # 存放从hub上下载的源文件</span><br><span class=\"line\">│   ├── blobs                        # 存放下载完毕的文件</span><br><span class=\"line\">│   └── ingest                       # 存放下载未完成的文件</span><br><span class=\"line\">├── io.containerd.grpc.v1.cri        # cri插件存放的文件</span><br><span class=\"line\">│   ├── containers                   # cri创建的容器</span><br><span class=\"line\">│   └── sandboxes</span><br><span class=\"line\">├── io.containerd.metadata.v1.bolt   # 存放containerd的数据文件</span><br><span class=\"line\">│   └── meta.db           </span><br><span class=\"line\">├── io.containerd.runtime.v1.linux</span><br><span class=\"line\">├── io.containerd.runtime.v2.task    # 运行的容器</span><br><span class=\"line\">│   └── k8s.io                       # namespace</span><br><span class=\"line\">├── io.containerd.snapshotter.v1.native</span><br><span class=\"line\">│   └── snapshots</span><br><span class=\"line\">├── io.containerd.snapshotter.v1.overlayfs # 存放解压过后的文件</span><br><span class=\"line\">│   ├── metadata.db                        # 解压数据库文件</span><br><span class=\"line\">│   └── snapshots                          # 解压的文件</span><br><span class=\"line\">└── tmpmounts                              # 临时挂载目录</span><br><span class=\"line\"></span><br><span class=\"line\">15 directories, 2 files</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://blog.frognew.com/2021/04/relearning-container-01.html\">https://blog.frognew.com/2021/04/relearning-container-01.html</a></p>\n","tags":["k8s","containerd"]},{"title":"containerd源码-content","url":"/2023/11/03/containerd%E6%BA%90%E7%A0%81-content/","content":"<p>content 主要负责存储下载后的原本的层</p>\n<span id=\"more\"></span>\n\n<p>代码版本为v.17.5</p>\n<h5 id=\"content\"><a href=\"#content\" class=\"headerlink\" title=\"content\"></a>content</h5><blockquote>\n<p>content主要负责存储下载的layer接口定义在<code>content/content.go</code>中</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// content/content.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ReaderAt <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  io.ReaderAt</span><br><span class=\"line\">  io.Closer</span><br><span class=\"line\">  Size() <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Provider <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  ReaderAt(ctx context.Context, desc ocispec.Descriptor) (ReaderAt, <span class=\"type\">error</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Ingester <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Writer(ctx context.Context, opts ...WriterOpt) (Writer, <span class=\"type\">error</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Info <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Digest    digest.Digest</span><br><span class=\"line\">  Size      <span class=\"type\">int64</span></span><br><span class=\"line\">  CreatedAt time.Time</span><br><span class=\"line\">  UpdatedAt time.Time</span><br><span class=\"line\">  Labels    <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Status of a content operation</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Status <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Ref       <span class=\"type\">string</span></span><br><span class=\"line\">  Offset    <span class=\"type\">int64</span></span><br><span class=\"line\">  Total     <span class=\"type\">int64</span></span><br><span class=\"line\">  Expected  digest.Digest</span><br><span class=\"line\">  StartedAt time.Time</span><br><span class=\"line\">  UpdatedAt time.Time</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> WalkFunc <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(Info)</span></span> <span class=\"type\">error</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Manager <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Info(ctx context.Context, dgst digest.Digest) (Info, <span class=\"type\">error</span>)</span><br><span class=\"line\">  Update(ctx context.Context, info Info, fieldpaths ...<span class=\"type\">string</span>) (Info, <span class=\"type\">error</span>)</span><br><span class=\"line\">  Walk(ctx context.Context, fn WalkFunc, filters ...<span class=\"type\">string</span>) <span class=\"type\">error</span></span><br><span class=\"line\">  Delete(ctx context.Context, dgst digest.Digest) <span class=\"type\">error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> IngestManager <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Status(ctx context.Context, ref <span class=\"type\">string</span>) (Status, <span class=\"type\">error</span>)</span><br><span class=\"line\">  ListStatuses(ctx context.Context, filters ...<span class=\"type\">string</span>) ([]Status, <span class=\"type\">error</span>)</span><br><span class=\"line\">  Abort(ctx context.Context, ref <span class=\"type\">string</span>) <span class=\"type\">error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Writer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  io.WriteCloser</span><br><span class=\"line\">  Digest() digest.Digest</span><br><span class=\"line\">  Commit(ctx context.Context, size <span class=\"type\">int64</span>, expected digest.Digest, opts ...Opt) <span class=\"type\">error</span></span><br><span class=\"line\">  Status() (Status, <span class=\"type\">error</span>)</span><br><span class=\"line\">  Truncate(size <span class=\"type\">int64</span>) <span class=\"type\">error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Store <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Manager</span><br><span class=\"line\">  Provider</span><br><span class=\"line\">  IngestManager</span><br><span class=\"line\">  Ingester</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"content-grpc类型\"><a href=\"#content-grpc类型\" class=\"headerlink\" title=\"content grpc类型\"></a>content grpc类型</h6><ul>\n<li>grpc类型的content注册在这里,使用统一的注册，申明名字类型以及依赖</li>\n<li>然后从initcontent中获取所有service的插件,然后拿到一个<code>ContentService</code>实例</li>\n<li>使用这个实例调用<code>contentserver.New()</code>,<code>contentserver.New()</code>实现了grpc相关方法</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/content/service.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type: plugin.GRPCPlugin,</span><br><span class=\"line\">    ID:   <span class=\"string\">&quot;content&quot;</span>,</span><br><span class=\"line\">    Requires: []plugin.Type&#123;</span><br><span class=\"line\">      plugin.ServicePlugin,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      plugins, err := ic.GetByType(plugin.ServicePlugin)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      p, ok := plugins[services.ContentService]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.New(<span class=\"string\">&quot;content store service not found&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      cs, err := p.Instance()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> contentserver.New(cs.(content.Store)), <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>service</code>就是抽象了<code>content.Store</code></p>\n</li>\n<li><p><code>New()</code>设置了上层</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/content/contentserver/contentserver.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> service <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  store content.Store</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// New returns the content GRPC server</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">New</span><span class=\"params\">(cs content.Store)</span></span> api.ContentServer &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;service&#123;store: cs&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *service)</span></span> Register(server *grpc.Server) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  api.RegisterContentServer(server, s)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>由于接口很多就不一样介绍了，这里只介绍一个简单的接口</li>\n<li>可以看到grpc请求来的参数传到<code>store.Status()</code>然后再将返回的组装成grpc结果并返回，其他api也是类似这种</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/content/contentserver/contentserver.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *service)</span></span> Status(ctx context.Context, req *api.StatusRequest) (*api.StatusResponse, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  status, err := s.store.Status(ctx, req.Ref)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errdefs.ToGRPCf(err, <span class=\"string\">&quot;could not get status for ref %q&quot;</span>, req.Ref)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> resp api.StatusResponse</span><br><span class=\"line\">  resp.Status = &amp;api.Status&#123;</span><br><span class=\"line\">    StartedAt: status.StartedAt,</span><br><span class=\"line\">    UpdatedAt: status.UpdatedAt,</span><br><span class=\"line\">    Ref:       status.Ref,</span><br><span class=\"line\">    Offset:    status.Offset,</span><br><span class=\"line\">    Total:     status.Total,</span><br><span class=\"line\">    Expected:  status.Expected,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;resp, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"content-service类型\"><a href=\"#content-service类型\" class=\"headerlink\" title=\"content service类型\"></a>content service类型</h6><ul>\n<li>这里他依赖<code>plugin.MetadataPlugin</code>这个类型,然后将获取的meteada传入<code>meatadata.ContentStore()</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/content/store.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type: plugin.ServicePlugin,</span><br><span class=\"line\">    ID:   services.ContentService,</span><br><span class=\"line\">    Requires: []plugin.Type&#123;</span><br><span class=\"line\">      plugin.MetadataPlugin,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      m, err := ic.Get(plugin.MetadataPlugin)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 这里注册 content的svc</span></span><br><span class=\"line\">      s, err := newContentStore(m.(*metadata.DB).ContentStore(), ic.Events)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> s, err</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newContentStore</span><span class=\"params\">(cs content.Store, publisher events.Publisher)</span></span> (content.Store, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;store&#123;</span><br><span class=\"line\">    Store:     cs,</span><br><span class=\"line\">    publisher: publisher,</span><br><span class=\"line\">  &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以看到前面调用的<code>ContentStore()</code>返回的就是初始化,而meteadata创建的注册在<code>services/server/server.go</code>前面介绍启动过程介绍过</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// metadata/db.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewDB creates a new metadata database using the provided</span></span><br><span class=\"line\"><span class=\"comment\">// bolt database, content store, and snapshotters.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewDB</span><span class=\"params\">(db *bolt.DB, cs content.Store, ss <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]snapshots.Snapshotter, opts ...DBOpt)</span></span> *DB &#123;</span><br><span class=\"line\">  m := &amp;DB&#123;</span><br><span class=\"line\">    db:      db,</span><br><span class=\"line\">    ss:      <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]*snapshotter, <span class=\"built_in\">len</span>(ss)),</span><br><span class=\"line\">    dirtySS: <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;,</span><br><span class=\"line\">    dbopts: dbOptions&#123;</span><br><span class=\"line\">      shared: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, opt := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">    opt(&amp;m.dbopts)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize data stores</span></span><br><span class=\"line\">  m.cs = newContentStore(m, m.dbopts.shared, cs)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> name, sn := <span class=\"keyword\">range</span> ss &#123;</span><br><span class=\"line\">    m.ss[name] = newSnapshotter(m, name, sn)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> m</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ContentStore returns a namespaced content store</span></span><br><span class=\"line\"><span class=\"comment\">// proxied to a content store.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *DB)</span></span> ContentStore() content.Store &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> m.cs == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m.cs</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同样实现了content的很多方法,下面得了例子可以看到这里先读取数据库，然后在调用<code>store.Status()</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// metadata/content.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cs *contentStore)</span></span> Status(ctx context.Context, ref <span class=\"type\">string</span>) (content.Status, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  ns, err := namespaces.NamespaceRequired(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> bref <span class=\"type\">string</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := view(ctx, cs.db, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    bref = getRef(tx, ns, ref)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> bref == <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> errors.Wrapf(errdefs.ErrNotFound, <span class=\"string\">&quot;reference %v&quot;</span>, ref)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> content.Status&#123;&#125;, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  st, err := cs.Store.Status(ctx, bref)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> content.Status&#123;&#125;, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  st.Ref = ref</span><br><span class=\"line\">  <span class=\"keyword\">return</span> st, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"content类型\"><a href=\"#content类型\" class=\"headerlink\" title=\"content类型\"></a>content类型</h6><blockquote>\n<p>content有2中实现,一种本地(local),一种prox(远程)</p>\n</blockquote>\n<ul>\n<li><p>local:就是本地实现,目前可以理解为真正实现</p>\n</li>\n<li><p>proxy:则是调用远程的实现，因为content有插件</p>\n</li>\n<li><p>注册则在<code>loadPlugin()</code>中首先会将本地的注册，随后读取配置文件中的<code>proxy_plugin</code>配置在注册proxy类型的，<br>需要注意的是插件在整理之后会返回第一个可能导致你注册的content需要再配置文件中<code>disabled_plugins</code>参数关闭local强制使用proxy类型的</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/server/server.go</span></span><br><span class=\"line\"></span><br><span class=\"line\">  plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type: plugin.ContentPlugin,</span><br><span class=\"line\">    ID:   <span class=\"string\">&quot;content&quot;</span>,</span><br><span class=\"line\">    InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      ic.Meta.Exports[<span class=\"string\">&quot;root&quot;</span>] = ic.Root</span><br><span class=\"line\">      <span class=\"keyword\">return</span> local.NewStore(ic.Root)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  clients := &amp;proxyClients&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> name, pp := <span class=\"keyword\">range</span> config.ProxyPlugins &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> (</span><br><span class=\"line\">      t plugin.Type</span><br><span class=\"line\">      f <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*grpc.ClientConn)</span></span> <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      address = pp.Address</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// nsap逻辑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">string</span>(plugin.ContentPlugin), <span class=\"string\">&quot;content&quot;</span>:</span><br><span class=\"line\">      t = plugin.ContentPlugin</span><br><span class=\"line\">      f = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(conn *grpc.ClientConn)</span></span> <span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> csproxy.NewContentStore(csapi.NewContentClient(conn))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      log.G(ctx).WithField(<span class=\"string\">&quot;type&quot;</span>, pp.Type).Warn(<span class=\"string\">&quot;unknown proxy plugin type&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">      Type: t,</span><br><span class=\"line\">      ID:   name,</span><br><span class=\"line\">      InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">        ic.Meta.Exports[<span class=\"string\">&quot;address&quot;</span>] = address</span><br><span class=\"line\">        conn, err := clients.getClient(address)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(conn), <span class=\"literal\">nil</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>接口实现本质就是读取存储的文件一些信息,然后返回</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// content/local/store.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// status works like stat above except uses the path to the ingest.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *store)</span></span> status(ingestPath <span class=\"type\">string</span>) (content.Status, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  dp := filepath.Join(ingestPath, <span class=\"string\">&quot;data&quot;</span>)</span><br><span class=\"line\">  fi, err := os.Stat(dp)</span><br><span class=\"line\"></span><br><span class=\"line\">  ref, err := readFileString(filepath.Join(ingestPath, <span class=\"string\">&quot;ref&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  startedAt, err := readFileTimestamp(filepath.Join(ingestPath, <span class=\"string\">&quot;startedat&quot;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">  updatedAt, err := readFileTimestamp(filepath.Join(ingestPath, <span class=\"string\">&quot;updatedat&quot;</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// because we don&#x27;t write updatedat on every write, the mod time may</span></span><br><span class=\"line\">  <span class=\"comment\">// actually be more up to date.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> fi.ModTime().After(updatedAt) &#123;</span><br><span class=\"line\">    updatedAt = fi.ModTime()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> content.Status&#123;</span><br><span class=\"line\">    Ref:       ref,</span><br><span class=\"line\">    Offset:    fi.Size(),</span><br><span class=\"line\">    Total:     s.total(ingestPath),</span><br><span class=\"line\">    UpdatedAt: updatedAt,</span><br><span class=\"line\">    StartedAt: startedAt,</span><br><span class=\"line\">  &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":["k8s","containerd"]},{"title":"containerd源码-snapshots","url":"/2023/11/03/containerd%E6%BA%90%E7%A0%81-snapshots/","content":"<p>snapshots主要负责存储解压层之后的存储</p>\n<span id=\"more\"></span>\n\n<p>代码版本为v.17.5</p>\n<blockquote>\n<p>snapshot和content的结构类似,其接口定义如下</p>\n</blockquote>\n<h4 id=\"接口定义\"><a href=\"#接口定义\" class=\"headerlink\" title=\"接口定义\"></a>接口定义</h4><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// snapshots/snapshotter.go</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Snapshotter <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Stat(ctx context.Context, key <span class=\"type\">string</span>) (Info, <span class=\"type\">error</span>)</span><br><span class=\"line\">  Update(ctx context.Context, info Info, fieldpaths ...<span class=\"type\">string</span>) (Info, <span class=\"type\">error</span>)</span><br><span class=\"line\">  Usage(ctx context.Context, key <span class=\"type\">string</span>) (Usage, <span class=\"type\">error</span>)</span><br><span class=\"line\">  Mounts(ctx context.Context, key <span class=\"type\">string</span>) ([]mount.Mount, <span class=\"type\">error</span>) <span class=\"comment\">// 只是返回了mount参数并没有真正的mount</span></span><br><span class=\"line\">  Prepare(ctx context.Context, key, parent <span class=\"type\">string</span>, opts ...Opt) ([]mount.Mount, <span class=\"type\">error</span>) <span class=\"comment\">// 创建snap</span></span><br><span class=\"line\">  View(ctx context.Context, key, parent <span class=\"type\">string</span>, opts ...Opt) ([]mount.Mount, <span class=\"type\">error</span>) <span class=\"comment\">// 和commit一样只不过是只读的</span></span><br><span class=\"line\">  Commit(ctx context.Context, name, key <span class=\"type\">string</span>, opts ...Opt) <span class=\"type\">error</span> <span class=\"comment\">// 提交</span></span><br><span class=\"line\">  Remove(ctx context.Context, key <span class=\"type\">string</span>) <span class=\"type\">error</span> <span class=\"comment\">// 删除</span></span><br><span class=\"line\">  Walk(ctx context.Context, fn WalkFunc, filters ...<span class=\"type\">string</span>) <span class=\"type\">error</span></span><br><span class=\"line\">  Close() <span class=\"type\">error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"snapshot-grpc类型\"><a href=\"#snapshot-grpc类型\" class=\"headerlink\" title=\"snapshot grpc类型\"></a>snapshot grpc类型</h4><ul>\n<li>注册插件，他依赖于service类型,同样实现了Register方法调用了grpc进行api注册服务</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/snapshots/service.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type: plugin.GRPCPlugin,</span><br><span class=\"line\">    ID:   <span class=\"string\">&quot;snapshots&quot;</span>,</span><br><span class=\"line\">    Requires: []plugin.Type&#123;</span><br><span class=\"line\">      plugin.ServicePlugin,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    InitFn: newService,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newService</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  plugins, err := ic.GetByType(plugin.ServicePlugin)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  p, ok := plugins[services.SnapshotsService]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.New(<span class=\"string\">&quot;snapshots service not found&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  i, err := p.Instance()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ss := i.(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]snapshots.Snapshotter)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;service&#123;ss: ss&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *service)</span></span> Register(gs *grpc.Server) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  snapshotsapi.RegisterSnapshotsServer(gs, s)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>snapshot的service有个map,因为snapshotter有很多实现，比如默认的<code>overlayfs</code>还有<code>devmapper</code>等</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> service <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ss <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]snapshots.Snapshotter</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>我们看下其中一个api的实现，主要是处理grpc的请求和响应操作，需要注意的是传入的参数中有<code>Snapshotter</code>id,然后执行对应的snap的api,后面就到了service层处理</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *service)</span></span> Prepare(ctx context.Context, pr *snapshotsapi.PrepareSnapshotRequest) (*snapshotsapi.PrepareSnapshotResponse, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  log.G(ctx).WithField(<span class=\"string\">&quot;parent&quot;</span>, pr.Parent).WithField(<span class=\"string\">&quot;key&quot;</span>, pr.Key).Debugf(<span class=\"string\">&quot;prepare snapshot&quot;</span>)</span><br><span class=\"line\">  sn, err := s.getSnapshotter(pr.Snapshotter)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts []snapshots.Opt</span><br><span class=\"line\">  <span class=\"keyword\">if</span> pr.Labels != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    opts = <span class=\"built_in\">append</span>(opts, snapshots.WithLabels(pr.Labels))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  mounts, err := sn.Prepare(ctx, pr.Key, pr.Parent, opts...)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;snapshotsapi.PrepareSnapshotResponse&#123;</span><br><span class=\"line\">    Mounts: fromMounts(mounts),</span><br><span class=\"line\">  &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"snapshot-service类型\"><a href=\"#snapshot-service类型\" class=\"headerlink\" title=\"snapshot service类型\"></a>snapshot service类型</h4><ul>\n<li>依赖MetadataPlugin类型吗,调用<code>db.Snapshotters()</code>拿到snap,meterdata里通过NewDB()传值</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// services/snapshots/snapshotters.go</span></span><br><span class=\"line\">  plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type: plugin.ServicePlugin,</span><br><span class=\"line\">    ID:   services.SnapshotsService,</span><br><span class=\"line\">    Requires: []plugin.Type&#123;</span><br><span class=\"line\">      plugin.MetadataPlugin,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      m, err := ic.Get(plugin.MetadataPlugin)</span><br><span class=\"line\"></span><br><span class=\"line\">      db := m.(*metadata.DB)</span><br><span class=\"line\">      ss := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]snapshots.Snapshotter)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> n, sn := <span class=\"keyword\">range</span> db.Snapshotters() &#123;</span><br><span class=\"line\">        ss[n] = newSnapshotter(sn, ic.Events)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ss, <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>实际调用了metedata的<code>Prepare()</code>,这里进行了大量的数据库操作</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *snapshotter)</span></span> Prepare(ctx context.Context, key, parent <span class=\"type\">string</span>, opts ...snapshots.Opt) ([]mount.Mount, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  mounts, err := s.Snapshotter.Prepare(ctx, key, parent, opts...)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := s.publisher.Publish(ctx, <span class=\"string\">&quot;/snapshot/prepare&quot;</span>, &amp;eventstypes.SnapshotPrepare&#123;</span><br><span class=\"line\">    Key:    key,</span><br><span class=\"line\">    Parent: parent,</span><br><span class=\"line\">  &#125;); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mounts, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这可以可以看到prepare和view实现都是一样的只不过view是只读的</li>\n<li>源码很长这里不放了,其主要在数据存记录snap相关信息</li>\n<li>随后调用真正的snap实现</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// containerd/metadata/snapshot.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *snapshotter)</span></span> Prepare(ctx context.Context, key, parent <span class=\"type\">string</span>, opts ...snapshots.Opt) ([]mount.Mount, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.createSnapshot(ctx, key, parent, <span class=\"literal\">false</span>, opts)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *snapshotter)</span></span> View(ctx context.Context, key, parent <span class=\"type\">string</span>, opts ...snapshots.Opt) ([]mount.Mount, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.createSnapshot(ctx, key, parent, <span class=\"literal\">true</span>, opts)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *snapshotter)</span></span> createSnapshot(ctx context.Context, key, parent <span class=\"type\">string</span>, readonly <span class=\"type\">bool</span>, opts []snapshots.Opt) ([]mount.Mount, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 校验参数以及复制等代码略过</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> readonly &#123;</span><br><span class=\"line\">    m, err = s.Snapshotter.View(ctx, bkey, bparent, bopts...)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    m, err = s.Snapshotter.Prepare(ctx, bkey, bparent, bopts...)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"snapshot类型\"><a href=\"#snapshot类型\" class=\"headerlink\" title=\"snapshot类型\"></a>snapshot类型</h4><ul>\n<li>直接返回了<code>overlay.NewSnapshotter()</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// snapshots/overlay/plugin/plugin.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type:   plugin.SnapshotPlugin,</span><br><span class=\"line\">    ID:     <span class=\"string\">&quot;overlayfs&quot;</span>,</span><br><span class=\"line\">    Config: &amp;Config&#123;&#125;,</span><br><span class=\"line\">    InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      ic.Meta.Platforms = <span class=\"built_in\">append</span>(ic.Meta.Platforms, platforms.DefaultSpec())</span><br><span class=\"line\">      config, ok := ic.Config.(*Config)</span><br><span class=\"line\"></span><br><span class=\"line\">      root := ic.Root</span><br><span class=\"line\">      <span class=\"keyword\">if</span> config.RootPath != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">        root = config.RootPath</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      ic.Meta.Exports[<span class=\"string\">&quot;root&quot;</span>] = root</span><br><span class=\"line\">      <span class=\"keyword\">return</span> overlay.NewSnapshotter(root, overlay.AsynchronousRemove)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>New函数中依然执行opt相关的操作,然后创建了目录随后创建数据库文件到这个目录中，注意这个数据库不metedata的数据库而是snap自己的数据库</li>\n<li>读取了一些overlay相关参数</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// snapshots/overlay/overlay.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewSnapshotter</span><span class=\"params\">(root <span class=\"type\">string</span>, opts ...Opt)</span></span> (snapshots.Snapshotter, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> config SnapshotterConfig</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, opt := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := opt(&amp;config); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := os.MkdirAll(root, <span class=\"number\">0700</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  ms, err := storage.NewMetaStore(filepath.Join(root, <span class=\"string\">&quot;metadata.db&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := os.Mkdir(filepath.Join(root, <span class=\"string\">&quot;snapshots&quot;</span>), <span class=\"number\">0700</span>); err != <span class=\"literal\">nil</span> &amp;&amp; !os.IsExist(err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// figure out whether &quot;userxattr&quot; option is recognized by the kernel &amp;&amp; needed</span></span><br><span class=\"line\">  userxattr, err := overlayutils.NeedsUserXAttr(root)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    logrus.WithError(err).Warnf(<span class=\"string\">&quot;cannot detect whether \\&quot;userxattr\\&quot; option needs to be used, assuming to be %v&quot;</span>, userxattr)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;snapshotter&#123;</span><br><span class=\"line\">    root:        root,</span><br><span class=\"line\">    ms:          ms,</span><br><span class=\"line\">    asyncRemove: config.asyncRemove,</span><br><span class=\"line\">    indexOff:    indexOff,</span><br><span class=\"line\">    userxattr:   userxattr,</span><br><span class=\"line\">  &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>和前面调用的PrePare结构很相似,也只是传递的是否只读不一样</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o *snapshotter)</span></span> Prepare(ctx context.Context, key, parent <span class=\"type\">string</span>, opts ...snapshots.Opt) ([]mount.Mount, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> o.createSnapshot(ctx, snapshots.KindActive, key, parent, opts)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o *snapshotter)</span></span> View(ctx context.Context, key, parent <span class=\"type\">string</span>, opts ...snapshots.Opt) ([]mount.Mount, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> o.createSnapshot(ctx, snapshots.KindView, key, parent, opts)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先创建一个临时目录然后数据中创建snap记录,如果有parent则修改guid,然后修改名字为正式的snap目录</li>\n<li>最后通过mount函数返回</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// snapshots/overlay/overlay.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o *snapshotter)</span></span> createSnapshot(ctx context.Context, kind snapshots.Kind, key, parent <span class=\"type\">string</span>, opts []snapshots.Opt) (_ []mount.Mount, err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := o.ms.WithTransaction(ctx, <span class=\"literal\">true</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context)</span></span> (err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    td, err = o.prepareDirectory(ctx, snapshotDir, kind)</span><br><span class=\"line\"></span><br><span class=\"line\">    s, err = storage.CreateSnapshot(ctx, kind, key, parent, opts...)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s.ParentIDs) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      st, err := os.Stat(o.upperPath(s.ParentIDs[<span class=\"number\">0</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">      stat := st.Sys().(*syscall.Stat_t)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := os.Lchown(filepath.Join(td, <span class=\"string\">&quot;fs&quot;</span>), <span class=\"type\">int</span>(stat.Uid), <span class=\"type\">int</span>(stat.Gid)); err != <span class=\"literal\">nil</span> &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    path = filepath.Join(snapshotDir, s.ID)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err = os.Rename(td, path); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">&quot;failed to rename: %w&quot;</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    td = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> o.mounts(s), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mount函数根据snapshotter的ParentIDs来判断是否返回读写的bind类型挂载</li>\n<li>通过判断是否是active来返回只读的bind类型挂载</li>\n<li>最后通过ParentIDs组合overlay的参数</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// snapshots/overlay/overlay.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(o *snapshotter)</span></span> mounts(s storage.Snapshot) []mount.Mount &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s.ParentIDs) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// if we only have one layer/no parents then just return a bind mount as overlay</span></span><br><span class=\"line\">    <span class=\"comment\">// will not work</span></span><br><span class=\"line\">    roFlag := <span class=\"string\">&quot;rw&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> s.Kind == snapshots.KindView &#123;</span><br><span class=\"line\">      roFlag = <span class=\"string\">&quot;ro&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> []mount.Mount&#123;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        Source: o.upperPath(s.ID),</span><br><span class=\"line\">        Type:   <span class=\"string\">&quot;bind&quot;</span>,</span><br><span class=\"line\">        Options: []<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">          roFlag,</span><br><span class=\"line\">          <span class=\"string\">&quot;rbind&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  options := o.options</span><br><span class=\"line\">  <span class=\"keyword\">if</span> s.Kind == snapshots.KindActive &#123;</span><br><span class=\"line\">    options = <span class=\"built_in\">append</span>(options,</span><br><span class=\"line\">      fmt.Sprintf(<span class=\"string\">&quot;workdir=%s&quot;</span>, o.workPath(s.ID)),</span><br><span class=\"line\">      fmt.Sprintf(<span class=\"string\">&quot;upperdir=%s&quot;</span>, o.upperPath(s.ID)),</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s.ParentIDs) == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []mount.Mount&#123;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        Source: o.upperPath(s.ParentIDs[<span class=\"number\">0</span>]),</span><br><span class=\"line\">        Type:   <span class=\"string\">&quot;bind&quot;</span>,</span><br><span class=\"line\">        Options: []<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;ro&quot;</span>,</span><br><span class=\"line\">          <span class=\"string\">&quot;rbind&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  parentPaths := <span class=\"built_in\">make</span>([]<span class=\"type\">string</span>, <span class=\"built_in\">len</span>(s.ParentIDs))</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> s.ParentIDs &#123;</span><br><span class=\"line\">    parentPaths[i] = o.upperPath(s.ParentIDs[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  options = <span class=\"built_in\">append</span>(options, fmt.Sprintf(<span class=\"string\">&quot;lowerdir=%s&quot;</span>, strings.Join(parentPaths, <span class=\"string\">&quot;:&quot;</span>)))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> []mount.Mount&#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      Type:    <span class=\"string\">&quot;overlay&quot;</span>,</span><br><span class=\"line\">      Source:  <span class=\"string\">&quot;overlay&quot;</span>,</span><br><span class=\"line\">      Options: options,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"bind-mount\"><a href=\"#bind-mount\" class=\"headerlink\" title=\"bind mount\"></a>bind mount</h4><ul>\n<li>bind的mount类型是linux内核实现的一种挂载他和链接(<code>link</code>)实现的功能很像,但是他实现更底层在vfs之下</li>\n<li>参数rbind表示目录下的目录递归挂载到而不是这是这个一个,</li>\n<li>ro则表示只读</li>\n</ul>\n<p><img src=\"/../images/containerd-6.png\" alt=\"Alt text\"></p>\n<ul>\n<li>bind相当于修改了文件的inode到挂载的目录上</li>\n</ul>\n<p><img src=\"/../images/containerd-7.png\" alt=\"Alt text\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir test1 test2</span><br><span class=\"line\">ls -li</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">总用量 0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">34260425 drwxr-xr-x 2 root root 6 10月 31 17:32 test1</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">50339286 drwxr-xr-x 2 root root 6 10月 31 17:32 test2</span></span><br><span class=\"line\"></span><br><span class=\"line\">mount --bind ./test1 ./test2/</span><br><span class=\"line\"></span><br><span class=\"line\">ll -ti</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">总用量 0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">34260425 drwxr-xr-x 2 root root 6 10月 31 17:32 test1</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">34260425 drwxr-xr-x 2 root root 6 10月 31 17:32 test2</span></span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;foo&quot;&gt; ./test1/test</span><br><span class=\"line\">cat ./test2/test</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">foo</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示的挂载是vda1而是test1</span></span><br><span class=\"line\">mount -l |grep test</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/dev/vda1 on /data/test/test2 <span class=\"built_in\">type</span> xfs (rw,relatime,attr2,inode64,noquota)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://blog.csdn.net/weixin_40864891/article/details/107330218\">https://blog.csdn.net/weixin_40864891/article/details/107330218</a></p>\n","tags":["k8s","containerd"]},{"title":"docker部署frp内网穿透","url":"/2023/11/27/docker%E9%83%A8%E7%BD%B2frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/","content":"<p><a href=\"https://github.com/fatedier/frp\">frp</a>是一个国人开发的内网穿透工具</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/../images/frp-1.png\" alt=\"Alt text\"></p>\n<ul>\n<li>frp是cs架构，访问frps(服务端)就可以访问部署在内网的frpc(客户端)</li>\n</ul>\n<h4 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.8&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">frps:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">snowdreamtech/frps</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">frps</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;host&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/etc/frp/:/etc/frp/</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight toml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># frps.toml</span></span><br><span class=\"line\"><span class=\"attr\">bindPort</span> = <span class=\"number\">7000</span></span><br><span class=\"line\"><span class=\"attr\">auth.token</span> = <span class=\"string\">&quot;&lt;密码&gt;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 报表</span></span><br><span class=\"line\"><span class=\"attr\">webServer.addr</span>= <span class=\"string\">&quot;0.0.0.0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">webServer.port</span> = <span class=\"number\">7500</span></span><br><span class=\"line\"><span class=\"attr\">webServer.user</span> = <span class=\"string\">&quot;admin&quot;</span></span><br><span class=\"line\"><span class=\"attr\">webServer.password</span> = <span class=\"string\">&quot;&lt;密码&gt;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动之后可以通过7500端口访问报表</li>\n</ul>\n<h5 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h5><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.8&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">frpc:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">snowdreamtech/frpc:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">frpc</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">&quot;host&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/data/frp/:/etc/frp/</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight toml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">serverAddr</span> = <span class=\"string\">&quot;&lt;服务器地址&gt;&quot;</span></span><br><span class=\"line\"><span class=\"attr\">serverPort</span> = <span class=\"number\">7000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">auth.token</span> = <span class=\"string\">&quot;&lt;服务端认证token&gt;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">webServer.port</span> = <span class=\"number\">7400</span></span><br><span class=\"line\"><span class=\"attr\">webServer.user</span> = <span class=\"string\">&quot;admin&quot;</span></span><br><span class=\"line\"><span class=\"attr\">webServer.password</span> = <span class=\"string\">&quot;&lt;密码&gt;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[[proxies]]</span></span><br><span class=\"line\"><span class=\"attr\">name</span> = <span class=\"string\">&quot;ssh&quot;</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = <span class=\"string\">&quot;tcp&quot;</span></span><br><span class=\"line\"><span class=\"attr\">localIP</span> = <span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\"><span class=\"attr\">localPort</span> = <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"attr\">remotePort</span> = <span class=\"number\">6000</span> <span class=\"comment\"># 服务端远程访问的端口</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://gofrp.org/zh-cn/docs/\">https://gofrp.org/zh-cn/docs/</a></p>\n","tags":["网络"]},{"title":"containerd源码-启动过程插件注册","url":"/2023/10/27/containerd%E6%BA%90%E7%A0%81-%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E6%8F%92%E4%BB%B6%E6%B3%A8%E5%86%8C/","content":"<p>前面介绍了containerd的存储以及oci等,现在将从源码开蓝启动过程和插件的注册</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>代码版本为v.17.5</p>\n</blockquote>\n<h4 id=\"启动过程\"><a href=\"#启动过程\" class=\"headerlink\" title=\"启动过程\"></a>启动过程</h4><ul>\n<li>入口在&#x2F;cmd&#x2F;containerd&#x2F;main.go,这里申明了一个app并执行了run方法</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  app := command.App()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := app.Run(os.Args); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Fprintf(os.Stderr, <span class=\"string\">&quot;containerd: %s\\n&quot;</span>, err)</span><br><span class=\"line\">    os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在App函数中主要处理命令行参数以及启动grpc等服务器</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cmd/containerd/main.go</span></span><br><span class=\"line\">...</span><br><span class=\"line\">  log.G(ctx).WithFields(logrus.Fields&#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;version&quot;</span>:  version.Version,</span><br><span class=\"line\">      <span class=\"string\">&quot;revision&quot;</span>: version.Revision,</span><br><span class=\"line\">  &#125;).Info(<span class=\"string\">&quot;starting containerd&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  server, err := server.New(ctx, config)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Launch as a Windows Service if necessary</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := launchService(server, done); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    logrus.Fatal(err)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>然后就是主要的启动流程了，创建了server这个对象</p>\n</li>\n<li><p>加载插件，加载了配种的procesor插件以及主要的插件</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/server/server.go</span></span><br><span class=\"line\">plugins, err := LoadPlugins(ctx, config)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> id, p := <span class=\"keyword\">range</span> config.StreamProcessors &#123;</span><br><span class=\"line\">  diff.RegisterProcessor(diff.BinaryHandler(id, p.Returns, p.Accepts, p.Path, p.Args, p.Env)) <span class=\"comment\">// 注册 processor</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进去LoadPlugins函数,这里主要加载几个重要的创建，首先注册了<code>content</code>类型的插件，id是<code>content</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/server/server.go</span></span><br><span class=\"line\">plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">  Type: plugin.ContentPlugin,</span><br><span class=\"line\">  ID:   <span class=\"string\">&quot;content&quot;</span>,</span><br><span class=\"line\">  InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    ic.Meta.Exports[<span class=\"string\">&quot;root&quot;</span>] = ic.Root</span><br><span class=\"line\">    <span class=\"keyword\">return</span> local.NewStore(ic.Root)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后注册了bolt插件，bolt主要负责bolt数据库相关的,初始化第一步获取一个content类型的插件，然后将之前的注册的sn全部放到snapshotters中,<br>随后根据配置文件创建了一个bolt.Open函数创建一个bolt，传入bolt和snapshotters创建出metadata,metadata主要存储元数据底层是boltDB</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/server/server.go</span></span><br><span class=\"line\">plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type: plugin.MetadataPlugin,</span><br><span class=\"line\">    ID:   <span class=\"string\">&quot;bolt&quot;</span>,</span><br><span class=\"line\">    Requires: []plugin.Type&#123;</span><br><span class=\"line\">        plugin.ContentPlugin,</span><br><span class=\"line\">        plugin.SnapshotPlugin,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Config: &amp;srvconfig.BoltConfig&#123;</span><br><span class=\"line\">      ContentSharingPolicy: srvconfig.SharingPolicyShared,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 返回所有content插件中第一个</span></span><br><span class=\"line\">      cs, err := ic.Get(plugin.ContentPlugin)</span><br><span class=\"line\"></span><br><span class=\"line\">      snapshottersRaw, err := ic.GetByType(plugin.SnapshotPlugin)</span><br><span class=\"line\"></span><br><span class=\"line\">      snapshotters := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]snapshots.Snapshotter)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> name, sn := <span class=\"keyword\">range</span> snapshottersRaw &#123;</span><br><span class=\"line\">      sn, err := sn.Instance()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> !plugin.IsSkipPlugin(err) &#123;</span><br><span class=\"line\">          log.G(ic.Context).WithError(err).</span><br><span class=\"line\">          Warnf(<span class=\"string\">&quot;could not use snapshotter %v in metadata plugin&quot;</span>, name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">        snapshotters[name] = sn.(snapshots.Snapshotter)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      shared := <span class=\"literal\">true</span></span><br><span class=\"line\">      ic.Meta.Exports[<span class=\"string\">&quot;policy&quot;</span>] = srvconfig.SharingPolicyShared</span><br><span class=\"line\">      <span class=\"keyword\">if</span> cfg, ok := ic.Config.(*srvconfig.BoltConfig); ok &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> cfg.ContentSharingPolicy != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> err := cfg.Validate(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> cfg.ContentSharingPolicy == srvconfig.SharingPolicyIsolated &#123;</span><br><span class=\"line\">            ic.Meta.Exports[<span class=\"string\">&quot;policy&quot;</span>] = srvconfig.SharingPolicyIsolated</span><br><span class=\"line\">            shared = <span class=\"literal\">false</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          log.L.WithField(<span class=\"string\">&quot;policy&quot;</span>, cfg.ContentSharingPolicy).Info(<span class=\"string\">&quot;metadata content store policy set&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      path := filepath.Join(ic.Root, <span class=\"string\">&quot;meta.db&quot;</span>)</span><br><span class=\"line\">      ic.Meta.Exports[<span class=\"string\">&quot;path&quot;</span>] = path</span><br><span class=\"line\">      <span class=\"comment\">// 创建bolt数据库</span></span><br><span class=\"line\">      db, err := bolt.Open(path, <span class=\"number\">0644</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> dbopts []metadata.DBOpt</span><br><span class=\"line\">      <span class=\"keyword\">if</span> !shared &#123;</span><br><span class=\"line\">        dbopts = <span class=\"built_in\">append</span>(dbopts, metadata.WithPolicyIsolated)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 初始化metadata 插件</span></span><br><span class=\"line\">      mdb := metadata.NewDB(db, cs.(content.Store), snapshotters, dbopts...)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := mdb.Init(ic.Context); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mdb, <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">... </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>最后读取了配置文件中插件的配置然后初始化插件,先判断插件类型，然后根据不同类型注册插件</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/server/server.go</span></span><br><span class=\"line\"></span><br><span class=\"line\">clients := &amp;proxyClients&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> name, pp := <span class=\"keyword\">range</span> config.ProxyPlugins &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> (</span><br><span class=\"line\">      t plugin.Type</span><br><span class=\"line\">      f <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*grpc.ClientConn)</span></span> <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">      address = pp.Address</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> pp.Type &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">string</span>(plugin.SnapshotPlugin), <span class=\"string\">&quot;snapshot&quot;</span>:</span><br><span class=\"line\">        t = plugin.SnapshotPlugin</span><br><span class=\"line\">        ssname := name</span><br><span class=\"line\">        f = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(conn *grpc.ClientConn)</span></span> <span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ssproxy.NewSnapshotter(ssapi.NewSnapshotsClient(conn), ssname)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">string</span>(plugin.ContentPlugin), <span class=\"string\">&quot;content&quot;</span>:</span><br><span class=\"line\">        t = plugin.ContentPlugin</span><br><span class=\"line\">        f = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(conn *grpc.ClientConn)</span></span> <span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> csproxy.NewContentStore(csapi.NewContentClient(conn))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      log.G(ctx).WithField(<span class=\"string\">&quot;type&quot;</span>, pp.Type).Warn(<span class=\"string\">&quot;unknown proxy plugin type&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">      Type: t,</span><br><span class=\"line\">      ID:   name,</span><br><span class=\"line\">      InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">        ic.Meta.Exports[<span class=\"string\">&quot;address&quot;</span>] = address</span><br><span class=\"line\">        conn, err := clients.getClient(address)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f(conn), <span class=\"literal\">nil</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>最后根据插件的依赖以及类型排序以及根据配置文件过滤关闭的插件</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/server/server.go</span></span><br><span class=\"line\">filter := srvconfig.V2DisabledFilter</span><br><span class=\"line\"><span class=\"keyword\">if</span> config.GetVersion() == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">  filter = srvconfig.V1DisabledFilter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// return the ordered graph for plugins</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> plugin.Graph(filter(config.DisabledPlugins)), <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>回到server.go的<code>New</code>函数继续往下看，接下来就是初始化grpc，tcp已经ttrp服务器的初始化，然后构造<code>Server</code>结构体,同事根据配置文件获取到需要的开启的插件存取<code>required</code>中</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/server/server.go</span></span><br><span class=\"line\">serverOpts := []grpc.ServerOption&#123;</span><br><span class=\"line\">    grpc.UnaryInterceptor(grpc_prometheus.UnaryServerInterceptor),</span><br><span class=\"line\">    grpc.StreamInterceptor(grpc_prometheus.StreamServerInterceptor),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> config.GRPC.MaxRecvMsgSize &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    serverOpts = <span class=\"built_in\">append</span>(serverOpts, grpc.MaxRecvMsgSize(config.GRPC.MaxRecvMsgSize))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> config.GRPC.MaxSendMsgSize &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    serverOpts = <span class=\"built_in\">append</span>(serverOpts, grpc.MaxSendMsgSize(config.GRPC.MaxSendMsgSize))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ttrpcServer, err := newTTRPCServer()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  tcpServerOpts := serverOpts</span><br><span class=\"line\">  <span class=\"keyword\">if</span> config.GRPC.TCPTLSCert != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">    log.G(ctx).Info(<span class=\"string\">&quot;setting up tls on tcp GRPC services...&quot;</span>)</span><br><span class=\"line\">    creds, err := credentials.NewServerTLSFromFile(config.GRPC.TCPTLSCert, config.GRPC.TCPTLSKey)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tcpServerOpts = <span class=\"built_in\">append</span>(tcpServerOpts, grpc.Creds(creds))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    grpcServer = grpc.NewServer(serverOpts...)</span><br><span class=\"line\">    tcpServer  = grpc.NewServer(tcpServerOpts...)</span><br><span class=\"line\"></span><br><span class=\"line\">    grpcServices  []plugin.Service</span><br><span class=\"line\">    tcpServices   []plugin.TCPService</span><br><span class=\"line\">    ttrpcServices []plugin.TTRPCService</span><br><span class=\"line\"></span><br><span class=\"line\">    s = &amp;Server&#123;</span><br><span class=\"line\">      grpcServer:  grpcServer,</span><br><span class=\"line\">      tcpServer:   tcpServer,</span><br><span class=\"line\">      ttrpcServer: ttrpcServer,</span><br><span class=\"line\">      events:      exchange.NewExchange(),</span><br><span class=\"line\">      config:      config,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    initialized = plugin.NewPluginSet()</span><br><span class=\"line\">    required    = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, r := <span class=\"keyword\">range</span> config.RequiredPlugins &#123;</span><br><span class=\"line\">    required[r] = <span class=\"keyword\">struct</span>&#123;&#125;&#123;&#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>接着根据上面<code>LoadPlugins</code>获取的插件开始遍历然后初始化</li>\n<li>plugin.NewContext构造初始化需要的参数</li>\n<li>p.Init执行注册插件时候的初始化内容</li>\n<li>initialized.Add将初始化过的插件加入到已经初始化的结构体中，为后面的插件掉用</li>\n<li>result.Instance()获取一个插件实例然后查看是否有grpc等方法实现，有则放到到grpc等服务中</li>\n<li>同时将required中初始化了的插件删除</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> _, p := <span class=\"keyword\">range</span> plugins &#123;</span><br><span class=\"line\">  id := p.URI()</span><br><span class=\"line\">  reqID := id</span><br><span class=\"line\">  <span class=\"keyword\">if</span> config.GetVersion() == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">    reqID = p.ID</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log.G(ctx).WithField(<span class=\"string\">&quot;type&quot;</span>, p.Type).Infof(<span class=\"string\">&quot;loading plugin %q...&quot;</span>, id)</span><br><span class=\"line\"></span><br><span class=\"line\">  initContext := plugin.NewContext(</span><br><span class=\"line\">    ctx,</span><br><span class=\"line\">    p,</span><br><span class=\"line\">    initialized,</span><br><span class=\"line\">    config.Root,</span><br><span class=\"line\">    config.State,</span><br><span class=\"line\">  )</span><br><span class=\"line\">  initContext.Events = s.events</span><br><span class=\"line\">  initContext.Address = config.GRPC.Address</span><br><span class=\"line\">  initContext.TTRPCAddress = config.TTRPC.Address</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// load the plugin specific configuration if it is provided</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> p.Config != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    pc, err := config.Decode(p)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    initContext.Config = pc</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 执行初始化</span></span><br><span class=\"line\">  result := p.Init(initContext)</span><br><span class=\"line\">  <span class=\"comment\">// 将已经初始化的插件加入到initialized中，因为后面的插件可能依赖前面的插件</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := initialized.Add(result); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Wrapf(err, <span class=\"string\">&quot;could not add plugin result to plugin set&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  instance, err := result.Instance()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> plugin.IsSkipPlugin(err) &#123;</span><br><span class=\"line\">      log.G(ctx).WithError(err).WithField(<span class=\"string\">&quot;type&quot;</span>, p.Type).Infof(<span class=\"string\">&quot;skip loading plugin %q...&quot;</span>, id)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      log.G(ctx).WithError(err).Warnf(<span class=\"string\">&quot;failed to load plugin %s&quot;</span>, id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> _, ok := required[reqID]; ok &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Wrapf(err, <span class=\"string\">&quot;load required plugin %s&quot;</span>, id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">delete</span>(required, reqID)</span><br><span class=\"line\">  <span class=\"comment\">// check for grpc services that should be registered with the server</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> src, ok := instance.(plugin.Service); ok &#123;</span><br><span class=\"line\">    grpcServices = <span class=\"built_in\">append</span>(grpcServices, src)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> src, ok := instance.(plugin.TTRPCService); ok &#123;</span><br><span class=\"line\">    ttrpcServices = <span class=\"built_in\">append</span>(ttrpcServices, src)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> service, ok := instance.(plugin.TCPService); ok &#123;</span><br><span class=\"line\">    tcpServices = <span class=\"built_in\">append</span>(tcpServices, service)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  s.plugins = <span class=\"built_in\">append</span>(s.plugins, result)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完成插件初始化后首先判断required是否还有，确认已经需要加载的已经加载</li>\n<li>依次将初始化插件的相关service注册到对应的服务器中,然后返回server</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(required) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> missing []<span class=\"type\">string</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> id := <span class=\"keyword\">range</span> required &#123;</span><br><span class=\"line\">      missing = <span class=\"built_in\">append</span>(missing, id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Errorf(<span class=\"string\">&quot;required plugin %s not included&quot;</span>, missing)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// register services after all plugins have been initialized</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, service := <span class=\"keyword\">range</span> grpcServices &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := service.Register(grpcServer); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, service := <span class=\"keyword\">range</span> ttrpcServices &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := service.RegisterTTRPC(ttrpcServer); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, service := <span class=\"keyword\">range</span> tcpServices &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := service.RegisterTCP(tcpServer); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s, <span class=\"literal\">nil</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>至此containerd启动完成</li>\n</ul>\n<h4 id=\"插件注册\"><a href=\"#插件注册\" class=\"headerlink\" title=\"插件注册\"></a>插件注册</h4><ul>\n<li>利用go的import将所有模块的init函数执行</li>\n<li>在路径在<code>cmd/containerd</code>中builtins开头的文件皆是如此</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cmd/containerd/builtins_linux.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  _ <span class=\"string\">&quot;github.com/containerd/containerd/metrics/cgroups&quot;</span></span><br><span class=\"line\">  _ <span class=\"string\">&quot;github.com/containerd/containerd/metrics/cgroups/v2&quot;</span></span><br><span class=\"line\">  _ <span class=\"string\">&quot;github.com/containerd/containerd/runtime/v1/linux&quot;</span></span><br><span class=\"line\">  _ <span class=\"string\">&quot;github.com/containerd/containerd/runtime/v2&quot;</span></span><br><span class=\"line\">  _ <span class=\"string\">&quot;github.com/containerd/containerd/runtime/v2/runc/options&quot;</span></span><br><span class=\"line\">  _ <span class=\"string\">&quot;github.com/containerd/containerd/snapshots/native/plugin&quot;</span></span><br><span class=\"line\">  _ <span class=\"string\">&quot;github.com/containerd/containerd/snapshots/overlay/plugin&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>比如说overlayfs,需要填充类型，ID配置然后是初始化动作并返回,service类型的插他依赖metadata类型的插件</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /containerd/services/snapshots/snapshotters.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type: plugin.ServicePlugin,</span><br><span class=\"line\">    ID:   services.SnapshotsService,</span><br><span class=\"line\">    Requires: []plugin.Type&#123;</span><br><span class=\"line\">      plugin.MetadataPlugin,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      m, err := ic.Get(plugin.MetadataPlugin)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      db := m.(*metadata.DB)</span><br><span class=\"line\">      ss := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]snapshots.Snapshotter)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> n, sn := <span class=\"keyword\">range</span> db.Snapshotters() &#123;</span><br><span class=\"line\">        ss[n] = newSnapshotter(sn, ic.Events)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> ss, <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"插件类型\"><a href=\"#插件类型\" class=\"headerlink\" title=\"插件类型\"></a>插件类型</h4><ul>\n<li>每一层都有负责的事情</li>\n<li>grpc负责处理grpc协议请求</li>\n<li>svc主要记录到数据中</li>\n<li>最后是真正干活的</li>\n</ul>\n<p><img src=\"/../images/containerd-4.png\" alt=\"Alt text\"></p>\n<h4 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h4><ul>\n<li>插件相关的代码在<code>/plugin/</code>中</li>\n</ul>\n<h5 id=\"plugin-go\"><a href=\"#plugin-go\" class=\"headerlink\" title=\"plugin.go\"></a>plugin.go</h5><ul>\n<li>其中plugin.go主要负责插件注册,以及定义插件类型</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Registration <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Type of the plugin</span></span><br><span class=\"line\">  Type Type</span><br><span class=\"line\">  <span class=\"comment\">// ID of the plugin</span></span><br><span class=\"line\">  ID <span class=\"type\">string</span></span><br><span class=\"line\">  <span class=\"comment\">// Config specific to the plugin</span></span><br><span class=\"line\">  Config <span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// Requires is a list of plugins that the registered plugin requires to be available</span></span><br><span class=\"line\">  Requires []Type</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// InitFn is called when initializing a plugin. The registration and</span></span><br><span class=\"line\">  <span class=\"comment\">// context are passed in. The init function may modify the registration to</span></span><br><span class=\"line\">  <span class=\"comment\">// add exports, capabilities and platform support declarations.</span></span><br><span class=\"line\">  InitFn <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>)</span><br><span class=\"line\">  <span class=\"comment\">// Disable the plugin from loading</span></span><br><span class=\"line\">  Disable <span class=\"type\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  <span class=\"comment\">// InternalPlugin implements an internal plugin to containerd</span></span><br><span class=\"line\">  InternalPlugin Type = <span class=\"string\">&quot;io.containerd.internal.v1&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// RuntimePlugin implements a runtime</span></span><br><span class=\"line\">  RuntimePlugin Type = <span class=\"string\">&quot;io.containerd.runtime.v1&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// RuntimePluginV2 implements a runtime v2</span></span><br><span class=\"line\">  RuntimePluginV2 Type = <span class=\"string\">&quot;io.containerd.runtime.v2&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// ServicePlugin implements a internal service</span></span><br><span class=\"line\">  ServicePlugin Type = <span class=\"string\">&quot;io.containerd.service.v1&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// GRPCPlugin implements a grpc service</span></span><br><span class=\"line\">  GRPCPlugin Type = <span class=\"string\">&quot;io.containerd.grpc.v1&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// SnapshotPlugin implements a snapshotter</span></span><br><span class=\"line\">  SnapshotPlugin Type = <span class=\"string\">&quot;io.containerd.snapshotter.v1&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// TaskMonitorPlugin implements a task monitor</span></span><br><span class=\"line\">  TaskMonitorPlugin Type = <span class=\"string\">&quot;io.containerd.monitor.v1&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// DiffPlugin implements a differ</span></span><br><span class=\"line\">  DiffPlugin Type = <span class=\"string\">&quot;io.containerd.differ.v1&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// MetadataPlugin implements a metadata store</span></span><br><span class=\"line\">  MetadataPlugin Type = <span class=\"string\">&quot;io.containerd.metadata.v1&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// ContentPlugin implements a content store</span></span><br><span class=\"line\">  ContentPlugin Type = <span class=\"string\">&quot;io.containerd.content.v1&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">// GCPlugin implements garbage collection policy</span></span><br><span class=\"line\">  GCPlugin Type = <span class=\"string\">&quot;io.containerd.gc.v1&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中各个插件都需要使用<code>Register</code>注册</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Register allows plugins to register</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Register</span><span class=\"params\">(r *Registration)</span></span> &#123;</span><br><span class=\"line\">  register.Lock()</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> register.Unlock()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> r.Type == <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(ErrNoType)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> r.ID == <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(ErrNoPluginID)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := checkUnique(r); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> last <span class=\"type\">bool</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, requires := <span class=\"keyword\">range</span> r.Requires &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> requires == <span class=\"string\">&quot;*&quot;</span> &#123;</span><br><span class=\"line\">      last = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> last &amp;&amp; <span class=\"built_in\">len</span>(r.Requires) != <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(ErrInvalidRequires)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  register.r = <span class=\"built_in\">append</span>(register.r, r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Graph根据注册的插件的依赖关系生成一个有序的切片</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Graph</span><span class=\"params\">(filter DisableFilter)</span></span> (ordered []*Registration) &#123;</span><br><span class=\"line\">  register.RLock()</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> register.RUnlock()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, r := <span class=\"keyword\">range</span> register.r &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> filter(r) &#123;</span><br><span class=\"line\">      r.Disable = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  added := <span class=\"keyword\">map</span>[*Registration]<span class=\"type\">bool</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, r := <span class=\"keyword\">range</span> register.r &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> r.Disable &#123;</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    children(r, added, &amp;ordered)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !added[r] &#123;</span><br><span class=\"line\">      ordered = <span class=\"built_in\">append</span>(ordered, r)</span><br><span class=\"line\">      added[r] = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ordered</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"context-go\"><a href=\"#context-go\" class=\"headerlink\" title=\"context.go\"></a>context.go</h5><ul>\n<li>context.go主要负责时插件的上下文,Set这个结构体负责存放所有执行过初始化的插件</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Set <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ordered     []*Plugin <span class=\"comment\">// order of initialization</span></span><br><span class=\"line\">  byTypeAndID <span class=\"keyword\">map</span>[Type]<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]*Plugin</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>get根据类型获取插件，需要注意的是如果<code>同一个类型有多个只返回第一个</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get returns the first plugin by its type</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i *InitContext)</span></span> Get(t Type) (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i.plugins.Get(t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加一个插件到集合里</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Add a plugin to the set</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(ps *Set)</span></span> Add(p *Plugin) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> byID, typeok := ps.byTypeAndID[p.Registration.Type]; !typeok &#123;</span><br><span class=\"line\">    ps.byTypeAndID[p.Registration.Type] = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]*Plugin&#123;</span><br><span class=\"line\">      p.Registration.ID: p,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> _, idok := byID[p.Registration.ID]; !idok &#123;</span><br><span class=\"line\">    byID[p.Registration.ID] = p</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.Wrapf(errdefs.ErrAlreadyExists, <span class=\"string\">&quot;plugin %v already initialized&quot;</span>, p.Registration.URI())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ps.ordered = <span class=\"built_in\">append</span>(ps.ordered, p)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>整体的代码比较清晰的,主要的逻辑在server.New()中</li>\n</ul>\n<pre><code class=\"highlight mermaid\">flowchart TD\n   注册插件--&gt;main --&gt; command.App --&gt; server.New[&quot;`loadPlugins \n    init_plugin\n    注册grpc\n    `&quot;]  --&gt; App.Run</code></pre>\n","tags":["k8s","containerd"]},{"title":"docker镜像分析工具dive","url":"/2020/09/29/docker%E9%95%9C%E5%83%8F%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7dive/","content":"<p>通过可视化分析docker镜像</p>\n<span id=\"more\"></span>\n\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><h6 id=\"MacOs\"><a href=\"#MacOs\" class=\"headerlink\" title=\"MacOs\"></a>MacOs</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install dive</span><br></pre></td></tr></table></figure>\n\n<p>其他平台查看官方文档:<a href=\"https://github.com/wagoodman/dive#installation\">https://github.com/wagoodman/dive#installation</a></p>\n<h5 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h5><p>一般我们查看镜像可以使用<code>docker inspect</code>命令查看镜像的信息</p>\n<p>使用<code>dive &lt;image:tage&gt;</code>来查看一个镜像，默认tag为<code>latest</code>没有镜像则会下载</p>\n<p><img src=\"/../images/pasted-3.png\" alt=\"upload successful\"></p>\n<p>如图之所示左边显示阶段和执行的命令，右边是文件系统，&lt;tab&gt;键切换到右边的文件系统，↑↓键则启动光标</p>\n","tags":["docker"]},{"title":"containerd源码-启动容器","url":"/2023/11/20/containerd%E6%BA%90%E7%A0%81-%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8/","content":"<p>containerd得启动也分为服务端和客户端</p>\n<span id=\"more\"></span>\n\n<p>代码版本为v.17.5</p>\n<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><blockquote>\n<p>ctr启动一个pod有两种方式，一个是是run命令直接启动一个pod，还有一种先创建container，在创建task在启动,run命令指示把contaIner和task一块处理了</p>\n</blockquote>\n<h4 id=\"container-create\"><a href=\"#container-create\" class=\"headerlink\" title=\"container create\"></a>container create</h4><ul>\n<li>入口这里</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cmd/ctr/commands/containers/containers.go</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> createCommand = cli.Command&#123;</span><br><span class=\"line\">  Name:      <span class=\"string\">&quot;create&quot;</span>,</span><br><span class=\"line\">  Usage:     <span class=\"string\">&quot;create container&quot;</span>,</span><br><span class=\"line\">  ArgsUsage: <span class=\"string\">&quot;[flags] Image|RootFS CONTAINER [COMMAND] [ARG...]&quot;</span>,</span><br><span class=\"line\">  Flags:     <span class=\"built_in\">append</span>(commands.SnapshotterFlags, commands.ContainerFlags...),</span><br><span class=\"line\">  Action: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *cli.Context)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 参数处理</span></span><br><span class=\"line\">    client, ctx, cancel, err := commands.NewClient(context)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\">    _, err = run.NewContainer(ctx, client, context)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>去除配置相关的主要是查看snapshotter中有没有解压如果没有则解压，然后将处理后的配置信息传递给<code>client.NewContainer()</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cmd/ctr/commands/run/run_unix.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewContainer</span><span class=\"params\">(ctx gocontext.Context, client *containerd.Client, context *cli.Context)</span></span> (containerd.Container, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      i, err := client.ImageService().Get(ctx, ref)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ps := context.String(<span class=\"string\">&quot;platform&quot;</span>); ps != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">        platform, err := platforms.Parse(ps)</span><br><span class=\"line\">        image = containerd.NewImageWithPlatform(client, i, platforms.Only(platform))</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        image = containerd.NewImage(client, i)</span><br><span class=\"line\"></span><br><span class=\"line\">      unpacked, err := image.IsUnpacked(ctx, snapshotter)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> !unpacked &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err := image.Unpack(ctx, snapshotter); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  cOpts = <span class=\"built_in\">append</span>(cOpts, spec)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> client.NewContainer(ctx, id, cOpts...)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>随后将前面的参数传递到Container，然后调用grpc创建<code>container</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// client.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewContainer will create a new container in container with the provided id</span></span><br><span class=\"line\"><span class=\"comment\">// the id must be unique within the namespace</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Client)</span></span> NewContainer(ctx context.Context, id <span class=\"type\">string</span>, opts ...NewContainerOpts) (Container, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  ctx, done, err := c.WithLease(ctx)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> done(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">  container := containers.Container&#123;</span><br><span class=\"line\">    ID: id,</span><br><span class=\"line\">    Runtime: containers.RuntimeInfo&#123;</span><br><span class=\"line\">      Name: c.runtime,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, o := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := o(ctx, c, &amp;container); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  r, err := c.ContainerService().Create(ctx, container)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> containerFromRecord(c, r), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"task-start\"><a href=\"#task-start\" class=\"headerlink\" title=\"task start\"></a>task start</h4><ul>\n<li>前面创建完容器之后就需要创建一个task</li>\n<li>创建完task之后就启动task，这里处理detach这个参数如果有则不会退出之后删除</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cmd/ctr/commands/tasks/start.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> startCommand = cli.Command&#123;</span><br><span class=\"line\">  Name:      <span class=\"string\">&quot;start&quot;</span>,</span><br><span class=\"line\">  Usage:     <span class=\"string\">&quot;start a container that has been created&quot;</span>,</span><br><span class=\"line\">  ArgsUsage: <span class=\"string\">&quot;CONTAINER&quot;</span>,</span><br><span class=\"line\">  Flags: []cli.Flag&#123;</span><br><span class=\"line\">    cli.BoolFlag&#123;</span><br><span class=\"line\">      Name:  <span class=\"string\">&quot;null-io&quot;</span>,</span><br><span class=\"line\">      Usage: <span class=\"string\">&quot;send all IO to /dev/null&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    cli.StringFlag&#123;</span><br><span class=\"line\">      Name:  <span class=\"string\">&quot;log-uri&quot;</span>,</span><br><span class=\"line\">      Usage: <span class=\"string\">&quot;log uri&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    cli.StringFlag&#123;</span><br><span class=\"line\">      Name:  <span class=\"string\">&quot;fifo-dir&quot;</span>,</span><br><span class=\"line\">      Usage: <span class=\"string\">&quot;directory used for storing IO FIFOs&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    cli.StringFlag&#123;</span><br><span class=\"line\">      Name:  <span class=\"string\">&quot;pid-file&quot;</span>,</span><br><span class=\"line\">      Usage: <span class=\"string\">&quot;file path to write the task&#x27;s pid&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    cli.BoolFlag&#123;</span><br><span class=\"line\">      Name:  <span class=\"string\">&quot;detach,d&quot;</span>,</span><br><span class=\"line\">      Usage: <span class=\"string\">&quot;detach from the task after it has started execution&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  Action: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *cli.Context)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    client, ctx, cancel, err := commands.NewClient(context)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\">    container, err := client.LoadContainer(ctx, id)</span><br><span class=\"line\"></span><br><span class=\"line\">    spec, err := container.Spec(ctx)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> con console.Console</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tty &#123;</span><br><span class=\"line\">      con = console.Current()</span><br><span class=\"line\">      <span class=\"keyword\">defer</span> con.Reset()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := con.SetRaw(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    task, err := NewTask(ctx, client, container, <span class=\"string\">&quot;&quot;</span>, con, context.Bool(<span class=\"string\">&quot;null-io&quot;</span>), context.String(<span class=\"string\">&quot;log-uri&quot;</span>), ioOpts, opts...)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> statusC &lt;-<span class=\"keyword\">chan</span> containerd.ExitStatus</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !detach &#123;</span><br><span class=\"line\">      <span class=\"keyword\">defer</span> task.Delete(ctx)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> statusC, err = task.Wait(ctx); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> context.IsSet(<span class=\"string\">&quot;pid-file&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := commands.WritePidFile(context.String(<span class=\"string\">&quot;pid-file&quot;</span>), <span class=\"type\">int</span>(task.Pid())); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := task.Start(ctx); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> detach &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    status := &lt;-statusC</span><br><span class=\"line\">    code, _, err := status.Result()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> _, err := task.Delete(ctx); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> code != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cli.NewExitError(<span class=\"string\">&quot;&quot;</span>, <span class=\"type\">int</span>(code))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>NewTask处理了下命令行相关，然后调用了container.NewTask()</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cmd/ctr/commands/tasks/tasks_unix.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewTask</span><span class=\"params\">(ctx gocontext.Context, client *containerd.Client, container containerd.Container, checkpoint <span class=\"type\">string</span>, con console.Console, nullIO <span class=\"type\">bool</span>, logURI <span class=\"type\">string</span>, ioOpts []cio.Opt, opts ...containerd.NewTaskOpts)</span></span> (containerd.Task, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  stdinC := &amp;stdinCloser&#123;</span><br><span class=\"line\">    stdin: os.Stdin,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> checkpoint != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">    im, err := client.GetImage(ctx, checkpoint)</span><br><span class=\"line\"></span><br><span class=\"line\">    opts = <span class=\"built_in\">append</span>(opts, containerd.WithTaskCheckpoint(im))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ioCreator cio.Creator</span><br><span class=\"line\">  <span class=\"keyword\">if</span> con != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> nullIO &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.New(<span class=\"string\">&quot;tty and null-io cannot be used together&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ioCreator = cio.NewCreator(<span class=\"built_in\">append</span>([]cio.Opt&#123;cio.WithStreams(con, con, <span class=\"literal\">nil</span>), cio.WithTerminal&#125;, ioOpts...)...)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nullIO &#123;</span><br><span class=\"line\">    ioCreator = cio.NullIO</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> logURI != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">    u, err := url.Parse(logURI)</span><br><span class=\"line\">    ioCreator = cio.LogURI(u)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ioCreator = cio.NewCreator(<span class=\"built_in\">append</span>([]cio.Opt&#123;cio.WithStreams(stdinC, os.Stdout, os.Stderr)&#125;, ioOpts...)...)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  t, err := container.NewTask(ctx, ioCreator, opts...)</span><br><span class=\"line\"></span><br><span class=\"line\">  stdinC.closer = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    t.CloseIO(ctx, containerd.WithStdinCloser)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> t, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"run命令\"><a href=\"#run命令\" class=\"headerlink\" title=\"run命令\"></a>run命令</h5><ul>\n<li>基本就是将<code>container create</code>和<code>task start</code>的逻辑组合到一块</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Command runs a container</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Command = cli.Command&#123;</span><br><span class=\"line\">  Name:           <span class=\"string\">&quot;run&quot;</span>,</span><br><span class=\"line\">  Usage:          <span class=\"string\">&quot;run a container&quot;</span>,</span><br><span class=\"line\">  ArgsUsage:      <span class=\"string\">&quot;[flags] Image|RootFS ID [COMMAND] [ARG...]&quot;</span>,</span><br><span class=\"line\">  SkipArgReorder: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  Flags: <span class=\"built_in\">append</span>([]cli.Flag&#123;</span><br><span class=\"line\">    cli.BoolFlag&#123;</span><br><span class=\"line\">      Name:  <span class=\"string\">&quot;detach,d&quot;</span>,</span><br><span class=\"line\">      Usage: <span class=\"string\">&quot;detach from the task after it has started execution&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;, <span class=\"built_in\">append</span>(platformRunFlags, <span class=\"built_in\">append</span>(commands.SnapshotterFlags, commands.ContainerFlags...)...)...),</span><br><span class=\"line\">  Action: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *cli.Context)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    client, ctx, cancel, err := commands.NewClient(context)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\">    container, err := NewContainer(ctx, client, context)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> context.Bool(<span class=\"string\">&quot;rm&quot;</span>) &amp;&amp; !detach &#123;</span><br><span class=\"line\">      <span class=\"keyword\">defer</span> container.Delete(ctx, containerd.WithSnapshotCleanup)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> con console.Console</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tty &#123;</span><br><span class=\"line\">      con = console.Current()</span><br><span class=\"line\">      <span class=\"keyword\">defer</span> con.Reset()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := con.SetRaw(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> network gocni.CNI</span><br><span class=\"line\">    <span class=\"keyword\">if</span> enableCNI &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> network, err = gocni.New(gocni.WithDefaultConf); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    opts := getNewTaskOpts(context)</span><br><span class=\"line\">    ioOpts := []cio.Opt&#123;cio.WithFIFODir(context.String(<span class=\"string\">&quot;fifo-dir&quot;</span>))&#125;</span><br><span class=\"line\">    task, err := tasks.NewTask(ctx, client, container, context.String(<span class=\"string\">&quot;checkpoint&quot;</span>), con, context.Bool(<span class=\"string\">&quot;null-io&quot;</span>), context.String(<span class=\"string\">&quot;log-uri&quot;</span>), ioOpts, opts...)</span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> statusC &lt;-<span class=\"keyword\">chan</span> containerd.ExitStatus</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !detach &#123;</span><br><span class=\"line\">      <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> enableCNI &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> err := network.Remove(ctx, fullID(ctx, container), <span class=\"string\">&quot;&quot;</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            logrus.WithError(err).Error(<span class=\"string\">&quot;network review&quot;</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        task.Delete(ctx)</span><br><span class=\"line\">      &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> statusC, err = task.Wait(ctx); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := task.Start(ctx); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tty &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := tasks.HandleConsoleResize(ctx, task, con); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        logrus.WithError(err).Error(<span class=\"string\">&quot;console resize&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      sigc := commands.ForwardAllSignals(ctx, task)</span><br><span class=\"line\">      <span class=\"keyword\">defer</span> commands.StopCatch(sigc)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    status := &lt;-statusC</span><br><span class=\"line\">    code, _, err := status.Result()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> _, err := task.Delete(ctx); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> code != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cli.NewExitError(<span class=\"string\">&quot;&quot;</span>, <span class=\"type\">int</span>(code))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h4><h5 id=\"container\"><a href=\"#container\" class=\"headerlink\" title=\"container\"></a>container</h5><h6 id=\"container-grpc\"><a href=\"#container-grpc\" class=\"headerlink\" title=\"container grpc\"></a>container grpc</h6><ul>\n<li>插件注册，依赖一个service</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/containers/service.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type: plugin.GRPCPlugin,</span><br><span class=\"line\">    ID:   <span class=\"string\">&quot;containers&quot;</span>,</span><br><span class=\"line\">    Requires: []plugin.Type&#123;</span><br><span class=\"line\">      plugin.ServicePlugin,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      plugins, err := ic.GetByType(plugin.ServicePlugin)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      p, ok := plugins[services.ContainersService]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.New(<span class=\"string\">&quot;containers service not found&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      i, err := p.Instance()</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &amp;service&#123;local: i.(api.ContainersClient)&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>api则直接调用了上层</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *service)</span></span> Create(ctx context.Context, req *api.CreateContainerRequest) (*api.CreateContainerResponse, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.local.Create(ctx, req)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"container-service\"><a href=\"#container-service\" class=\"headerlink\" title=\"container service\"></a>container service</h6><ul>\n<li>插件注册</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/containers/local.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type: plugin.ServicePlugin,</span><br><span class=\"line\">    ID:   services.ContainersService,</span><br><span class=\"line\">    Requires: []plugin.Type&#123;</span><br><span class=\"line\">      plugin.MetadataPlugin,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      m, err := ic.Get(plugin.MetadataPlugin)</span><br><span class=\"line\"></span><br><span class=\"line\">      db := m.(*metadata.DB)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &amp;local&#123;</span><br><span class=\"line\">        Store:     metadata.NewContainerStore(db),</span><br><span class=\"line\">        db:        db,</span><br><span class=\"line\">        publisher: ic.Events,</span><br><span class=\"line\">      &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>主要调用了<code>Store.Create()</code>数据库中创建一个<code>container</code>,且上传了事件</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/containers/local.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *local)</span></span> Create(ctx context.Context, req *api.CreateContainerRequest, _ ...grpc.CallOption) (*api.CreateContainerResponse, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> resp api.CreateContainerResponse</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := l.withStoreUpdate(ctx, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    container := containerFromProto(&amp;req.Container)</span><br><span class=\"line\">    created, err := l.Store.Create(ctx, container)</span><br><span class=\"line\">    resp.Container = containerToProto(&amp;created)</span><br><span class=\"line\">  &#125;); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;resp, errdefs.ToGRPC(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := l.publisher.Publish(ctx, <span class=\"string\">&quot;/containers/create&quot;</span>, &amp;eventstypes.ContainerCreate&#123;</span><br><span class=\"line\">    ID:    resp.Container.ID,</span><br><span class=\"line\">    Image: resp.Container.Image,</span><br><span class=\"line\">    Runtime: &amp;eventstypes.ContainerCreate_Runtime&#123;</span><br><span class=\"line\">      Name:    resp.Container.Runtime.Name,</span><br><span class=\"line\">      Options: resp.Container.Runtime.Options,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;resp, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;resp, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>看下数据中对于Container的实现</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// metadata/containers.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewContainerStore returns a Store backed by an underlying bolt DB</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewContainerStore</span><span class=\"params\">(db *DB)</span></span> containers.Store &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;containerStore&#123;</span><br><span class=\"line\">    db: db,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先校验了了一下container,然后在数据库中创建一个记录</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// metadata/containers.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *containerStore)</span></span> Create(ctx context.Context, container containers.Container) (containers.Container, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  namespace, err := namespaces.NamespaceRequired(ctx)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := validateContainer(&amp;container); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> containers.Container&#123;&#125;, errors.Wrap(err, <span class=\"string\">&quot;create container failed validation&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := update(ctx, s.db, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *bolt.Tx)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    bkt, err := createContainersBucket(tx, namespace)</span><br><span class=\"line\">    cbkt, err := bkt.CreateBucket([]<span class=\"type\">byte</span>(container.ID))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err == bolt.ErrBucketExists &#123;</span><br><span class=\"line\">        err = errors.Wrapf(errdefs.ErrAlreadyExists, <span class=\"string\">&quot;container %q&quot;</span>, container.ID)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    container.CreatedAt = time.Now().UTC()</span><br><span class=\"line\">    container.UpdatedAt = container.CreatedAt</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := writeContainer(cbkt, &amp;container); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> errors.Wrapf(err, <span class=\"string\">&quot;failed to write container %q&quot;</span>, container.ID)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> containers.Container&#123;&#125;, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> container, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"task\"><a href=\"#task\" class=\"headerlink\" title=\"task\"></a>task</h4><h5 id=\"task-grpc\"><a href=\"#task-grpc\" class=\"headerlink\" title=\"task grpc\"></a>task grpc</h5><ul>\n<li>注册依赖于service的插件</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/tasks/service.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type: plugin.GRPCPlugin,</span><br><span class=\"line\">    ID:   <span class=\"string\">&quot;tasks&quot;</span>,</span><br><span class=\"line\">    Requires: []plugin.Type&#123;</span><br><span class=\"line\">      plugin.ServicePlugin,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      plugins, err := ic.GetByType(plugin.ServicePlugin)</span><br><span class=\"line\">      p, ok := plugins[services.TasksService]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.New(<span class=\"string\">&quot;tasks service not found&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      i, err := p.Instance()</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &amp;service&#123;local: i.(api.TasksClient)&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>api直接调用上层的插件了</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *service)</span></span> Create(ctx context.Context, r *api.CreateTaskRequest) (*api.CreateTaskResponse, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.local.Create(ctx, r)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *service)</span></span> Start(ctx context.Context, r *api.StartRequest) (*api.StartResponse, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.local.Start(ctx, r)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"task-serivce\"><a href=\"#task-serivce\" class=\"headerlink\" title=\"task serivce\"></a>task serivce</h6><ul>\n<li>初始化的过程根据平台来选,分别有bsd，unix和win主要看unix</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type:     plugin.ServicePlugin,</span><br><span class=\"line\">    ID:       services.TasksService,</span><br><span class=\"line\">    Requires: tasksServiceRequires,</span><br><span class=\"line\">    InitFn:   initFunc,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  timeout.Set(stateTimeout, <span class=\"number\">2</span>*time.Second)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>unix加载的插件</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/tasks/local_unix.go</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tasksServiceRequires = []plugin.Type&#123;</span><br><span class=\"line\">  plugin.RuntimePlugin,</span><br><span class=\"line\">  plugin.RuntimePluginV2,</span><br><span class=\"line\">  plugin.MetadataPlugin,</span><br><span class=\"line\">  plugin.TaskMonitorPlugin,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据平台调用<code>loadV1Runtimes()</code>加载runtimev1然后遍历</li>\n<li>runtimev2 则是通过<code>ic.Get(plugin.RuntimePluginV2)</code>通过插件的形式拿到</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/tasks/local.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initFunc</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  runtimes, err := loadV1Runtimes(ic)</span><br><span class=\"line\"></span><br><span class=\"line\">  v2r, err := ic.Get(plugin.RuntimePluginV2)</span><br><span class=\"line\"></span><br><span class=\"line\">  m, err := ic.Get(plugin.MetadataPlugin)</span><br><span class=\"line\"></span><br><span class=\"line\">  monitor, err := ic.Get(plugin.TaskMonitorPlugin)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !errdefs.IsNotFound(err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    monitor = runtime.NewNoopMonitor()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  db := m.(*metadata.DB)</span><br><span class=\"line\">  l := &amp;local&#123;</span><br><span class=\"line\">    runtimes:   runtimes,</span><br><span class=\"line\">    containers: metadata.NewContainerStore(db),</span><br><span class=\"line\">    store:      db.ContentStore(),</span><br><span class=\"line\">    publisher:  ic.Events,</span><br><span class=\"line\">    monitor:    monitor.(runtime.TaskMonitor),</span><br><span class=\"line\">    v2Runtime:  v2r.(*v2.TaskManager),</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, r := <span class=\"keyword\">range</span> runtimes &#123;</span><br><span class=\"line\">    tasks, err := r.Tasks(ic.Context, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, t := <span class=\"keyword\">range</span> tasks &#123;</span><br><span class=\"line\">      l.monitor.Monitor(t)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  v2Tasks, err := l.v2Runtime.Tasks(ic.Context, <span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, t := <span class=\"keyword\">range</span> v2Tasks &#123;</span><br><span class=\"line\">    l.monitor.Monitor(t)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> l, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>具体api实现方面，通过请求的容器id获取容器，处理下需要恢复路径，因为contaInerd重启容器并不会退出，所以需要contaIner找到之前的容器</li>\n<li>处理rootfs</li>\n<li>获取一个<code>runtime.get()</code> 获取一个task没然后执行创建task</li>\n<li>随后调用<code>monitor.Monitor(c)</code>监控容器</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/tasks/local.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *local)</span></span> Create(ctx context.Context, r *api.CreateTaskRequest, _ ...grpc.CallOption) (*api.CreateTaskResponse, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  container, err := l.getContainer(ctx, r.ContainerID)</span><br><span class=\"line\">  checkpointPath, err := getRestorePath(container.Runtime.Name, r.Options)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> checkpointPath == <span class=\"string\">&quot;&quot;</span> &amp;&amp; r.Checkpoint != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    checkpointPath, err = ioutil.TempDir(os.Getenv(<span class=\"string\">&quot;XDG_RUNTIME_DIR&quot;</span>), <span class=\"string\">&quot;ctrd-checkpoint&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> r.Checkpoint.MediaType != images.MediaTypeContainerd1Checkpoint &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;unsupported checkpoint type %q&quot;</span>, r.Checkpoint.MediaType)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reader, err := l.store.ReaderAt(ctx, ocispec.Descriptor&#123;</span><br><span class=\"line\">      MediaType:   r.Checkpoint.MediaType,</span><br><span class=\"line\">      Digest:      r.Checkpoint.Digest,</span><br><span class=\"line\">      Size:        r.Checkpoint.Size_,</span><br><span class=\"line\">      Annotations: r.Checkpoint.Annotations,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    _, err = archive.Apply(ctx, checkpointPath, content.NewReader(reader))</span><br><span class=\"line\">    reader.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  opts := runtime.CreateOpts&#123;</span><br><span class=\"line\">    Spec: container.Spec,</span><br><span class=\"line\">    IO: runtime.IO&#123;</span><br><span class=\"line\">      Stdin:    r.Stdin,</span><br><span class=\"line\">      Stdout:   r.Stdout,</span><br><span class=\"line\">      Stderr:   r.Stderr,</span><br><span class=\"line\">      Terminal: r.Terminal,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Checkpoint:     checkpointPath,</span><br><span class=\"line\">    Runtime:        container.Runtime.Name,</span><br><span class=\"line\">    RuntimeOptions: container.Runtime.Options,</span><br><span class=\"line\">    TaskOptions:    r.Options,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, m := <span class=\"keyword\">range</span> r.Rootfs &#123;</span><br><span class=\"line\">    opts.Rootfs = <span class=\"built_in\">append</span>(opts.Rootfs, mount.Mount&#123;</span><br><span class=\"line\">      Type:    m.Type,</span><br><span class=\"line\">      Source:  m.Source,</span><br><span class=\"line\">      Options: m.Options,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> strings.HasPrefix(container.Runtime.Name, <span class=\"string\">&quot;io.containerd.runtime.v1.&quot;</span>) &#123;</span><br><span class=\"line\">    log.G(ctx).Warn(<span class=\"string\">&quot;runtime v1 is deprecated since containerd v1.4, consider using runtime v2&quot;</span>)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> container.Runtime.Name == plugin.RuntimeRuncV1 &#123;</span><br><span class=\"line\">    log.G(ctx).Warnf(<span class=\"string\">&quot;%q is deprecated since containerd v1.4, consider using %q&quot;</span>, plugin.RuntimeRuncV1, plugin.RuntimeRuncV2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  rtime, err := l.getRuntime(container.Runtime.Name)</span><br><span class=\"line\">  _, err = rtime.Get(ctx, r.ContainerID)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != runtime.ErrTaskNotExists &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errdefs.ToGRPC(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errdefs.ToGRPC(fmt.Errorf(<span class=\"string\">&quot;task %s already exists&quot;</span>, r.ContainerID))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  c, err := rtime.Create(ctx, r.ContainerID, opts)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errdefs.ToGRPC(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := l.monitor.Monitor(c); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Wrap(err, <span class=\"string\">&quot;monitor task&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;api.CreateTaskResponse&#123;</span><br><span class=\"line\">    ContainerID: r.ContainerID,</span><br><span class=\"line\">    Pid:         c.PID(),</span><br><span class=\"line\">  &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>start根据上一步创建的task获取进程然后启动进程</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// services/tasks/local.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *local)</span></span> Start(ctx context.Context, r *api.StartRequest, _ ...grpc.CallOption) (*api.StartResponse, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  t, err := l.getTask(ctx, r.ContainerID)</span><br><span class=\"line\"></span><br><span class=\"line\">  p := runtime.Process(t)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> r.ExecID != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> p, err = t.Process(ctx, r.ExecID); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errdefs.ToGRPC(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := p.Start(ctx); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errdefs.ToGRPC(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  state, err := p.State(ctx)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errdefs.ToGRPC(err)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;api.StartResponse&#123;</span><br><span class=\"line\">    Pid: state.Pid,</span><br><span class=\"line\">  &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"runtime\"><a href=\"#runtime\" class=\"headerlink\" title=\"runtime\"></a>runtime</h5><ul>\n<li>runtime有2个版本现在普遍使用v2,他的初始化会根据平台传递一个config，最后拿到的参数传递给<code>New()</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// runtime/v2/manager.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  plugin.Register(&amp;plugin.Registration&#123;</span><br><span class=\"line\">    Type: plugin.RuntimePluginV2,</span><br><span class=\"line\">    ID:   <span class=\"string\">&quot;task&quot;</span>,</span><br><span class=\"line\">    Requires: []plugin.Type&#123;</span><br><span class=\"line\">      plugin.MetadataPlugin,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Config: &amp;Config&#123;</span><br><span class=\"line\">      Platforms: defaultPlatforms(),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    InitFn: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ic *plugin.InitContext)</span></span> (<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      supportedPlatforms, err := parsePlatforms(ic.Config.(*Config).Platforms)</span><br><span class=\"line\"></span><br><span class=\"line\">      ic.Meta.Platforms = supportedPlatforms</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := os.MkdirAll(ic.Root, <span class=\"number\">0711</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := os.MkdirAll(ic.State, <span class=\"number\">0711</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      m, err := ic.Get(plugin.MetadataPlugin)</span><br><span class=\"line\"></span><br><span class=\"line\">      cs := metadata.NewContainerStore(m.(*metadata.DB))</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> New(ic.Context, ic.Root, ic.State, ic.Address, ic.TTRPCAddress, ic.Events, cs)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>New()创建了文件夹和初始化了一个<code>TaskManager</code>,然后调用loadExistingTasks()方法加载已经存在的task</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// New task manager for v2 shims</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">New</span><span class=\"params\">(ctx context.Context, root, state, containerdAddress, containerdTTRPCAddress <span class=\"type\">string</span>, events *exchange.Exchange, cs containers.Store)</span></span> (*TaskManager, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, d := <span class=\"keyword\">range</span> []<span class=\"type\">string</span>&#123;root, state&#125; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := os.MkdirAll(d, <span class=\"number\">0711</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  m := &amp;TaskManager&#123;</span><br><span class=\"line\">    root:                   root,</span><br><span class=\"line\">    state:                  state,</span><br><span class=\"line\">    containerdAddress:      containerdAddress,</span><br><span class=\"line\">    containerdTTRPCAddress: containerdTTRPCAddress,</span><br><span class=\"line\">    tasks:                  runtime.NewTaskList(),</span><br><span class=\"line\">    events:                 events,</span><br><span class=\"line\">    containers:             cs,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := m.loadExistingTasks(ctx); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>最终通过shim创建容器，然后添加task</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a new task</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *TaskManager)</span></span> Create(ctx context.Context, id <span class=\"type\">string</span>, opts runtime.CreateOpts) (_ runtime.Task, retErr <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  bundle, err := NewBundle(ctx, m.root, m.state, id, opts.Spec.Value)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> retErr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      bundle.Delete()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">  shim, err := m.startShim(ctx, bundle, id, opts)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> retErr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      m.deleteShim(shim)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">  t, err := shim.Create(ctx, opts)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := m.tasks.Add(ctx, t); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Wrap(err, <span class=\"string\">&quot;failed to add task&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> t, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>看了startShim实现。通过bundel等参数构造出一个<code>binary</code>,然后调用<code>start()</code>方法</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// runtime/v2/manager.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *TaskManager)</span></span> startShim(ctx context.Context, bundle *Bundle, id <span class=\"type\">string</span>, opts runtime.CreateOpts) (*shim, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  ns, err := namespaces.NamespaceRequired(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">  topts := opts.TaskOptions</span><br><span class=\"line\"></span><br><span class=\"line\">  b := shimBinary(ctx, bundle, opts.Runtime, m.containerdAddress, m.containerdTTRPCAddress, m.events, m.tasks)</span><br><span class=\"line\">  shim, err := b.Start(ctx, topts, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    log.G(ctx).WithField(<span class=\"string\">&quot;id&quot;</span>, id).Info(<span class=\"string\">&quot;shim disconnected&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    cleanupAfterDeadShim(context.Background(), id, ns, m.tasks, m.events, b)</span><br><span class=\"line\">    <span class=\"comment\">// Remove self from the runtime task list. Even though the cleanupAfterDeadShim()</span></span><br><span class=\"line\">    <span class=\"comment\">// would publish taskExit event, but the shim.Delete() would always failed with ttrpc</span></span><br><span class=\"line\">    <span class=\"comment\">// disconnect and there is no chance to remove this dead task from runtime task lists.</span></span><br><span class=\"line\">    <span class=\"comment\">// Thus it&#x27;s better to delete it here.</span></span><br><span class=\"line\">    m.tasks.Delete(ctx, id)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> shim, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这里通过<code>client.Command()</code>组装出命令然后启动程序</li>\n<li>随后创建一个ttrpc客户端返回</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *binary)</span></span> Start(ctx context.Context, opts *types.Any, onClose <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>) (_ *shim, err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  args := []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;-id&quot;</span>, b.bundle.ID&#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> logrus.GetLevel() == logrus.DebugLevel &#123;</span><br><span class=\"line\">    args = <span class=\"built_in\">append</span>(args, <span class=\"string\">&quot;-debug&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  args = <span class=\"built_in\">append</span>(args, <span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  cmd, err := client.Command(</span><br><span class=\"line\">    ctx,</span><br><span class=\"line\">    b.runtime,</span><br><span class=\"line\">    b.containerdAddress,</span><br><span class=\"line\">    b.containerdTTRPCAddress,</span><br><span class=\"line\">    b.bundle.Path,</span><br><span class=\"line\">    opts,</span><br><span class=\"line\">    args...,</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Windows needs a namespace when openShimLog</span></span><br><span class=\"line\">  ns, _ := namespaces.Namespace(ctx)</span><br><span class=\"line\">  shimCtx, cancelShimLog := context.WithCancel(namespaces.WithNamespace(context.Background(), ns))</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      cancelShimLog()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  f, err := openShimLog(shimCtx, b.bundle, client.AnonDialer)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Wrap(err, <span class=\"string\">&quot;open shim log pipe&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      f.Close()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"comment\">// open the log pipe and block until the writer is ready</span></span><br><span class=\"line\">  <span class=\"comment\">// this helps with synchronization of the shim</span></span><br><span class=\"line\">  <span class=\"comment\">// copy the shim&#x27;s logs to containerd&#x27;s output</span></span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> f.Close()</span><br><span class=\"line\">    _, err := io.Copy(os.Stderr, f)</span><br><span class=\"line\">    <span class=\"comment\">// To prevent flood of error messages, the expected error</span></span><br><span class=\"line\">    <span class=\"comment\">// should be reset, like os.ErrClosed or os.ErrNotExist, which</span></span><br><span class=\"line\">    <span class=\"comment\">// depends on platform.</span></span><br><span class=\"line\">    err = checkCopyShimLogError(ctx, err)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      log.G(ctx).WithError(err).Error(<span class=\"string\">&quot;copy shim log&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  out, err := cmd.CombinedOutput()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.Wrapf(err, <span class=\"string\">&quot;%s&quot;</span>, out)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  address := strings.TrimSpace(<span class=\"type\">string</span>(out))</span><br><span class=\"line\">  conn, err := client.Connect(address, client.AnonDialer)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  onCloseWithShimLog := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    onClose()</span><br><span class=\"line\">    cancelShimLog()</span><br><span class=\"line\">    f.Close()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  client := ttrpc.NewClient(conn, ttrpc.WithOnClose(onCloseWithShimLog))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;shim&#123;</span><br><span class=\"line\">    bundle:  b.bundle,</span><br><span class=\"line\">    client:  client,</span><br><span class=\"line\">    task:    task.NewTaskClient(client),</span><br><span class=\"line\">    events:  b.events,</span><br><span class=\"line\">    rtTasks: b.rtTasks,</span><br><span class=\"line\">  &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><pre><code class=\"highlight mermaid\">sequenceDiagram\n    autonumber\n    participant client as 客户端\n    participant container as container-service\n    participant task as task-service\n    #participant content as content-service\n    #participant snapshotter as snapshotter-service\n    participant image as image-service\n    \n    client-&gt;&gt;image:获取image信息\n    client-&gt;&gt;container:创建容器\n    client-&gt;&gt;task:创建task\n    client-&gt;&gt;task:启动task</code></pre>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"http://blog.naturelr.cc/\">http://blog.naturelr.cc</a></p>\n","tags":["k8s","containerd"]},{"title":"containerd源码-下载镜像","url":"/2023/11/03/containerd%E6%BA%90%E7%A0%81-%E4%B8%8B%E8%BD%BD%E9%95%9C%E5%83%8F/","content":"<p>前面介绍了插件注册以及启动,本次介绍下载镜像的过程</p>\n<span id=\"more\"></span>\n\n<p>代码版本为v.17.5</p>\n<blockquote>\n<p>主要依据ctr命令行工具的代码来阅读(cri还有套逻辑)，本文视角视角主要在客户端，服务端在后面的解析</p>\n</blockquote>\n<h4 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h4><h5 id=\"命令行处理\"><a href=\"#命令行处理\" class=\"headerlink\" title=\"命令行处理\"></a>命令行处理</h5><ul>\n<li>老套路，直接点进去看<code>app.New()</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cmd/ctr/main.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  app := app.New()</span><br><span class=\"line\">  app.Commands = <span class=\"built_in\">append</span>(app.Commands, pluginCmds...)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := app.Run(os.Args); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    fmt.Fprintf(os.Stderr, <span class=\"string\">&quot;ctr: %s\\n&quot;</span>, err)</span><br><span class=\"line\">    os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这里面手机了很多子命令，我们主要关注<code>images.Command</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cmd/ctr/app/main.go</span></span><br><span class=\"line\">app.Commands = <span class=\"built_in\">append</span>([]cli.Command&#123;</span><br><span class=\"line\">    plugins.Command,</span><br><span class=\"line\">    versionCmd.Command,</span><br><span class=\"line\">    containers.Command,</span><br><span class=\"line\">    content.Command,</span><br><span class=\"line\">    events.Command,</span><br><span class=\"line\">    images.Command,</span><br><span class=\"line\">    leases.Command,</span><br><span class=\"line\">    namespacesCmd.Command,</span><br><span class=\"line\">    pprof.Command,</span><br><span class=\"line\">    run.Command,</span><br><span class=\"line\">    snapshots.Command,</span><br><span class=\"line\">    tasks.Command,</span><br><span class=\"line\">    install.Command,</span><br><span class=\"line\">    ociCmd.Command,</span><br><span class=\"line\">  &#125;, extraCmds...)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>依然是收集命令的结构，点击去查看<code>pullCommand</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cmd/ctr/commands/images/images.go</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Command = cli.Command&#123;</span><br><span class=\"line\">  Name:    <span class=\"string\">&quot;images&quot;</span>,</span><br><span class=\"line\">  Aliases: []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;image&quot;</span>, <span class=\"string\">&quot;i&quot;</span>&#125;,</span><br><span class=\"line\">  Usage:   <span class=\"string\">&quot;manage images&quot;</span>,</span><br><span class=\"line\">  Subcommands: cli.Commands&#123;</span><br><span class=\"line\">    checkCommand,</span><br><span class=\"line\">    exportCommand,</span><br><span class=\"line\">    importCommand,</span><br><span class=\"line\">    listCommand,</span><br><span class=\"line\">    mountCommand,</span><br><span class=\"line\">    unmountCommand,</span><br><span class=\"line\">    pullCommand,</span><br><span class=\"line\">    pushCommand,</span><br><span class=\"line\">    removeCommand,</span><br><span class=\"line\">    tagCommand,</span><br><span class=\"line\">    setLabelsCommand,</span><br><span class=\"line\">    convertCommand,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这里开始进入pull相关代码，主要在<code>Action</code>下,精简了下代码</li>\n<li>首先创建了一个客户端，然后客户端获取了一个lease</li>\n<li>最后开始下载，点进去<code>Fetch()</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cmd/ctr/commands/images/pull.go</span></span><br><span class=\"line\"></span><br><span class=\"line\">client, ctx, cancel, err := commands.NewClient(context)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> cancel()</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx, done, err := client.WithLease(ctx)</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> done(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">    config, err := content.NewFetchConfig(ctx, context)</span><br><span class=\"line\"></span><br><span class=\"line\">    img, err := content.Fetch(ctx, client, ref, config)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h5><ul>\n<li>开始处理了下是否使用<code>TraceHTTP</code>,然后创建了一个显示进度的，这个显示进度得就是使用<code>ctr i pull</code>时显示的进度，从这里可以看到另外开了个携程负责显示</li>\n<li>紧接着根据配置文件将相关操作放到<code>opts</code>这个切片中,最后调用<code>client.Fetch()</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker.io/library/alpine:3.18.3:                                                  resolved       |++++++++++++++++++++++++++++++++++++++|</span><br><span class=\"line\">index-sha256:7144f7bab3d4c2648d7e59409f15ec52a18006a128c733fcff20d3a4a54ba44a:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class=\"line\">manifest-sha256:c5c5fda71656f28e49ac9c5416b3643eaa6a108a8093151d6d1afc9463be8e33: done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class=\"line\">layer-sha256:7264a8db6415046d36d16ba98b79778e18accee6ffa71850405994cffa9be7de:    done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class=\"line\">config-sha256:7e01a0d0a1dcd9e539f8e9bbd80106d59efbdf97293b3d38f5d7a34501526cdb:   done           |++++++++++++++++++++++++++++++++++++++|</span><br><span class=\"line\">elapsed: 9.9 s                                                                    total:  3.1 Mi (322.3 KiB/s)</span><br><span class=\"line\">unpacking linux/amd64 sha256:7144f7bab3d4c2648d7e59409f15ec52a18006a128c733fcff20d3a4a54ba44a...</span><br><span class=\"line\">done: 294.389123ms</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cmd/ctr/commands/content/fetch.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Fetch loads all resources into the content store and returns the image</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Fetch</span><span class=\"params\">(ctx context.Context, client *containerd.Client, ref <span class=\"type\">string</span>, config *FetchConfig)</span></span> (images.Image, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">ongoing := NewJobs(ref)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> config.TraceHTTP &#123;</span><br><span class=\"line\">    ctx = httptrace.WithClientTrace(ctx, commands.NewDebugClientTrace(ctx))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 进度条</span></span><br><span class=\"line\">  pctx, stopProgress := context.WithCancel(ctx)</span><br><span class=\"line\">  progress := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> config.ProgressOutput != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// no progress bar, because it hides some debug logs</span></span><br><span class=\"line\">      ShowProgress(pctx, ongoing, client.ContentStore(), config.ProgressOutput)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">close</span>(progress)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">  h := images.HandlerFunc(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context, desc ocispec.Descriptor)</span></span> ([]ocispec.Descriptor, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> desc.MediaType != images.MediaTypeDockerSchema1Manifest &#123;</span><br><span class=\"line\">      ongoing.Add(desc)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  log.G(pctx).WithField(<span class=\"string\">&quot;image&quot;</span>, ref).Debug(<span class=\"string\">&quot;fetching&quot;</span>)</span><br><span class=\"line\">  labels := commands.LabelArgs(config.Labels)</span><br><span class=\"line\">  opts := []containerd.RemoteOpt&#123;</span><br><span class=\"line\">    containerd.WithPullLabels(labels),</span><br><span class=\"line\">    containerd.WithResolver(config.Resolver),</span><br><span class=\"line\">    containerd.WithImageHandler(h),</span><br><span class=\"line\">    containerd.WithSchema1Conversion,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  opts = <span class=\"built_in\">append</span>(opts, config.RemoteOpts...)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> config.AllMetadata &#123;</span><br><span class=\"line\">    opts = <span class=\"built_in\">append</span>(opts, containerd.WithAllMetadata())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> config.PlatformMatcher != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    opts = <span class=\"built_in\">append</span>(opts, containerd.WithPlatformMatcher(config.PlatformMatcher))</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, platform := <span class=\"keyword\">range</span> config.Platforms &#123;</span><br><span class=\"line\">      opts = <span class=\"built_in\">append</span>(opts, containerd.WithPlatform(platform))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  img, err := client.Fetch(pctx, ref, opts...)</span><br><span class=\"line\">  stopProgress()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> images.Image&#123;&#125;, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;-progress</span><br><span class=\"line\">  <span class=\"keyword\">return</span> img, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这里首先创建一个<code>fetchCtx</code>并将将上面一些<code>opts</code>执行到fetcCtx中</li>\n<li>然后判断是不是下载时就进行解包，ctr命令里是先下载所有layer到content存储，然后在解压到快照服务，如果这个为真则下载一个layer就解压一个，在这里不支持边下载边解压</li>\n<li>随后根据配置来决定下载的平台()</li>\n<li>最终执行<code>c.fetch()</code>，点进去</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// client.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Client)</span></span> Fetch(ctx context.Context, ref <span class=\"type\">string</span>, opts ...RemoteOpt) (images.Image, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  fetchCtx := defaultRemoteContext() <span class=\"comment\">// 申明最终用于下载的组件</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, o := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := o(c, fetchCtx); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> images.Image&#123;&#125;, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> fetchCtx.Unpack &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> images.Image&#123;&#125;, errors.Wrap(errdefs.ErrNotImplemented, <span class=\"string\">&quot;unpack on fetch not supported, try pull&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> fetchCtx.PlatformMatcher == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(fetchCtx.Platforms) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      fetchCtx.PlatformMatcher = platforms.All</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> ps []ocispec.Platform</span><br><span class=\"line\">      <span class=\"keyword\">for</span> _, s := <span class=\"keyword\">range</span> fetchCtx.Platforms &#123;</span><br><span class=\"line\">        p, err := platforms.Parse(s)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> images.Image&#123;&#125;, errors.Wrapf(err, <span class=\"string\">&quot;invalid platform %s&quot;</span>, s)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ps = <span class=\"built_in\">append</span>(ps, p)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      fetchCtx.PlatformMatcher = platforms.Any(ps...)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ctx, done, err := c.WithLease(ctx)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> done(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">  img, err := c.fetch(ctx, fetchCtx, ref, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> c.createNewImage(ctx, img)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过客户创建另一个cotent，为下载存储做准备</li>\n<li><code>rCtx.Resolver.Resolve()</code>镜像名字来解析index等信息</li>\n<li>接下来都是根据解析出来的<code>desc</code>解析出来的类型判断是否需要需要转换格式，主要是早期docker格式的v1版本转换,</li>\n<li>随后对<code>childerHadner</code>进行变量的判断来处理</li>\n<li>所有的hander都放到<code>handlers</code>这个切片中，然后后丢给<code>images.Handlers</code>处理</li>\n<li><code>images.Dispatch</code>对desc遍历并递归调用每层都会经过上面的hander处理</li>\n<li>最终返回一个<code>images.Image</code>对象,到此下下载镜像完成</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// pull.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Client)</span></span> fetch(ctx context.Context, rCtx *RemoteContext, ref <span class=\"type\">string</span>, limit <span class=\"type\">int</span>) (images.Image, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  store := c.ContentStore()</span><br><span class=\"line\"></span><br><span class=\"line\">  name, desc, err := rCtx.Resolver.Resolve(ctx, ref)</span><br><span class=\"line\"></span><br><span class=\"line\">  fetcher, err := rCtx.Resolver.Fetcher(ctx, name)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    handler images.Handler</span><br><span class=\"line\">    isConvertible <span class=\"type\">bool</span></span><br><span class=\"line\">    converterFunc <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context.Context, ocispec.Descriptor)</span></span> (ocispec.Descriptor, <span class=\"type\">error</span>)</span><br><span class=\"line\">    limiter       *semaphore.Weighted</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> desc.MediaType == images.MediaTypeDockerSchema1Manifest &amp;&amp; rCtx.ConvertSchema1 &#123;</span><br><span class=\"line\">    schema1Converter := schema1.NewConverter(store, fetcher)</span><br><span class=\"line\">    handler = images.Handlers(<span class=\"built_in\">append</span>(rCtx.BaseHandlers, schema1Converter)...)</span><br><span class=\"line\">    isConvertible = <span class=\"literal\">true</span></span><br><span class=\"line\">    converterFunc = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context, _ ocispec.Descriptor)</span></span> (ocispec.Descriptor, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> schema1Converter.Convert(ctx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Get all the children for a descriptor</span></span><br><span class=\"line\">    childrenHandler := images.ChildrenHandler(store)</span><br><span class=\"line\">    <span class=\"comment\">// Set any children labels for that content</span></span><br><span class=\"line\">    childrenHandler = images.SetChildrenMappedLabels(store, childrenHandler, rCtx.ChildLabelMap)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> rCtx.AllMetadata &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Filter manifests by platforms but allow to handle manifest</span></span><br><span class=\"line\">      <span class=\"comment\">// and configuration for not-target platforms</span></span><br><span class=\"line\">      childrenHandler = remotes.FilterManifestByPlatformHandler(childrenHandler, rCtx.PlatformMatcher)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Filter children by platforms if specified.</span></span><br><span class=\"line\">      childrenHandler = images.FilterPlatforms(childrenHandler, rCtx.PlatformMatcher)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Sort and limit manifests if a finite number is needed</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> limit &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      childrenHandler = images.LimitManifests(childrenHandler, rCtx.PlatformMatcher, limit)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set isConvertible to true if there is application/octet-stream media type</span></span><br><span class=\"line\">    convertibleHandler := images.HandlerFunc(</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(_ context.Context, desc ocispec.Descriptor)</span></span> ([]ocispec.Descriptor, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> desc.MediaType == docker.LegacyConfigMediaType &#123;</span><br><span class=\"line\">          isConvertible = <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> []ocispec.Descriptor&#123;&#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    appendDistSrcLabelHandler, err := docker.AppendDistributionSourceLabel(store, ref)</span><br><span class=\"line\"></span><br><span class=\"line\">    handlers := <span class=\"built_in\">append</span>(rCtx.BaseHandlers,</span><br><span class=\"line\">      remotes.FetchHandler(store, fetcher), <span class=\"comment\">// 负责下载</span></span><br><span class=\"line\">      convertibleHandler,</span><br><span class=\"line\">      childrenHandler,</span><br><span class=\"line\">      appendDistSrcLabelHandler,</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    handler = images.Handlers(handlers...)</span><br><span class=\"line\"></span><br><span class=\"line\">    converterFunc = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context, desc ocispec.Descriptor)</span></span> (ocispec.Descriptor, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> docker.ConvertManifest(ctx, store, desc)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> rCtx.HandlerWrapper != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    handler = rCtx.HandlerWrapper(handler)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> rCtx.MaxConcurrentDownloads &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    limiter = semaphore.NewWeighted(<span class=\"type\">int64</span>(rCtx.MaxConcurrentDownloads))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 递归调用</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err := images.Dispatch(ctx, handler, limiter, desc); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> images.Image&#123;&#125;, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> isConvertible &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> desc, err = converterFunc(ctx, desc); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> images.Image&#123;&#125;, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> images.Image&#123;</span><br><span class=\"line\">    Name:   name,</span><br><span class=\"line\">    Target: desc,</span><br><span class=\"line\">    Labels: rCtx.Labels,</span><br><span class=\"line\">  &#125;, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中主要下载的函数是<code>remotes.FetchHandler(store, fetcher)</code>,这个函数首先判断MediaType,docker v1的直接报错报错返回<br>主要看<code>fetch</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// remotes/handlers.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// FetchHandler returns a handler that will fetch all content into the ingester</span></span><br><span class=\"line\"><span class=\"comment\">// discovered in a call to Dispatch. Use with ChildrenHandler to do a full</span></span><br><span class=\"line\"><span class=\"comment\">// recursive fetch.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FetchHandler</span><span class=\"params\">(ingester content.Ingester, fetcher Fetcher)</span></span> images.HandlerFunc &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx context.Context, desc ocispec.Descriptor)</span></span> (subdescs []ocispec.Descriptor, err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    ctx = log.WithLogger(ctx, log.G(ctx).WithFields(logrus.Fields&#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;digest&quot;</span>:    desc.Digest,</span><br><span class=\"line\">      <span class=\"string\">&quot;mediatype&quot;</span>: desc.MediaType,</span><br><span class=\"line\">      <span class=\"string\">&quot;size&quot;</span>:      desc.Size,</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> desc.MediaType &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> images.MediaTypeDockerSchema1Manifest:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;%v not supported&quot;</span>, desc.MediaType)</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      err := fetch(ctx, ingester, fetcher, desc) <span class=\"comment\">// 真正用来干活的</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>调用<code>content.OpenWriter()</code>创建了cw,通过错误判断是不是已经存在了</li>\n<li>调用<code>Status()</code>获取状态，然后判断是content-service中大小，如果相同则提交</li>\n<li>随后调用<code>fetcher.Fetch()</code>开始真正的下载内容然后通过流式拷贝到<code>content.Writer()</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fetch</span><span class=\"params\">(ctx context.Context, ingester content.Ingester, fetcher Fetcher, desc ocispec.Descriptor)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  cw, err := content.OpenWriter(ctx, ingester, content.WithRef(MakeRefKey(ctx, desc)), content.WithDescriptor(desc))</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> errdefs.IsAlreadyExists(err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> cw.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">  ws, err := cw.Status()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> desc.Size == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// most likely a poorly configured registry/web front end which responded with no</span></span><br><span class=\"line\">    <span class=\"comment\">// Content-Length header; unable (not to mention useless) to commit a 0-length entry</span></span><br><span class=\"line\">    <span class=\"comment\">// into the content store. Error out here otherwise the error sent back is confusing</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.Wrapf(errdefs.ErrInvalidArgument, <span class=\"string\">&quot;unable to fetch descriptor (%s) which reports content size of zero&quot;</span>, desc.Digest)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ws.Offset == desc.Size &#123;</span><br><span class=\"line\">    <span class=\"comment\">// If writer is already complete, commit and return</span></span><br><span class=\"line\">    err := cw.Commit(ctx, desc.Size, desc.Digest)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; !errdefs.IsAlreadyExists(err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> errors.Wrapf(err, <span class=\"string\">&quot;failed commit on ref %q&quot;</span>, ws.Ref)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  rc, err := fetcher.Fetch(ctx, desc) <span class=\"comment\">// 下载数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">defer</span> rc.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> content.Copy(ctx, cw, rc, desc.Size, desc.Digest) <span class=\"comment\">// 拷贝数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建IMAGE\"><a href=\"#创建IMAGE\" class=\"headerlink\" title=\"创建IMAGE\"></a>创建IMAGE</h5><ul>\n<li>镜像layer下载完成之后需要解压因此回到Fetch函数，执行完c.fetch之后根据返回的image对象创建了一个image,可以看到其实是根据客户端创建了一个ImagesService<br>然后创建了个imags,</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Client)</span></span> Fetch(ctx context.Context, ref <span class=\"type\">string</span>, opts ...RemoteOpt) (images.Image, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 省略</span></span><br><span class=\"line\">  img, err := c.fetch(ctx, fetchCtx, ref, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> c.createNewImage(ctx, img)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Client)</span></span> createNewImage(ctx context.Context, img images.Image) (images.Image, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  is := c.ImageService()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> created, err := is.Create(ctx, img); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> !errdefs.IsAlreadyExists(err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> images.Image&#123;&#125;, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      updated, err := is.Update(ctx, img)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// if image was removed, try create again</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> errdefs.IsNotFound(err) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> images.Image&#123;&#125;, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      img = updated</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      img = created</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> img, <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h4><ul>\n<li>回到Action中,根据<code>content.Fetch</code>中返回的img,然后根据配置参数是否全平台来遍历</li>\n<li>循环中调用了<code>containerd.NewImageWithPlatform()</code>创建了一个<code>containerd.Image</code>类型的i,然后调用<code>i.Unpack()</code>开始解压,</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cmd/ctr/commands/images/pull.go</span></span><br><span class=\"line\">Action: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *cli.Context)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// 省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">img, err := content.Fetch(ctx, client, ref, config)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p []ocispec.Platform</span><br><span class=\"line\">    <span class=\"keyword\">if</span> context.Bool(<span class=\"string\">&quot;all-platforms&quot;</span>) &#123;</span><br><span class=\"line\">      p, err = images.Platforms(ctx, client.ContentStore(), img.Target)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> errors.Wrap(err, <span class=\"string\">&quot;unable to resolve image platforms&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> _, s := <span class=\"keyword\">range</span> context.StringSlice(<span class=\"string\">&quot;platform&quot;</span>) &#123;</span><br><span class=\"line\">        ps, err := platforms.Parse(s)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> errors.Wrapf(err, <span class=\"string\">&quot;unable to parse platform %s&quot;</span>, s)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = <span class=\"built_in\">append</span>(p, ps)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(p) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      p = <span class=\"built_in\">append</span>(p, platforms.DefaultSpec())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    start := time.Now()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, platform := <span class=\"keyword\">range</span> p &#123;</span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">&quot;unpacking %s %s...\\n&quot;</span>, platforms.Format(platform), img.Target.Digest)</span><br><span class=\"line\">      i := containerd.NewImageWithPlatform(client, img, platforms.Only(platform))</span><br><span class=\"line\"></span><br><span class=\"line\">      err = i.Unpack(ctx, context.String(<span class=\"string\">&quot;snapshotter&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> context.Bool(<span class=\"string\">&quot;print-chainid&quot;</span>) &#123;</span><br><span class=\"line\">        diffIDs, err := i.RootFS(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">        chainID := identity.ChainID(diffIDs).String()</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;image chain ID: %s\\n&quot;</span>, chainID)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;done: %s\\t\\n&quot;</span>, time.Since(start))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先获取一个lease,然后执行opt传参</li>\n<li>调用<code>i.getManifest()</code>获取manifest，调用<code>i.getLayers()</code>获取layers</li>\n<li>申明一个<code>DiffService</code>和<code>ContentStore</code>以及一个<code>snapshotter</code></li>\n<li>遍历layers,开始调用<code>rootfs.ApplyLayerWithOpts</code>开始对每一层进行解压</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// image.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i *image)</span></span> Unpack(ctx context.Context, snapshotterName <span class=\"type\">string</span>, opts ...UnpackOpt) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  ctx, done, err := i.client.WithLease(ctx)</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> done(ctx)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> config UnpackConfig</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, o := <span class=\"keyword\">range</span> opts &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := o(ctx, &amp;config); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  manifest, err := i.getManifest(ctx, i.platform)</span><br><span class=\"line\"></span><br><span class=\"line\">  layers, err := i.getLayers(ctx, i.platform, manifest)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    a  = i.client.DiffService()</span><br><span class=\"line\">    cs = i.client.ContentStore()</span><br><span class=\"line\"></span><br><span class=\"line\">    chain    []digest.Digest</span><br><span class=\"line\">    unpacked <span class=\"type\">bool</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  snapshotterName, err = i.client.resolveSnapshotterName(ctx, snapshotterName)</span><br><span class=\"line\"></span><br><span class=\"line\">  sn, err := i.client.getSnapshotter(ctx, snapshotterName)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> config.CheckPlatformSupported &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := i.checkSnapshotterSupport(ctx, snapshotterName, manifest); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, layer := <span class=\"keyword\">range</span> layers &#123;</span><br><span class=\"line\">    unpacked, err = rootfs.ApplyLayerWithOpts(ctx, layer, chain, sn, a, config.SnapshotOpts, config.ApplyOpts)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> unpacked &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Set the uncompressed label after the uncompressed</span></span><br><span class=\"line\">      <span class=\"comment\">// digest has been verified through apply.</span></span><br><span class=\"line\">      cinfo := content.Info&#123;</span><br><span class=\"line\">        Digest: layer.Blob.Digest,</span><br><span class=\"line\">        Labels: <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">          <span class=\"string\">&quot;containerd.io/uncompressed&quot;</span>: layer.Diff.Digest.String(),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> _, err := cs.Update(ctx, cinfo, <span class=\"string\">&quot;labels.containerd.io/uncompressed&quot;</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    chain = <span class=\"built_in\">append</span>(chain, layer.Diff.Digest)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  desc, err := i.i.Config(ctx, cs, i.platform)</span><br><span class=\"line\"></span><br><span class=\"line\">  rootfs := identity.ChainID(chain).String()</span><br><span class=\"line\"></span><br><span class=\"line\">  cinfo := content.Info&#123;</span><br><span class=\"line\">    Digest: desc.Digest,</span><br><span class=\"line\">    Labels: <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">      fmt.Sprintf(<span class=\"string\">&quot;containerd.io/gc.ref.snapshot.%s&quot;</span>, snapshotterName): rootfs,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _, err = cs.Update(ctx, cinfo, fmt.Sprintf(<span class=\"string\">&quot;labels.containerd.io/gc.ref.snapshot.%s&quot;</span>, snapshotterName))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这里会请求snapshot的Stst()查看状态，通过判断错误是不是已存在来决定是否进行下一步，若一切没问题则调用<code>applyLayers()</code>正式解压</li>\n<li>这里需要注意这个<code>chainID</code>,chainID是通过每个layer的<code>sha256(sha256+sha256)</code>计算得来，其中这些sha256就是config类型的layer中<code>diff_ids</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// rootfs/apply.go</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ApplyLayerWithOpts applies a single layer on top of the given provided layer chain,</span></span><br><span class=\"line\"><span class=\"comment\">// using the provided snapshotter, applier, and apply opts. If the layer was unpacked true</span></span><br><span class=\"line\"><span class=\"comment\">// is returned, if the layer already exists false is returned.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ApplyLayerWithOpts</span><span class=\"params\">(ctx context.Context, layer Layer, chain []digest.Digest, sn snapshots.Snapshotter, a diff.Applier, opts []snapshots.Opt, applyOpts []diff.ApplyOpt)</span></span> (<span class=\"type\">bool</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    chainID = identity.ChainID(<span class=\"built_in\">append</span>(chain, layer.Diff.Digest)).String()</span><br><span class=\"line\">    applied <span class=\"type\">bool</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> _, err := sn.Stat(ctx, chainID); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !errdefs.IsNotFound(err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>, errors.Wrapf(err, <span class=\"string\">&quot;failed to stat snapshot %s&quot;</span>, chainID)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := applyLayers(ctx, []Layer&#123;layer&#125;, <span class=\"built_in\">append</span>(chain, layer.Diff.Digest), sn, a, opts, applyOpts); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> !errdefs.IsAlreadyExists(err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>, err</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      applied = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> applied, <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>主要发送请求<code>snapshots.Prepare()</code>接口,获取到<code>mount</code>作为参数请求apply参数,随后<code>snapshots.Commit()</code></li>\n<li>到此整个解压完成</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">applyLayers</span><span class=\"params\">(ctx context.Context, layers []Layer, chain []digest.Digest, sn snapshots.Snapshotter, a diff.Applier, opts []snapshots.Opt, applyOpts []diff.ApplyOpt)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> (</span><br><span class=\"line\">    parent  = identity.ChainID(chain[:<span class=\"built_in\">len</span>(chain)<span class=\"number\">-1</span>])</span><br><span class=\"line\">    chainID = identity.ChainID(chain)</span><br><span class=\"line\">    layer   = layers[<span class=\"built_in\">len</span>(layers)<span class=\"number\">-1</span>]</span><br><span class=\"line\">    diff    ocispec.Descriptor</span><br><span class=\"line\">    key     <span class=\"type\">string</span></span><br><span class=\"line\">    mounts  []mount.Mount</span><br><span class=\"line\">    err     <span class=\"type\">error</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    key = fmt.Sprintf(snapshots.UnpackKeyFormat, uniquePart(), chainID)<span class=\"comment\">// 生成请求的key格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Prepare snapshot with from parent, label as root</span></span><br><span class=\"line\">    mounts, err = sn.Prepare(ctx, key, parent.String(), opts...)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> errdefs.IsNotFound(err) &amp;&amp; <span class=\"built_in\">len</span>(layers) &gt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err := applyLayers(ctx, layers[:<span class=\"built_in\">len</span>(layers)<span class=\"number\">-1</span>], chain[:<span class=\"built_in\">len</span>(chain)<span class=\"number\">-1</span>], sn, a, opts, applyOpts); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> !errdefs.IsAlreadyExists(err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> err</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Do no try applying layers again</span></span><br><span class=\"line\">        layers = <span class=\"literal\">nil</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> errdefs.IsAlreadyExists(err) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Try a different key</span></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Already exists should have the caller retry</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> errors.Wrapf(err, <span class=\"string\">&quot;failed to prepare extraction snapshot %q&quot;</span>, key)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> !errdefs.IsAlreadyExists(err) &#123;</span><br><span class=\"line\">        log.G(ctx).WithError(err).WithField(<span class=\"string\">&quot;key&quot;</span>, key).Infof(<span class=\"string\">&quot;apply failure, attempting cleanup&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> rerr := sn.Remove(ctx, key); rerr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.G(ctx).WithError(rerr).WithField(<span class=\"string\">&quot;key&quot;</span>, key).Warnf(<span class=\"string\">&quot;extraction snapshot removal failed&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">  diff, err = a.Apply(ctx, layer.Blob, mounts, applyOpts...)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    err = errors.Wrapf(err, <span class=\"string\">&quot;failed to extract layer %s&quot;</span>, layer.Diff.Digest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> diff.Digest != layer.Diff.Digest &#123;</span><br><span class=\"line\">    err = errors.Errorf(<span class=\"string\">&quot;wrong diff id calculated on extraction %q&quot;</span>, diff.Digest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> err = sn.Commit(ctx, chainID.String(), key, opts...); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    err = errors.Wrapf(err, <span class=\"string\">&quot;failed to commit snapshot %s&quot;</span>, key)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>回到Unpack这里获取镜像的config通过chan计算出id并更新到content的标签中</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i *image)</span></span> Unpack(ctx context.Context, snapshotterName <span class=\"type\">string</span>, opts ...UnpackOpt) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  desc, err := i.i.Config(ctx, cs, i.platform)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  rootfs := identity.ChainID(chain).String()</span><br><span class=\"line\"></span><br><span class=\"line\">  cinfo := content.Info&#123;</span><br><span class=\"line\">    Digest: desc.Digest,</span><br><span class=\"line\">    Labels: <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">      fmt.Sprintf(<span class=\"string\">&quot;containerd.io/gc.ref.snapshot.%s&quot;</span>, snapshotterName): rootfs,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  _, err = cs.Update(ctx, cinfo, fmt.Sprintf(<span class=\"string\">&quot;labels.containerd.io/gc.ref.snapshot.%s&quot;</span>, snapshotterName))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"chanid计算\"><a href=\"#chanid计算\" class=\"headerlink\" title=\"chanid计算\"></a>chanid计算</h5><ul>\n<li>下面这个diff_ids是从镜像uhub.service.ucloud.cn&#x2F;library&#x2F;nginx:1.9.7中的config截取</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;linux&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;rootfs&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;layers&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;diff_ids&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;sha256:12e469267d21d66ac9dcae33a4d3d202ccb2591869270b95d0aad7516c7d075b&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;sha256:031458dc7254bd4da9c9ca8186b60aef311d0c921a846c6d2b281779035e2c7c&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;sha256:ebfc3a74f1601ad380e5e5a09738e952a5f86861a24e6efc00d0e03c0bd47d93&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;sha256:673cf6d9dedba7cfb37ebd2c06f2373d16a29504976ca7e40335fb53e81cab16&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;sha256:40f240c1cbdb8a32ef21e2ec9154e65cc84027f238e453d69a7bb33246d6890b&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;sha256:0b3fbb980e2d51043bd23f9af674a536225fe023605cc485bac77dbb6111b433&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"string\">&quot;sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>如果只有一层的话就是自己</p>\n</li>\n<li><p>拿第一层的sha256的值加上空格加上第二层的sha256的值然后使用sha256,我们发现结果是<code>a8118485e4e7548235fa8a00da06ecc21b31dea6bf5a7dd2eed99b47f70ed000</code></p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo -n &quot;sha256:12e469267d21d66ac9dcae33a4d3d202ccb2591869270b95d0aad7516c7d075b sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&quot; |shasum -a 256</span><br><span class=\"line\">eb0cfd964b3fe37432b0bb666bd537ca1ea730cf517eb2d0d3783b952ad10204  -</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同样用上一层的chan_id加上第三层的id</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo -n &quot;sha256:eb0cfd964b3fe37432b0bb666bd537ca1ea730cf517eb2d0d3783b952ad10204 sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef&quot; |shasum -a 256</span><br><span class=\"line\">a8118485e4e7548235fa8a00da06ecc21b31dea6bf5a7dd2eed99b47f70ed000  -</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>我们可以验证下,使用<a href=\"https://github.com/br0xen/boltbrowser\">boltbrowser</a>打开位于在<code>/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/metadata.db</code>的snap的数据库，如下图所示符合预期</li>\n</ul>\n<p><img src=\"/../images/containerd-8.png\" alt=\"Alt text\"></p>\n<ul>\n<li>所谓diff_id是当前层和父层的变化,将所有的diff_id组合起来就是一个我们在dockerfile中编写的镜像</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><pre><code class=\"highlight mermaid\">sequenceDiagram\n    autonumber\n    participant hub as 仓库\n    participant client as 客户端\n    participant diff as diff-service\n    participant content as content-service\n    participant snapshotter as snapshotter-service\n    participant image as image-service\n\n    client-&gt;&gt;hub:获取镜像index\n    client-&gt;&gt;content:存储index信息(content.Writer)\n    client-&gt;&gt;hub:获取manifests\n    client-&gt;&gt;content:存储manifests信息(content.Writer)\n    client-&gt;&gt;hub:获取config\n    client-&gt;&gt;content:存储manifests信息(content.Writer)\n\n    loop 保存所有的layers\n    client-&gt;&gt;hub:下载镜像\n    client-&gt;&gt;content:获取状态(content.Status)\n    client-&gt;&gt;content:写入layer(content.Writer)\n    client-&gt;&gt;content:提交layer(content.Commit)\n    client-&gt;&gt;content:读取元信息(content.ReadAt)\n    end\n    client-&gt;&gt;image:创建镜像(image.Create)\n    #client-&gt;&gt;image:创建镜像(如果已经存在)(image.Update)\n\n    loop 遍历layer解压缩到snapshot\n    client-&gt;&gt;snapshotter:获取snap状态判断是否已存在(snapper.Status)\n    client-&gt;&gt;snapshotter:创建snap(snapper.Prepare)\n    client-&gt;&gt;diff:apply layer(diff.Apply)\n    diff-&gt;&gt;content:读取layers(content.ReaderAt)\n    diff-&gt;&gt;diff:写入解压后的layers(路径是prepare给的)\n    client-&gt;&gt;snapshotter:提交快照\n    end</code></pre>\n\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://blog.csdn.net/alex_yangchuansheng/article/details/111829103\">https://blog.csdn.net/alex_yangchuansheng/article/details/111829103</a><br><a href=\"https://www.myway5.com/index.php/2021/05/24/containerd-storage\">https://www.myway5.com/index.php/2021/05/24/containerd-storage</a><br><a href=\"https://www.myway5.com/index.php/2021/05/18/container-image\">https://www.myway5.com/index.php/2021/05/18/container-image</a><br><a href=\"https://www.myway5.com/index.php/2021/05/24/containerd-storage/\">https://www.myway5.com/index.php/2021/05/24/containerd-storage/</a><br><a href=\"https://github.com/containerd/containerd/blob/main/docs/content-flow.md\">https://github.com/containerd/containerd/blob/main/docs/content-flow.md</a><br><a href=\"https://blog.csdn.net/weixin_40864891/article/details/107330218\">https://blog.csdn.net/weixin_40864891/article/details/107330218</a></p>\n","tags":["k8s","containerd"]},{"title":"gitlab部署配置","url":"/2023/11/23/gitlab%E9%83%A8%E7%BD%B2%E7%BB%B4%E6%8A%A4/","content":"<p>gitlab是一个功能非常强大的私有化git仓库</p>\n<span id=\"more\"></span>\n\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><ul>\n<li>yum安装</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y curl policycoreutils-python openssh-server</span><br><span class=\"line\">systemctl enable sshd</span><br><span class=\"line\">systemctl start sshd</span><br><span class=\"line\">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</span><br><span class=\"line\">yum install -y gitlab-ce</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h4><h4 id=\"设置定时备份\"><a href=\"#设置定时备份\" class=\"headerlink\" title=\"设置定时备份\"></a>设置定时备份</h4><ul>\n<li>crobjob设置定时备份</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">0 23 * * * /opt/gitlab/bin/gitlab-backup create SKIP=builds,artifacts,lfs,terraform_state</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置备份保留时间\"><a href=\"#设置备份保留时间\" class=\"headerlink\" title=\"设置备份保留时间\"></a>设置备份保留时间</h4><ul>\n<li>保留三天</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\">gitlab_rails[<span class=\"string\">&#x27;backup_keep_time&#x27;</span>] = <span class=\"number\">259200</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"备份到挂载在本地的存储\"><a href=\"#备份到挂载在本地的存储\" class=\"headerlink\" title=\"备份到挂载在本地的存储\"></a>备份到挂载在本地的存储</h4><ul>\n<li>修改配置文件，&#x2F;mnt&#x2F;nfs为nfs挂载点</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\">gitlab_rails[<span class=\"string\">&#x27;backup_upload_connection&#x27;</span>] = &#123;</span><br><span class=\"line\">  <span class=\"symbol\">:provider</span> =&gt; <span class=\"string\">&#x27;Local&#x27;</span>,</span><br><span class=\"line\">  <span class=\"symbol\">:local_root</span> =&gt; <span class=\"string\">&#x27;/mnt/nfs&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">gitlab_rails[<span class=\"string\">&#x27;backup_upload_remote_directory&#x27;</span>] = <span class=\"string\">&#x27;gitlab-backups&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行<code>gitalb-ctl reconfigure</code>生效</li>\n</ul>\n<h4 id=\"还原\"><a href=\"#还原\" class=\"headerlink\" title=\"还原\"></a>还原</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl stop puma</span><br><span class=\"line\">sudo gitlab-ctl stop sidekiq</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Verify</span></span><br><span class=\"line\">sudo gitlab-ctl status</span><br><span class=\"line\"></span><br><span class=\"line\">gitlab-backup restore BACKUP=1684312462_2023_05_17_14.9.5</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"升级\"><a href=\"#升级\" class=\"headerlink\" title=\"升级\"></a>升级</h4><ul>\n<li><p>查看升级计划 <a href=\"https://docs.gitlab.com/ee/update/index.html#upgrade-paths\">https://docs.gitlab.com/ee/update/index.html#upgrade-paths</a></p>\n</li>\n<li><p>根据升级计划下载中间版本和目标版本的二进制文件<a href=\"https://packages.gitlab.com/gitlab/gitlab-ce\">https://packages.gitlab.com/gitlab/gitlab-ce</a></p>\n</li>\n<li><p>gitlab各个版本发行说明<a href=\"https://about.gitlab.com/releases/categories/releases/\">https://about.gitlab.com/releases/categories/releases/</a></p>\n</li>\n</ul>\n<p>注意14版本以上增加了后台迁移任务，后台迁移任务未跑完成时升级会报错 <a href=\"https://docs.gitlab.com/ee/update/index.html#batched-background-migrations\">https://docs.gitlab.com/ee/update/index.html#batched-background-migrations</a></p>\n<ul>\n<li>下载并安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget --content-disposition https://packages.gitlab.com/gitlab/gitlab-ce/packages/el/7/gitlab-ce-13.12.12-ce.0.el7.x86_64.rpm/download.rpm</span><br><span class=\"line\">yum -y install gitlab-ce-13.12.12-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"gitalb-pages\"><a href=\"#gitalb-pages\" class=\"headerlink\" title=\"gitalb-pages\"></a>gitalb-pages</h4><ul>\n<li>设置pages的地址，不要和gitlab的域名一致，dns是是泛域名解析到gitlab服务器</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\">pages_external_url <span class=\"string\">&quot;http://pages.example.com/&quot;</span></span><br><span class=\"line\">gitlab_pages[<span class=\"string\">&#x27;enable&#x27;</span>] = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pages:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mkdir</span> <span class=\"string\">.public</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cp</span> <span class=\"string\">-r</span> <span class=\"string\">*</span> <span class=\"string\">.public</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mv</span> <span class=\"string\">.public</span> <span class=\"string\">public</span></span><br><span class=\"line\">  <span class=\"attr\">artifacts:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">public</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>测试<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","tags":["gitlab"]},{"title":"gomod使用私有仓库","url":"/2023/04/11/gomod%E4%BD%BF%E7%94%A8%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/","content":"<p>在工作中我们有些mod是放在gitlab中的且一般是有认证的这里记录下解决办法</p>\n<span id=\"more\"></span>\n\n<h3 id=\"私有仓库设置\"><a href=\"#私有仓库设置\" class=\"headerlink\" title=\"私有仓库设置\"></a>私有仓库设置</h3><blockquote>\n<p>都可以通过<code>,</code>来设置多个</p>\n</blockquote>\n<ul>\n<li>告诉go那些仓库是私有仓库</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env -w GOPRIVATE=&quot;git@git.example.com&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>告诉go私有仓库不走goproxy代理</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env -w GONOPROXY=&quot;git.example.com&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>告诉go这个仓库的不用验证CA</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env -w GOINSECURE=&quot;git.example.com&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置不做校验的仓库</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">go env -w GONOSUMDB=&quot;git.example.com&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用gitlab-token认证\"><a href=\"#使用gitlab-token认证\" class=\"headerlink\" title=\"使用gitlab token认证\"></a>使用gitlab token认证</h4><ul>\n<li><p>原理其实就是替换下git的链接将普通的链接替换成可以认证的链接</p>\n</li>\n<li><p>token在gitlab的项目–&gt;设置–&gt;访问令牌，添加一个只读的即可</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将go默认访问的替换成通过token认证的链接以达到认证的目的</span></span><br><span class=\"line\">git config --global url.&quot;https://oauth2:$TOKEN@git.example.com/lib/utils.git&quot;.insteadOf &quot;https://git.example.com/lib/utils.git&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用gitlab-ssh认证\"><a href=\"#使用gitlab-ssh认证\" class=\"headerlink\" title=\"使用gitlab ssh认证\"></a>使用gitlab ssh认证</h4><ul>\n<li>这里将https的请求换成ssh请求，需要注意的是本地的公钥需要提前加入到gitalb中</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global url.&quot;git@git.example.com:lib/utils.git&quot;.insteadOf &quot;https://git.example.com/lib/utils.git&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">另一种写法</span></span><br><span class=\"line\">git config --global url.&quot;ssh://git@git.example.com:lib/utils.git&quot;.insteadOf &quot;https://git.example.com/lib/utils.git&quot;</span><br></pre></td></tr></table></figure>\n","tags":["gomod"]},{"title":"go环境变量","url":"/2020/09/14/go%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/","content":"<p>go 有很多的环境变量记录一下常用的变量</p>\n<span id=\"more\"></span>\n\n<h4 id=\"查看环境变量\"><a href=\"#查看环境变量\" class=\"headerlink\" title=\"查看环境变量\"></a>查看环境变量</h4><ul>\n<li><p>go env 查看所有变量</p>\n</li>\n<li><p>go env xxx 查看执行环境变量</p>\n</li>\n<li><p>go help environment 查看各个环境变量的作用</p>\n</li>\n</ul>\n<h4 id=\"修改环境变量\"><a href=\"#修改环境变量\" class=\"headerlink\" title=\"修改环境变量\"></a>修改环境变量</h4><ul>\n<li><p>go 1.13以上推荐使用 go env -w NAME&#x3D;VALUE 来设置环境变量</p>\n</li>\n<li><p>go env -w 设置的变量根据<code>os.UserConfigDir()</code>返回的值来确定存在哪</p>\n<ul>\n<li>Linux在$HOME&#x2F;.config</li>\n<li>Darwin在$HOME&#x2F;Library&#x2F;Application Support</li>\n<li>Windows在%AppData%</li>\n</ul>\n</li>\n<li><p>go 1.13以下使用export NAME&#x3D;VALUE 写profile来设置，如.bashrc,.zshrc等</p>\n</li>\n</ul>\n<h4 id=\"常用变量说明\"><a href=\"#常用变量说明\" class=\"headerlink\" title=\"常用变量说明\"></a>常用变量说明</h4><table>\n<thead>\n<tr>\n<th>环境变量</th>\n<th>说明</th>\n<th>默认</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GOROOT</td>\n<td>go的安装位置</td>\n<td>&#x2F;usr&#x2F;local&#x2F;bin</td>\n<td>-</td>\n</tr>\n<tr>\n<td>GOARCH</td>\n<td>架构类型</td>\n<td>当前机器架构类型</td>\n<td>-</td>\n</tr>\n<tr>\n<td>GOOS</td>\n<td>编译出文件的类型</td>\n<td>当前系统</td>\n<td>通过改变GOOS来设置交叉编译</td>\n</tr>\n<tr>\n<td>GOPATH</td>\n<td>go的项目存放目录</td>\n<td>$HOME&#x2F;go</td>\n<td>在没使用gomod的时候安装的代码就存放在此</td>\n</tr>\n<tr>\n<td>GOBIN</td>\n<td><code>go instlal</code>安装的文件目录</td>\n<td>-</td>\n<td>一般将此目录加入PATH,<code>export PATH=$PATH:$GOBIN&gt;$HOME/.zshrc</code></td>\n</tr>\n<tr>\n<td>GO111MODULE</td>\n<td>go mod 开关</td>\n<td>自动</td>\n<td>-</td>\n</tr>\n<tr>\n<td>GOPROXY</td>\n<td>go mod的代理地址</td>\n<td>-</td>\n<td><a href=\"https://goproxy.cn,https//mirrors.aliyun.com/goproxy/,https://goproxy.io,direct\">https://goproxy.cn,https://mirrors.aliyun.com/goproxy/,https://goproxy.io,direct</a></td>\n</tr>\n</tbody></table>\n","tags":["go"]},{"title":"go资源内嵌embed","url":"/2021/03/19/go%E8%B5%84%E6%BA%90%E5%86%85%E5%B5%8Cembed/","content":"<p>Go官方在1.16版本发布了官方内嵌资源到二进制的功能，使得部署更加简单</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>在开发web的时候往往会有一些web文件，而部署的时候需要部署一个二进制还要部署web文件比较繁琐，在go1.16之前也有很多包实现了内嵌资源文件到二进制中如<a href=\"https://github.com/gobuffalo/packr\">https://github.com/gobuffalo/packr</a>，而如今go官方实现了这个特性</p>\n</blockquote>\n<h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t_ <span class=\"string\">&quot;embed&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//go:embed Dockerfile</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f <span class=\"type\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(f)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子就是将当前目录的dockerfile内容内嵌到变量f中,编译之后即使这个文件不存在也能打印出内容</p>\n<h4 id=\"嵌入文件夹\"><a href=\"#嵌入文件夹\" class=\"headerlink\" title=\"嵌入文件夹\"></a>嵌入文件夹</h4><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;embed&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;path/filepath&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//go:embed foo</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs embed.FS</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    files, err := fs.ReadDir(<span class=\"string\">&quot;foo&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        fmt.Println(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, file := <span class=\"keyword\">range</span> files &#123;</span><br><span class=\"line\">        d, _ := fs.ReadFile(filepath.Join(<span class=\"string\">&quot;foo&quot;</span>, file.Name()))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            fmt.Println(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;文件名:&quot;</span>, file.Name(), <span class=\"string\">&quot;内容:&quot;</span>, <span class=\"type\">string</span>(d))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上面的代码将目录下的foo目录内嵌到fs这个变量中，然后打印出这个文件夹里文字的名字和内容</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">tree foo</span> </span><br><span class=\"line\">foo</span><br><span class=\"line\">├── test</span><br><span class=\"line\">└── test2</span><br><span class=\"line\"></span><br><span class=\"line\">0 directories, 2 files</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">go build -o <span class=\"built_in\">test</span> .</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">./test</span>                </span><br><span class=\"line\">文件名: test 内容: hahah</span><br><span class=\"line\">文件名: test2 内容: testest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><ul>\n<li>路径默认是从mod的目录为根目录</li>\n<li>会忽略”.“开头和”_“开头的文件</li>\n<li>不管是win还是linux都使用”&#x2F;“</li>\n<li>支持匹配如，<code>//go:embed foo/*.yaml</code></li>\n<li>可以同时导入多个目录 如<code>//go:embed foo test</code></li>\n</ul>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.cnblogs.com/apocelipes/p/13907858.html\">https://www.cnblogs.com/apocelipes/p/13907858.html</a></p>\n","tags":["go"]},{"title":"gitlab升级之后gitlab-page404","url":"/2022/08/13/gitlab%E5%8D%87%E7%BA%A7%E4%B9%8B%E5%90%8Egitlab-page404/","content":"<p>记一次升级gitlab导致的gitlab page 404</p>\n<span id=\"more\"></span>\n\n<h4 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h4><p>公司gitlab每年都会升级上个大版本的最后一个小版本，按着计划本次从gitlab 13.12.12 升级到14.10.5，按着官方的升级计划升级到14.10.5是:<br>13.12.15 &#x3D;&gt; 14.0.12 &#x3D;&gt; 14.3.6 &#x3D;&gt; 14.6.2 &gt; 14.9.5 -&gt; 14.10.5<br>像往常一样准备所需要的安装包,发通知坐等夜晚十点的升级，开始了毕业之后最难查的bug。。。</p>\n<h4 id=\"经过\"><a href=\"#经过\" class=\"headerlink\" title=\"经过\"></a>经过</h4><p>当晚十点按计划先升级到<code>13.12.15</code>,打开用<code>gitab page</code>部署的wiki,查看之前写的gitlab升级，备份了一下<code>gitlab.rb</code>和<code>gitlab-secrets.json</code>，<br>在熟悉的yum确认界面下了y，gitlab开始执行升级随后在等了几分钟之后显示升级成功，打开gitlab先开始是502过会就正常了</p>\n<p>于是继续升级到gitlab14这个大版本，同样执行了升级命令，然后报错检查未过查看报错大概意思是<code>unicorn[xxx]</code>参数不再支持unicorn，于是搜索了下gitlab14不在支持unicorn<br>改为<code>puma</code>,夜晚不太想查对应的字段且这些都是优化项于是直接注释了，再次执行<code>yum install xxx</code>但是还是报错。然后又试了几次还是报这个错误，仔细看了配置文件unicorn的配置已经被我注释了，为啥还是报这个错了呢，稍微思索了一会突然想到了gitlab.rb这个配置文件修改之后要执行<code>gitlab-ctl reconfigure</code>才生效，执行之后再次升级果然没有报错了<br>同样的等了几分钟之后界面打开了。14版本新增了后台数据库迁移任务在迁移任务没没有完成再升级下个把版本会报错的，所以赶紧使用管理员账号看下后台任务，发现才完成2个还有10来个任务且进度很慢果然和预期的一样是没法一下子升级到目标版本的，遂检查下git clone git push等功能,发现没问题</p>\n<p>准备睡觉但是好巧不求随手点了下打开的wiki，然后wiki就404了。。。<img src=\"/../images/gitlab-troubleshooting-1.png\" alt=\"x\"><br>开始以为是刚升级完导致的，于是手动刷新了几次还是404此时心里有点纳闷，我都没更改gitlab的配置为什么会404，然后冷静一下首先此问题不是大问题gitlab重要功能没问题，然后对可能出问题的地方进行了一下分析，我只是注释了<code>unicorn</code>的一些配置其次14版本的后台字段升级会不会影响，于是查找了<code>unicorn</code>对应<code>puma</code>配置，修改完成之后重新reconfigure一下，重新打开wiki界面发现还是404。。。那么此时就有可能是14版本的后台迁移任务导致的，查看了下升级任务才玩跑2个第三个还很慢估计得第二天了，但是心里隐隐约约觉得这俩应该没啥关系，于是试探性的查看了下gitlab的nginx日志，发现里面有301返回的日志，此时企信群里有同事已经再说为啥gitlab page打不开了(真卷当时都11点多了)，我没有找到原因就没回他，于是继续顺着301这条线索找，</p>\n<p>开始怀疑是gitlab-pages服务返回了个301于是<code>gitlab-ctl tail gitlab-pages</code>查看了下gilab-page服务的日志，然后发现没日志。。。查看配置文件原来gitlab-pges的日志文件修改了,于是去了日志目录，从我升级之后日志就没了此时怀疑是gitlab-page服务是不是升级之后有问题。变在浏览器刷新wiki变来查看ngixn和pages日志，随后有报错502，在nginx日志显示是<code>connection refused</code>大概意思,发现解析出来的locahost是ipv6的而gitlab-page是监听的ipv4，手动调用下确实，于是将gitlab-page改为监听ipv6<br>测试一下界面还是404，随后一番操作时候发现和gitlab监听的地址关系不大，又改回监听ipv4，用curl测试<code>curl localhost:8090</code>有响应。百思不得其解。在晚上搜索了一番也么结果。此时已经凌晨一点半左右，于是没办法只能先睡觉了，在床上依然很纳闷，我明明没动gitlab-page相关配置为啥会出问题。</p>\n<p>第二天上午到公司之后和同事交流了一下问题，她也加入处理问题。在企信群里通知所有人gitlab-page有问题我们再看了，并建立一个相关故障群同步处理情况。做完这些之后我们就开始了处理，她按我提供的情况查了一下未发现问题，唯一的有价值的是gitlab-page升级之后存储方式有变化变成了zipfs，需要迁移。于是执行了一下迁移返回的job是0，也就是说不需要迁移，此时我们查看了gitlab的架构图，觉得可能是nginx的问题，我们一起看了nginx的配置文件没发现啥问题，加上这个nginx文件是gitlab.rb生成的。</p>\n<p><img src=\"/../images/gitlab-architecture_simplified_v14_9.png\" alt=\"x\"></p>\n<p>中午吃完饭之后，下午我俩分工，我重新部署一套环境来对比，她继续调查gitlab-page的问题。我咋经过一波折腾时候成功在测试环境上访问到了我做测试的page界面，而她那边发现的更多，比如<a href=\"https://docs.gitlab.com/14.10/ee/administration/pages/index.html#wildcard-domains-with-tls-support\">https://docs.gitlab.com/14.10/ee/administration/pages/index.html#wildcard-domains-with-tls-support</a>https导致的在经过一波操作测试还是不行，<br>还有这个issues下的所有方法<a href=\"https://gitlab.com/gitlab-org/gitlab/-/issues/331699\">https://gitlab.com/gitlab-org/gitlab/-/issues/331699</a>我们都是尝试了还是404，有点沮丧，此时一下午过得差不多了快要下班了。于是我想先回复一下业务，用go写一个web服务先临时替代一下gitlab-page。但是同事觉得直接用最简单的nginx好了，这里说下gitlab的page其实就是返回一个有规则的目录里的配置文件,于是尝试用nginx实现这个规则发现不行，同时领导也过来问了问帮我们叫来了另一个同事来写ningx，折腾了一个小时之后我们放弃了于是先下班了。满脑子都是404</p>\n<p>第二天上午到公司之后继续折腾那个nginx规则，同事则去培训了，然后发现不是不自动跳转就是找不到文件404，在快到中午时我放弃了，使用go配置gin实现了一下，很快就实现了除了一些路径稍微还有些问题，中午吃饭完之后三下午五除二就搞定了，将端口改为8080其他的和gitlab-page规则一致，自己测量下久违的界面出来了终于不是404😄，在群里发了通告。就开始处理问题了。在经过一波分析之后我还是觉得要不是nginx有问题要不就是gitlab-page有问题亦或者是认证有问题导致的跳转异常，于是我查看了gitalb-page的源码发现认证实际上在page上也有处理，于是直接停止了gitlab-page服务，手动在用命令行执行gitlab-page，在此测试发现gitlab-page的日志压根就没日志。那么这就可以百分之百确认是nginx的问题了，将nginx中转发gitlab-page的<code>cat /var/opt/gitlab/nginx/conf/gitlab-pages.conf</code>的<code>proxy_pass http://localhost:8090;</code>这一行注释，在他的前面增加了<code>return 200 &quot;test&quot;</code>来确认请求到了这里，测试之后浏览器并没后返回”test”字样，那么可以确认没有转发到这里！于是琢磨为啥流量没到这里。<br>同时通过网页f12查看第一个请求，其响应了301发现响应服务器为nginx，于是使用301作为关键字在<code>/var/opt/gitlab/nginx/conf</code>查找，发现了下面这一句</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">grep -r -n &quot;301&quot; *</span><br><span class=\"line\">gitlab-http.conf:43:    return 301 https://git.example.com:443$request_uri;</span><br></pre></td></tr></table></figure>\n\n<p>于是发现这个是80跳转到443的配置，既常见的访问80自动跳转到http的443配置，但是这行监听的是gitlab的配置不是gitlab page的配置，但是我还是注释了此行进行测试，在浏览器测试之后发现界面由gitlab的404变成了nginx的404，也就是说<code>这行对本不是由他处理的gitab page产生了作用</code></p>\n<p><img src=\"/../images/gitlab-troubleshooting-2.png\" alt=\"x\"></p>\n<p>但是这只是解释了为啥跳转没解释路由问题，查看了gitla page的配置文件时发现一个奇怪的配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">server_name</span>  ~^(?&lt;group&gt;.*)\\.page\\.example\\.com$;</span><br></pre></td></tr></table></figure>\n\n<p>这推测意思是只要是<code>group</code>这个组的并且下都是为此gitlab-page匹配的由gitlab-page这个配置文件的内容来处理，我开始以为这个group是nginx的变量之类的gitlab通过某种方式传入到了nginx当中，导致nginx没有匹配到此，所以我就问了公司比较熟悉nginx的同事,在咨询了他时候他说这个group其实是变量赋值，也就说说.page前面的字符串给了<code>group</code>这个变量，<br>遂邀请他来我工位上一起看下，简单说了下我的发现他看了下配置文件，我复盘了一下我的发现。 随后他说将在page的配置文件上添加一下listen参数，将信将疑的问他会是这个导致的吗，他说他遇到ipv4和ipv6监听不一致导致的路由失效，于是添加了下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">listen 192.168.1.1:80;</span><br><span class=\"line\">listen [::]:80;</span><br></pre></td></tr></table></figure>\n\n<p>添加完成之后重启，发现还是这个样子。他说估计是缓存，于是我换了个浏览器，久违的界面终于出来。不再是那个讨厌的404了</p>\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><p>由于nginx的配置是生成的所以需要修改gitlab.rb的配置才行只需要将page的nignx也监听ipv6即可</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"code\"><pre><span class=\"line\">pages_nginx[<span class=\"string\">&#x27;listen_addresses&#x27;</span>] = [<span class=\"string\">&#x27;192.168.1.1&#x27;</span>, <span class=\"string\">&#x27;[::]&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h4><ul>\n<li>为什么老版本没有这个问题？</li>\n</ul>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://docs.gitlab.com/ee/development/architecture.html\">gitlab架构</a></p>\n","tags":["gitlab","故障处理"]},{"title":"haproxy使用","url":"/2023/08/22/haproxy%E4%BD%BF%E7%94%A8/","content":"<p><a href=\"https://www.haproxy.org/\">haproxy</a>是一个负载均衡程序支持L4和L7,和ipvs不同的是他的实现在用户空间</p>\n<span id=\"more\"></span>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y haproxy</span><br><span class=\"line\">systemc start haproxy</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><ul>\n<li><p>配置的路径为<code>/etc/haproxy/haproxy.cfg</code></p>\n</li>\n<li><p><code>global</code>为全局配置</p>\n</li>\n<li><p><code>defaults</code>则为默认配置</p>\n</li>\n<li><p><code>frontend backend listen</code>其中frontend和backend配合完成一个代理比较灵活，listen则比较方便直接能定义监听相关信息和后端地址</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">global # 全局配置</span><br><span class=\"line\">    log         127.0.0.1 local2</span><br><span class=\"line\"></span><br><span class=\"line\">    chroot      /var/lib/haproxy</span><br><span class=\"line\">    pidfile     /var/run/haproxy.pid</span><br><span class=\"line\">    maxconn     4000 # 最大连接数</span><br><span class=\"line\">    user        haproxy</span><br><span class=\"line\">    group       haproxy</span><br><span class=\"line\">    daemon # 以daemon方式运行</span><br><span class=\"line\"></span><br><span class=\"line\">    # turn on stats unix socket</span><br><span class=\"line\">    stats socket /var/lib/haproxy/stats</span><br><span class=\"line\">defaults # 默认参数</span><br><span class=\"line\">    mode                    http # 定义模式，http为7层，tcp则为4层</span><br><span class=\"line\">    log                     global</span><br><span class=\"line\">    option                  httplog</span><br><span class=\"line\">    option                  dontlognull</span><br><span class=\"line\">    option http-server-close</span><br><span class=\"line\">    option forwardfor       except 127.0.0.0/8</span><br><span class=\"line\">    option                  redispatch</span><br><span class=\"line\">    retries                 3</span><br><span class=\"line\">    timeout http-request    10s</span><br><span class=\"line\">    timeout queue           1m</span><br><span class=\"line\">    timeout connect         10s</span><br><span class=\"line\">    timeout client          1m</span><br><span class=\"line\">    timeout server          1m</span><br><span class=\"line\">    timeout http-keep-alive 10s</span><br><span class=\"line\">    timeout check           10s</span><br><span class=\"line\">    maxconn                 3000</span><br><span class=\"line\"></span><br><span class=\"line\">frontend  main *:5000 # 定义前端</span><br><span class=\"line\">    acl url_static       path_beg       -i /static /images /javascript /stylesheets # acl设置7层路径前缀匹配</span><br><span class=\"line\">    acl url_static       path_end       -i .jpg .gif .png .css .js # acl设置7层路径后缀匹配，还有正则匹配</span><br><span class=\"line\"></span><br><span class=\"line\">    use_backend static          if url_static # 符合url_static这个规则则使用static这个后端</span><br><span class=\"line\">    default_backend             app # 默认后端app</span><br><span class=\"line\"></span><br><span class=\"line\">backend static</span><br><span class=\"line\">    balance     roundrobin</span><br><span class=\"line\">    server      static 127.0.0.1:4331 check</span><br><span class=\"line\"></span><br><span class=\"line\">backend app # 后端app</span><br><span class=\"line\">    balance     roundrobin # 代理算法</span><br><span class=\"line\">    server  app1 10.7.112.201:80 check # 定义后端地址有很多个，check开启了健康检查</span><br><span class=\"line\"></span><br><span class=\"line\">listen stats    #定义监控页面，通过浏览器可以查看haproxy状态</span><br><span class=\"line\">    bind *:1080                   # 绑定端口1080</span><br><span class=\"line\">    stats refresh 30s             # 每30秒更新监控数据</span><br><span class=\"line\">    stats uri /stats              # 访问监控页面的uri</span><br><span class=\"line\">    stats realm HAProxy Stats     # 监控页面的认证提示</span><br><span class=\"line\">    stats auth admin:admin        # 监控页面的用户名和密码</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.cnblogs.com/f-ck-need-u/p/8502593.html#1-5-acl\">https://www.cnblogs.com/f-ck-need-u/p/8502593.html#1-5-acl</a></p>\n","tags":["网络","负载均衡"]},{"title":"helm使用","url":"/2021/07/07/helm%E4%BD%BF%E7%94%A8/","content":"<p>helm是cncf基金会下的一个云原生管理程序</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>helm2和helm3有些区别，helm3去掉了服务端，本文主要是使用helm3</p>\n</blockquote>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>macos</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install helm</span><br></pre></td></tr></table></figure>\n\n<p>脚本安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3</span><br><span class=\"line\">chmod 700 get_helm.sh</span><br><span class=\"line\">./get_helm.sh</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4><h5 id=\"搜索应用\"><a href=\"#搜索应用\" class=\"headerlink\" title=\"搜索应用\"></a>搜索应用</h5><p>在hub中搜索</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm search hub &lt;应用&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在本地的repo中搜索</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm search repo &lt;应用&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装应用\"><a href=\"#安装应用\" class=\"headerlink\" title=\"安装应用\"></a>安装应用</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm install &lt;名字&gt; &lt;仓库&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定ns下安装</span></span><br><span class=\"line\">helm install &lt;名字&gt; &lt;仓库&gt; --namespace &lt;namespace&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"显示应用\"><a href=\"#显示应用\" class=\"headerlink\" title=\"显示应用\"></a>显示应用</h5><p>显示当前ns下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm list</span><br></pre></td></tr></table></figure>\n\n<p>显示当前ns下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm list -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure>\n\n<p>显示所有ns</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm list -A</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"升级应用\"><a href=\"#升级应用\" class=\"headerlink\" title=\"升级应用\"></a>升级应用</h5><p>获取安装时的设置值</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm get values &lt;应用&gt; &gt; tmp.yaml</span><br></pre></td></tr></table></figure>\n\n<p>升级配置或者版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm upgrade &lt;应用&gt; &lt;应用仓库&gt; -f tmp.yaml</span><br></pre></td></tr></table></figure>\n\n<p>升级指定版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm upgrade &lt;应用&gt; &lt;应用仓库&gt; --version vx.y.z</span><br></pre></td></tr></table></figure>\n\n<p>例子</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm get values cilium &gt; tmp.yaml</span><br><span class=\"line\">helm upgrade cilium cilium/cilium -f tmp.yaml</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"回滚应用\"><a href=\"#回滚应用\" class=\"headerlink\" title=\"回滚应用\"></a>回滚应用</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm rollback &lt;应用&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"卸载应用\"><a href=\"#卸载应用\" class=\"headerlink\" title=\"卸载应用\"></a>卸载应用</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm uninstall &lt;名字&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"下载应用包\"><a href=\"#下载应用包\" class=\"headerlink\" title=\"下载应用包\"></a>下载应用包</h5><p>将在本地生成一个包里面是这个应用得chart文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm fetch &lt;应用仓库&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"仓库操作\"><a href=\"#仓库操作\" class=\"headerlink\" title=\"仓库操作\"></a>仓库操作</h4><h5 id=\"添加仓库\"><a href=\"#添加仓库\" class=\"headerlink\" title=\"添加仓库\"></a>添加仓库</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm repo add &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查看仓库\"><a href=\"#查看仓库\" class=\"headerlink\" title=\"查看仓库\"></a>查看仓库</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm repo list</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"升级仓库\"><a href=\"#升级仓库\" class=\"headerlink\" title=\"升级仓库\"></a>升级仓库</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm repo update</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"卸载仓库\"><a href=\"#卸载仓库\" class=\"headerlink\" title=\"卸载仓库\"></a>卸载仓库</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm remove &lt;仓库名字&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"http://blog.naturelr.cc/\">http://blog.naturelr.cc</a><br><a href=\"https://helm.sh/docs\">https://helm.sh/docs</a></p>\n","tags":["k8s","helm"]},{"title":"ipset","url":"/2021/07/28/ipset/","content":"<p>ipset是iptables的一个扩展，可以动态的修改规则的地址</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>主要用户存储网络，端口号，ip地址以及mac地址，然后在iptables中调用此模块,有点像是存储网络信息的数据库</p>\n</blockquote>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install ipset</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h4><p>ipset的操作比较简单</p>\n<h5 id=\"显示集合\"><a href=\"#显示集合\" class=\"headerlink\" title=\"显示集合\"></a>显示集合</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipset list &lt;集合名字&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"增加集合\"><a href=\"#增加集合\" class=\"headerlink\" title=\"增加集合\"></a>增加集合</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipset create &lt;集合名字&gt; &lt;集合类型&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除集合\"><a href=\"#删除集合\" class=\"headerlink\" title=\"删除集合\"></a>删除集合</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除指定集合</span></span><br><span class=\"line\">ipset destroy &lt;集合名字&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有</span></span><br><span class=\"line\">ipset destroy</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"增加条目\"><a href=\"#增加条目\" class=\"headerlink\" title=\"增加条目\"></a>增加条目</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipset add &lt;集合名字&gt; &lt;条目&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除条目\"><a href=\"#删除条目\" class=\"headerlink\" title=\"删除条目\"></a>删除条目</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipset del &lt;集合名字&gt; &lt;条目&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"保存规则\"><a href=\"#保存规则\" class=\"headerlink\" title=\"保存规则\"></a>保存规则</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipset save &gt; ipset.bak</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"还原规则\"><a href=\"#还原规则\" class=\"headerlink\" title=\"还原规则\"></a>还原规则</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipset restore &lt; ipset.bak</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://ipset.netfilter.org/\">https://ipset.netfilter.org</a></p>\n","tags":["网络"]},{"title":"iptables","url":"/2020/12/03/iptables/","content":"<p>Iptables是大多数发型版本中支持的防火墙</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>iptables是个前端其真正的后端是linux的netfilter框架,一些发行版略有区别，centos8中则使用nftables来代替</p>\n</blockquote>\n<h4 id=\"链\"><a href=\"#链\" class=\"headerlink\" title=\"链\"></a>链</h4><blockquote>\n<p>在linuxn内核中的五个钩子(hook)，iptable中还可以自定义链，自定义只能被默认链引用才能使用</p>\n</blockquote>\n<ul>\n<li>INPUT 发送到用户空间的钩子</li>\n<li>OUTPUT 从用户空间发发出的钩子</li>\n<li>PREROUTING 路由前的钩子</li>\n<li>FORWARD 转发的钩子</li>\n<li>POSTROUTING 路由后的钩子</li>\n</ul>\n<h4 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h4><blockquote>\n<p>一些相近功能规则的组</p>\n</blockquote>\n<ul>\n<li>filter表：负责过滤功能，内核模块：iptables_filter</li>\n<li>nat表：网络地址转换功能；内核模块：iptable_nat</li>\n<li>mangle表：拆解报文，做出修改并重新封装的功能；内核模块：iptable_mangle</li>\n<li>raw表：关闭nat表上启用的连接追踪机制；iptable_raw</li>\n</ul>\n<h4 id=\"链表关系\"><a href=\"#链表关系\" class=\"headerlink\" title=\"链表关系\"></a>链表关系</h4><p><img src=\"/../images/iptables-1.png\" alt=\"iptables\"></p>\n<ul>\n<li>以流量的视角来看</li>\n</ul>\n<p><img src=\"/../images/iptables_traverse.jpeg\" alt=\"iptables\"></p>\n<h4 id=\"查看规则\"><a href=\"#查看规则\" class=\"headerlink\" title=\"查看规则\"></a>查看规则</h4><p><img src=\"/../images/iptables-2.png\" alt=\"iptables\"></p>\n<h5 id=\"命令说明\"><a href=\"#命令说明\" class=\"headerlink\" title=\"命令说明\"></a>命令说明</h5><ul>\n<li>-L 列出规则,L后面可也接受指定链</li>\n<li>-v 可以查看更多的信息</li>\n<li>-n 不对地址做名称反解 直接显示原来的IP地址</li>\n<li>-t 执行表名，默认为<code>filter</code>表</li>\n<li>–line-numbers 显示规则序列号,缩写为–line</li>\n<li>-x 精确数值</li>\n</ul>\n<h5 id=\"返回说明\"><a href=\"#返回说明\" class=\"headerlink\" title=\"返回说明\"></a>返回说明</h5><ul>\n<li>红色部分：<ul>\n<li>chain：链名，括号里的policy默认策略这里是drop</li>\n<li>packets：默认策略匹配到的包的数量</li>\n<li>bytes：当前链默认策略匹配到的所有包的大小总和</li>\n</ul>\n</li>\n<li>绿色部分：<ul>\n<li>bytes:对应匹配到的报文包的大小总和</li>\n<li>target:规则对应的target，往往表示规则对应的”动作”，即规则匹配成功后需要采取的措施</li>\n<li>prot:表示规则对应的协议，是否只针对某些协议应用此规则</li>\n<li>opt:表示规则对应的选项</li>\n<li>in:表示数据包由哪个接口(网卡)流入</li>\n<li>out:表示数据包由哪个接口(网卡)流出</li>\n<li>source:表示规则对应的源头IP或网段</li>\n<li>destination:表示规则对应的目标IP或网段</li>\n</ul>\n</li>\n<li>黄色部分：规则序列号</li>\n</ul>\n<h5 id=\"查看所有规则\"><a href=\"#查看所有规则\" class=\"headerlink\" title=\"查看所有规则\"></a>查看所有规则</h5><p>查看所有链所有表的规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">iptables --line-numbers -nvL</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查看指定规则\"><a href=\"#查看指定规则\" class=\"headerlink\" title=\"查看指定规则\"></a>查看指定规则</h5><p>查看指定表，默认链</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables --line-numbers -nvL -t &lt;表&gt;</span></span><br><span class=\"line\">iptables --line-numbers -nvL -t nat</span><br></pre></td></tr></table></figure>\n\n<p>查看INPUT链的nat表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables --line-numbers -nvL &lt;链&gt; -t &lt;表&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables --line-numbers -nv -L &lt;链&gt; -t &lt;表&gt;</span></span><br><span class=\"line\">iptables --line-numbers -nv -L INPUT -t nat</span><br></pre></td></tr></table></figure>\n\n<p>查看INPUT链的nat表的序列号是3的规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables --line-numbers -nvL &lt;链&gt; 3-t &lt;表&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables --line-numbers -nv -L &lt;链&gt; 3 -t &lt;表&gt;</span></span><br><span class=\"line\">iptables --line-numbers -nv -L INPUT 3 -t nat</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"增加规则\"><a href=\"#增加规则\" class=\"headerlink\" title=\"增加规则\"></a>增加规则</h4><blockquote>\n<p>iptables是自上而下匹配规则的所以顺序很重要 <br>-A 尾部增加 <br>-I 头部增加 后面加上序列号则是指定序列号位置</p>\n</blockquote>\n<h5 id=\"尾部增加规则\"><a href=\"#尾部增加规则\" class=\"headerlink\" title=\"尾部增加规则\"></a>尾部增加规则</h5><p>在 filter表INPUT链中<code>尾部</code>增加一条丢弃从192.168.1.1发送过来数据的规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -t &lt;表名&gt; -A &lt;链名&gt; &lt;匹配条件&gt; -j &lt;动作&gt;</span></span><br><span class=\"line\">iptables -t filter -A INPUT -s 192.168.1.1 -j DROP</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"头部增加规则\"><a href=\"#头部增加规则\" class=\"headerlink\" title=\"头部增加规则\"></a>头部增加规则</h5><p>在 filter表INPUT链中<code>头部</code>增加一条丢弃从192.168.1.2发送过来数据的规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -t &lt;表名&gt; -I &lt;链名&gt; &lt;匹配条件&gt; -j &lt;动作&gt;</span></span><br><span class=\"line\">iptables -t filter -I INPUT -s 192.168.1.2 -j DROP</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"指定位置增加规则\"><a href=\"#指定位置增加规则\" class=\"headerlink\" title=\"指定位置增加规则\"></a>指定位置增加规则</h5><p>在 filter表INPUT链中<code>指定位置</code>增加一条丢弃从192.168.1.3发送过来数据的规则</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -t &lt;表名&gt; -I &lt;链名&gt; &lt;规则序号&gt;  &lt;匹配条件&gt; -j &lt;动作&gt;</span></span><br><span class=\"line\">iptables -t filter -I INPUT  3 -s 192.168.1.2 -j DROP</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改规则\"><a href=\"#修改规则\" class=\"headerlink\" title=\"修改规则\"></a>修改规则</h4><p>将序列号为2的规则的动作修改为accept</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -t &lt;表名&gt; -R &lt;链名&gt; &lt;规则序号&gt; &lt;原本的匹配条件&gt; -j &lt;动作&gt;</span></span><br><span class=\"line\">iptables -t filter -R INPUT 2 -s 192.168.1.146 -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"修改默认规则\"><a href=\"#修改默认规则\" class=\"headerlink\" title=\"修改默认规则\"></a>修改默认规则</h5><p>将INPUT链默认策略设置为DROP,注意不要在生产环境执行此规则会断网</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -t &lt;表&gt; -P &lt;链&gt; &lt;动作&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables  -P &lt;链&gt; &lt;动作&gt; 表可省略</span></span><br><span class=\"line\">iptables -t filter -P INPUT DROP</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除规则\"><a href=\"#删除规则\" class=\"headerlink\" title=\"删除规则\"></a>删除规则</h4><h5 id=\"按照规则序号删除规则\"><a href=\"#按照规则序号删除规则\" class=\"headerlink\" title=\"按照规则序号删除规则\"></a>按照规则序号删除规则</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -t &lt;表名&gt; -D &lt;链名&gt; &lt;规则序号&gt;</span></span><br><span class=\"line\">iptables -t filter -D INPUT 3</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"按照具体的匹配条件与动作删除规则\"><a href=\"#按照具体的匹配条件与动作删除规则\" class=\"headerlink\" title=\"按照具体的匹配条件与动作删除规则\"></a>按照具体的匹配条件与动作删除规则</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -t &lt;表名&gt; -D &lt;链名&gt; &lt;匹配条件&gt; -j &lt;动作&gt;</span></span><br><span class=\"line\">iptables -t filter -D INPUT -s 192.168.1.2 -j DROP</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除所有规则\"><a href=\"#删除所有规则\" class=\"headerlink\" title=\"删除所有规则\"></a>删除所有规则</h5><blockquote>\n<p>谨慎操作！！！</p>\n</blockquote>\n<p>清除filter表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -t &lt;表名&gt; -F</span></span><br><span class=\"line\">iptables -t filter -F</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"处理动作\"><a href=\"#处理动作\" class=\"headerlink\" title=\"处理动作\"></a>处理动作</h4><blockquote>\n<p>处理动作在iptables中被称为target，动作也可以分为基本动作和扩展动作默认动作如下</p>\n</blockquote>\n<ul>\n<li>ACCEPT：允许数据包通过</li>\n<li>DROP：丢弃数据包,客户端会等待</li>\n<li>REJECT：拒绝数据包通过，客户端会立即发现拒绝</li>\n<li>SNAT：源地址转换</li>\n<li>DNAT：目标地址转换</li>\n<li>MASQUERADE：是SNAT的一种特殊形式，适用于动态的、临时会变的ip上</li>\n<li>REDIRECT：在本机做端口映射</li>\n<li>LOG：在&#x2F;var&#x2F;log&#x2F;messages文件中记录日志信息，然后传给下一条</li>\n</ul>\n<h5 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h5><blockquote>\n<p>日志模块一般用于调试</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开启日志</span></span><br><span class=\"line\">iptables -A INPUT -j LOG</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置日志级别</span></span><br><span class=\"line\">iptables -A INPUT -s 192.168.1.0/24 -j LOG --log-level 7</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在日志加上前缀</span></span><br><span class=\"line\">iptables -A INPUT -s 192.168.1.0/24 -j LOG --log-prefix &quot;iptables log: &quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"条件匹配\"><a href=\"#条件匹配\" class=\"headerlink\" title=\"条件匹配\"></a>条件匹配</h4><blockquote>\n<p>如果有多个规则，则规则之间是<code>与</code>关系</p>\n</blockquote>\n<h5 id=\"源地址匹配\"><a href=\"#源地址匹配\" class=\"headerlink\" title=\"源地址匹配\"></a>源地址匹配</h5><blockquote>\n<p>-s 用于匹配报文的源地址,可以同时指定多个源地址，每个IP之间用逗号隔开，也可以指定为一个网段。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">丢弃从192.168.1.1和192.168.1.2发送过来的数据</span></span><br><span class=\"line\">iptables -t filter -I INPUT -s 192.168.1.1,192.168.1.2 -j DROP</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">允许从192.168.1.0/24发送过来的数据</span></span><br><span class=\"line\">iptables -t filter -I INPUT -s 192.168.1.0/24 -j ACCEPT</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">允许除了192.168.1.0/24发送过来的数据</span></span><br><span class=\"line\">iptables -t filter -I INPUT ! -s 192.168.1.0/24 -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"目的地址匹配\"><a href=\"#目的地址匹配\" class=\"headerlink\" title=\"目的地址匹配\"></a>目的地址匹配</h5><blockquote>\n<p>-d 用于匹配报文的目标地址,和源地址匹配一样可以同时指定多个目标地址，每个IP之间用逗号隔开，也可以指定为一个网段。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">丢弃发送到192.168.1.1和192.168.1.2的数据</span></span><br><span class=\"line\">iptables -t filter -I OUTPUT -s 192.168.1.1,192.168.1.2 -j DROP</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">允许发送数据到192.168.1.0/24</span></span><br><span class=\"line\">iptables -t filter -I INPUT -s 192.168.1.0/24 -j ACCEPT</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">允许发送除了192.168.1.0/24数据</span></span><br><span class=\"line\">iptables -t filter -I INPUT ! -s 192.168.1.0/24 -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"端口匹配\"><a href=\"#端口匹配\" class=\"headerlink\" title=\"端口匹配\"></a>端口匹配</h5><blockquote>\n<p>-p 匹配报文的协议类型,可以匹配的协议类型tcp、udp、icmp等</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">允许发送数据到192.168.1.1的tcp协议</span></span><br><span class=\"line\">iptables -t filter -I INPUT -p tcp -s 192.168.1.1 -j ACCEPT</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">允许发送数据到192.168.1.1的udp协议</span></span><br><span class=\"line\">iptables -t filter -I INPUT ! -p udp -s 192.168.1.1 -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"网卡流入匹配\"><a href=\"#网卡流入匹配\" class=\"headerlink\" title=\"网卡流入匹配\"></a>网卡流入匹配</h5><blockquote>\n<p>-i 匹配报文是从哪个网卡接口流入本机的，由于匹配条件只是用于匹配报文流入的网卡，所以在OUTPUT链与POSTROUTING链中不能使用此选项。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">iptables -t filter -I INPUT -p icmp -i enp0s3 -j DROP</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\">iptables -t filter -I INPUT -p icmp ! -i enp0s3 -j DROP</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"网卡流出匹配\"><a href=\"#网卡流出匹配\" class=\"headerlink\" title=\"网卡流出匹配\"></a>网卡流出匹配</h5><blockquote>\n<p>-o 匹配报文将要从哪个网卡接口流出本机，于匹配条件只是用于匹配报文流出的网卡，所以在INPUT链与PREROUTING链中不能使用此选项。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">丢弃从enp0s3网卡流出的icmp协议</span></span><br><span class=\"line\">iptables -t filter -I OUTPUT -p icmp -o enp0s3 -j DROP</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">丢弃除enp0s3网卡流出的icmp协议</span></span><br><span class=\"line\">iptables -t filter -I OUTPUT -p icmp ! -o enp0s3 -j DROP</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"自定义链\"><a href=\"#自定义链\" class=\"headerlink\" title=\"自定义链\"></a>自定义链</h4><blockquote>\n<p>在规则比较多时方便管理规则，自定义链需要被默认链引用才能生效</p>\n</blockquote>\n<h5 id=\"创建自定义链\"><a href=\"#创建自定义链\" class=\"headerlink\" title=\"创建自定义链\"></a>创建自定义链</h5><blockquote>\n<p>创建一个filter表名字叫TEST的链</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -t &lt;表&gt; -N &lt;链名&gt;</span></span><br><span class=\"line\">iptables -t filter -N TEST</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"引用自定义链\"><a href=\"#引用自定义链\" class=\"headerlink\" title=\"引用自定义链\"></a>引用自定义链</h5><blockquote>\n<p>引用的时候只需要将动作使用自定义链名 <br>在默认链INPUT中插入一条目标端口是80协议是tcp动作是自定义链TEST的规则</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">iptables -t filter -I INPUT -p tcp --dport 80 -j TEST</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"重命名自定义链\"><a href=\"#重命名自定义链\" class=\"headerlink\" title=\"重命名自定义链\"></a>重命名自定义链</h5><blockquote>\n<p>将TEST自定义链改为TEST2</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -E &lt;原自定义链名&gt; &lt;目标自定义链名&gt;</span></span><br><span class=\"line\">iptables -E TEST TEST2</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除自定义链\"><a href=\"#删除自定义链\" class=\"headerlink\" title=\"删除自定义链\"></a>删除自定义链</h5><blockquote>\n<p>删除TEST2的自定义链名</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -X &lt;自定义链名&gt;</span></span><br><span class=\"line\">iptables -X TEST2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扩展模块\"><a href=\"#扩展模块\" class=\"headerlink\" title=\"扩展模块\"></a>扩展模块</h4><blockquote>\n<p>iptables支持使用扩展模块来进行功能的扩展</p>\n</blockquote>\n<h5 id=\"comment\"><a href=\"#comment\" class=\"headerlink\" title=\"comment\"></a>comment</h5><blockquote>\n<p>注释模块，顾名思义对规则进行说明</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">-m comment --comment &quot;comment&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">iptables -t filter -I INPUT -s 192.168.1.0/24 -m comment --comment &quot;xxxx&quot; -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"multiport\"><a href=\"#multiport\" class=\"headerlink\" title=\"multiport\"></a>multiport</h5><blockquote>\n<p>多端口模块，可以设置一条规则匹配多个端口</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">-m multiport --dports &lt;端口号&gt;,&lt;端口号&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ipset\"><a href=\"#ipset\" class=\"headerlink\" title=\"ipset\"></a>ipset</h5><blockquote>\n<p>可以一条规则匹配ipset里面的地址</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">-m set --match-set &lt;ipset名字&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"mark\"><a href=\"#mark\" class=\"headerlink\" title=\"mark\"></a>mark</h5><blockquote>\n<p>标记流量，需要注意的时候这个标记只在本地标记流量出去之后就没了</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置标签</span></span><br><span class=\"line\">-j MARK --set-xmark 0x8000/0x8000</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">匹配标签并丢弃</span></span><br><span class=\"line\">-m MARK --mark 0x8000/0x8000 -j DROP</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–set-xmark value[&#x2F;mask]  mask和value做异或运算</li>\n<li>–set-mark value[&#x2F;mask]   mask和value做或运算</li>\n<li>–and-mark bits           和nfmark做与运算</li>\n<li>–or-mark bits            和nfmark做或运算</li>\n<li>–xor-mark bits           和nfmark做异或运算</li>\n</ul>\n<h5 id=\"conntrack\"><a href=\"#conntrack\" class=\"headerlink\" title=\"conntrack\"></a>conntrack</h5><blockquote>\n<p>连接跟踪模块可以根据连接的状态匹配</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">-m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>NEW 新建连接</li>\n<li>ESTABLISHED 已经连接</li>\n<li>RELATED 相关连接</li>\n<li>INVALID 无效连接</li>\n<li>UNTRACKED 人为设置的</li>\n</ul>\n<p>参考 <a href=\"https://www.cnblogs.com/saolv/p/13096965.html\">https://www.cnblogs.com/saolv/p/13096965.html</a></p>\n<h4 id=\"规则保存导出和还原\"><a href=\"#规则保存导出和还原\" class=\"headerlink\" title=\"规则保存导出和还原\"></a>规则保存导出和还原</h4><h5 id=\"保存规则\"><a href=\"#保存规则\" class=\"headerlink\" title=\"保存规则\"></a>保存规则</h5><blockquote>\n<p>centos7以上没有安装<code>iptables-services</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装iptables-services</span></span><br><span class=\"line\">yum install -y iptables-services</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">保存规则</span></span><br><span class=\"line\">service iptables save</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"导出规则\"><a href=\"#导出规则\" class=\"headerlink\" title=\"导出规则\"></a>导出规则</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">iptables-restore &gt; iptable</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"还原规则\"><a href=\"#还原规则\" class=\"headerlink\" title=\"还原规则\"></a>还原规则</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">iptables-save &lt; iptable</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"帮助\"><a href=\"#帮助\" class=\"headerlink\" title=\"帮助\"></a>帮助</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">iptables -j &lt;target&gt; -help</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"http://www.zsythink.net/archives/category/%e8%bf%90%e7%bb%b4%e7%9b%b8%e5%85%b3/iptables/\">朱双印个人博客</a><br><a href=\"https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html\">https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html</a></p>\n","tags":["网络","linux"]},{"title":"hexo搭建博客","url":"/2020/09/16/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","content":"<p>记录一下用hexo搭建博客的过程和一些坑</p>\n<span id=\"more\"></span>\n\n<h4 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install node</span><br></pre></td></tr></table></figure>\n\n<p>具体看<a href=\"/2020/09/22/nodejs%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/\" title=\"nodeJS基本使用\">nodeJS基本使用</a>,当前版本的hexo在node14中会有告警，建议安装12并使用nvm管理node版本</p>\n<h4 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化Hexo\"><a href=\"#初始化Hexo\" class=\"headerlink\" title=\"初始化Hexo\"></a>初始化Hexo</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> blog &amp;&amp;<span class=\"built_in\">cd</span> blog <span class=\"comment\"># 创建文件夹并进入</span></span><br><span class=\"line\">hexo init            <span class=\"comment\"># 初始化 hexo</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候执行<code>hexo g &amp;&amp; hexo s</code>就可以使用localhost:4000打开一个blog，此时这个主题是默认的</p>\n<h5 id=\"配置Hexo\"><a href=\"#配置Hexo\" class=\"headerlink\" title=\"配置Hexo\"></a>配置Hexo</h5><ul>\n<li>blog根目录目录下的<code>_config.yaml</code>是hexo的配置文件，自定义的相关设置需要修改此文件</li>\n</ul>\n<h4 id=\"安装-Next主题\"><a href=\"#安装-Next主题\" class=\"headerlink\" title=\"安装 Next主题\"></a>安装 Next主题</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置Next主题\"><a href=\"#配置Next主题\" class=\"headerlink\" title=\"配置Next主题\"></a>配置Next主题</h5><ul>\n<li>配置主题为next，在<code>_config.yaml</code>中查找<code>theme</code>并修改为next</li>\n<li>配置文件中有详细的说明不再细说</li>\n</ul>\n<h4 id=\"Hexo-admin\"><a href=\"#Hexo-admin\" class=\"headerlink\" title=\"Hexo-admin\"></a>Hexo-admin</h4><p>hexo admin 是一个可以直接在网页上写文章且实时预览的插件</p>\n<p>执行<code>npm install --save hexo-admin</code>安装,访问<a href=\"http://localhost:4000/admin\">http://localhost:4000/admin</a></p>\n","tags":["hexo"]},{"title":"ipvs","url":"/2022/11/07/ipvs/","content":"<p>ipvs是个4层负载均衡器，常常用于服务的高可用</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>ipvs已经合并到linux内核当中，用户层面使用ipvsadm</p>\n</blockquote>\n<h4 id=\"安装ipvsadm\"><a href=\"#安装ipvsadm\" class=\"headerlink\" title=\"安装ipvsadm\"></a>安装ipvsadm</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install ipvsadm</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p><img src=\"/../images/ipvs-1.png\" alt=\"ipvs\"></p>\n<p>整个动作在内核态完成,跳过了一些链</p>\n<h4 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h4><table>\n<thead>\n<tr>\n<th>缩写</th>\n<th>全写</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CIP</td>\n<td>Client IP</td>\n<td>客户端ip</td>\n</tr>\n<tr>\n<td>VIP</td>\n<td>Virtual IP</td>\n<td>虚拟ip</td>\n</tr>\n<tr>\n<td>DIP</td>\n<td>Director Server IP</td>\n<td>负载均衡ip</td>\n</tr>\n<tr>\n<td>RIP</td>\n<td>Real Servier IP</td>\n<td>真正的后端服务ip</td>\n</tr>\n<tr>\n<td>DS</td>\n<td>Director Server</td>\n<td>部署负载均衡的服务器</td>\n</tr>\n<tr>\n<td>RS</td>\n<td>Real Server</td>\n<td>后端服务器</td>\n</tr>\n</tbody></table>\n<h4 id=\"三种模式\"><a href=\"#三种模式\" class=\"headerlink\" title=\"三种模式\"></a>三种模式</h4><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>IP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CIP</td>\n<td>10.23.18.81</td>\n</tr>\n<tr>\n<td>VIP</td>\n<td>10.23.59.162</td>\n</tr>\n<tr>\n<td>DS</td>\n<td>10.23.12.87</td>\n</tr>\n<tr>\n<td>RS1</td>\n<td>10.23.197.23</td>\n</tr>\n<tr>\n<td>RS2</td>\n<td>10.23.9.198</td>\n</tr>\n</tbody></table>\n<h5 id=\"NAT\"><a href=\"#NAT\" class=\"headerlink\" title=\"NAT\"></a>NAT</h5><ul>\n<li>本质是个dnat</li>\n<li>流量出入都经过DR</li>\n<li>来回流量都从dr过dr会成为瓶颈</li>\n<li>同一个网段时RS的默认网关需要指向DS,且本网段的路由需要删除不然不会通过默认路由到DR</li>\n</ul>\n<p><img src=\"/../images/ipvs-nat-1.png\" alt=\"x\"></p>\n<h6 id=\"NAT部署\"><a href=\"#NAT部署\" class=\"headerlink\" title=\"NAT部署\"></a>NAT部署</h6><ul>\n<li>在DS配置规则</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo 1 &gt;/proc/sys/net/ipv4/ip_forward</span><br><span class=\"line\"></span><br><span class=\"line\">export VIP=10.23.59.162</span><br><span class=\"line\">export RS1=10.23.197.23</span><br><span class=\"line\">export RS2=10.23.9.198</span><br><span class=\"line\"></span><br><span class=\"line\">ipvsadm -A -t $VIP:80 -s rr</span><br><span class=\"line\">ipvsadm -a -t $VIP:80 -r $RS1 -m</span><br><span class=\"line\">ipvsadm -a -t $VIP:80 -r $RS2 -m</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看规则</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@10-23-12-87 ~]# ipvsadm -L -n</span><br><span class=\"line\">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class=\"line\">Prot LocalAddress:Port Scheduler Flags</span><br><span class=\"line\"><span class=\"meta prompt_\">  -&gt; </span><span class=\"language-bash\">RemoteAddress:Port           Forward Weight ActiveConn InActConn</span></span><br><span class=\"line\">TCP  10.23.59.162:80 rr</span><br><span class=\"line\"><span class=\"meta prompt_\">  -&gt; </span><span class=\"language-bash\">10.23.9.198:80               Masq    1      0          2</span></span><br><span class=\"line\"><span class=\"meta prompt_\">  -&gt; </span><span class=\"language-bash\">10.23.197.23:80              Masq    1      0          1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在RS上部署一个httpd用于判断访问到哪那台机器</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install httpd &amp;&amp; systemctl start httpd</span><br><span class=\"line\">echo &quot;i am rs $HOSTNAME&quot; &gt; /var/www/html/index.html</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>此时在rs上<code>curl 10.23.59.162</code>这个vip会轮询访问，此时cip是自己</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@10-23-12-87 ~]# curl 10.23.59.162</span><br><span class=\"line\">i am rs 10-23-9-198</span><br><span class=\"line\">[root@10-23-12-87 ~]# curl 10.23.59.162</span><br><span class=\"line\">i am rs 10-23-197-23</span><br><span class=\"line\">[root@10-23-12-87 ~]#</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"同一个网络说明\"><a href=\"#同一个网络说明\" class=\"headerlink\" title=\"同一个网络说明\"></a>同一个网络说明</h6><p>client此时并不知道vip这个地址在哪,所以需要在dr上绑定vip,让隔壁的邻居知道vip的mac</p>\n<p>且由于vip和rs的地址都在同一个网段默认会通过二层直接到client,未经过dr的nat，导致client不认回包而被丢弃因此需要在rs上设置默认网关为dr</p>\n<ul>\n<li>dr执行</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip addr add 10.23.59.162 dev eth0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RS上执行,将默认路由指向dr</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export DS=10.23.12.87</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置默认路由</span></span><br><span class=\"line\">ip route replace default via $DS</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除路由</span></span><br><span class=\"line\">ip r del 10.23.0.0/16 dev eth0 proto kernel scope link src 10.23.197.23</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"流量转发路径\"><a href=\"#流量转发路径\" class=\"headerlink\" title=\"流量转发路径\"></a>流量转发路径</h6><p><img src=\"/../images/ipvs-nat-2.png\" alt=\"cl\"><br><img src=\"/../images/ipvs-nat-3.png\" alt=\"dr\"><br><img src=\"/../images/ipvs-nat-4.png\" alt=\"rs\"></p>\n<p>通过抓包我可以看到client请求vip之后，dr接受到会将vip替换成rip然后发送给rs<br>rs收到之后因为会路由设置会发送给dr，dr将src地址再改回vip</p>\n<p><img src=\"/../images/ipvs-nat-5.png\" alt=\"rs\"></p>\n<h5 id=\"DR\"><a href=\"#DR\" class=\"headerlink\" title=\"DR\"></a>DR</h5><ul>\n<li><p>rs和ds需要在一个二层中</p>\n</li>\n<li><p>dr模式中客户端请求vip流量从ds通过修改mac地址来达到负载均衡</p>\n</li>\n<li><p>由于没有修改ip地址所以rs上需要添加vip到lo或者dummy类型的网口上，不然rs发现请求的ip不在本机就会被丢弃</p>\n</li>\n<li><p>由于rs的lo或者dummy的网卡上配置的有vip为了防止rs响应vip的请求，所以需要修改arp配置</p>\n</li>\n<li><p>不支持端口映射</p>\n</li>\n</ul>\n<h6 id=\"DR部署\"><a href=\"#DR部署\" class=\"headerlink\" title=\"DR部署\"></a>DR部署</h6><ul>\n<li>DS配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export VIP=10.23.59.162</span><br><span class=\"line\">export RS1=10.23.197.23</span><br><span class=\"line\">export RS2=10.23.9.198</span><br><span class=\"line\"></span><br><span class=\"line\">ip link add vip type dummy</span><br><span class=\"line\">ip addr add $VIP dev vip</span><br><span class=\"line\"></span><br><span class=\"line\">ipvsadm -A -t $VIP:80 -s rr</span><br><span class=\"line\">ipvsadm -a -t $VIP:80 -r $RS1:80 -g</span><br><span class=\"line\">ipvsadm -a -t $VIP:80 -r $RS2:80 -g</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>两个RS配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">部署http服务用于区分是否负载均衡</span></span><br><span class=\"line\">yum -y install httpd &amp;&amp; systemctl start httpd</span><br><span class=\"line\">echo &quot;i am rs $HOSTNAME&quot; &gt; /var/www/html/index.html</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置arp</span></span><br><span class=\"line\">echo 1 &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class=\"line\">echo 2 &gt;/proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class=\"line\"></span><br><span class=\"line\">export VIP=10.23.59.162</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配置vip网卡(用dummy和lo都可以)</span></span><br><span class=\"line\">ip link add vip type dummy</span><br><span class=\"line\">ip addr add $VIP dev vip</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Client</li>\n</ul>\n<p>添加路由，原则来说因为在同一个交换机中直接通过二层,但是有些vpc的子网不是通过vpc创建的ip不会转发</p>\n<p>也可以查看云厂商的文档如vip或者辅助ip等来作为vip</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export VIP=10.23.59.162</span><br><span class=\"line\">export DR=10.23.12.87</span><br><span class=\"line\"></span><br><span class=\"line\">ip r add $VIP/32 via $DR dev eth0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>测试</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@10-23-18-81 ~]# curl 10.23.59.162</span><br><span class=\"line\">i am rs 10-23-197-23</span><br><span class=\"line\">[root@10-23-18-81 ~]# curl 10.23.59.162</span><br><span class=\"line\">i am rs 10-23-9-198</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"流量抓包\"><a href=\"#流量抓包\" class=\"headerlink\" title=\"流量抓包\"></a>流量抓包</h6><p><img src=\"/../images/ipvs-dr-1.png\" alt=\"dr\"></p>\n<p><img src=\"/../images/ipvs-dr-2.png\" alt=\"dr\"></p>\n<p>图中可看出dr将mac地址换成类似rs的mac地址</p>\n<h5 id=\"隧道-IPIP\"><a href=\"#隧道-IPIP\" class=\"headerlink\" title=\"隧道(IPIP)\"></a>隧道(IPIP)</h5><h6 id=\"隧道-IPIP-部署\"><a href=\"#隧道-IPIP-部署\" class=\"headerlink\" title=\"隧道(IPIP)部署\"></a>隧道(IPIP)部署</h6><ul>\n<li>DR配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export VIP=10.23.59.162</span><br><span class=\"line\">export RS1=10.23.197.23</span><br><span class=\"line\">export RS2=10.23.9.198</span><br><span class=\"line\"></span><br><span class=\"line\">ipvsadm -A -t $VIP:80 -s rr</span><br><span class=\"line\">ipvsadm -a -t $VIP:80 -r $RS1:80 -i</span><br><span class=\"line\">ipvsadm -a -t $VIP:80 -r $RS2:80 -i</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RS</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">加载内部模块</span></span><br><span class=\"line\">modprobe ipip</span><br><span class=\"line\"></span><br><span class=\"line\">export VIP=10.23.59.162</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将vip添加到ipip隧道网卡</span></span><br><span class=\"line\">ip addr add $VIP dev tunl0</span><br><span class=\"line\">ip link set tunl0 up</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改内核参数</span></span><br><span class=\"line\">echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/tunl0/arp_ignore</span><br><span class=\"line\">echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/tunl0/arp_announce</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;1&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class=\"line\">echo &quot;2&quot; &gt;/proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;0&quot; &gt; /proc/sys/net/ipv4/conf/tunl0/rp_filter</span><br><span class=\"line\">echo &quot;0&quot; &gt; /proc/sys/net/ipv4/conf/all/rp_filter</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"IPIP流量分析\"><a href=\"#IPIP流量分析\" class=\"headerlink\" title=\"IPIP流量分析\"></a>IPIP流量分析</h6><p><img src=\"/../images/ipvs-ipip-1.png\" alt=\"ipip\"></p>\n<p><img src=\"/../images/ipvs-ipip-2.png\" alt=\"ipip\"></p>\n<p>由于实验环境在同一个网段所以需要对arp响应进行处理</p>\n<h4 id=\"内核参数\"><a href=\"#内核参数\" class=\"headerlink\" title=\"内核参数\"></a>内核参数</h4><p>内核参数的文档</p>\n<p><a href=\"https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt\">https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt</a></p>\n<h5 id=\"arp-ignore\"><a href=\"#arp-ignore\" class=\"headerlink\" title=\"arp_ignore\"></a>arp_ignore</h5><p>设置使用那个网卡的mac和ip用来请求arp,即arp请求的src_mac和src_ip</p>\n<ul>\n<li>0(默认):将任何网卡的地址响应出去，而不关系该ip是否在接受的网卡上</li>\n<li>1:只响应目标ip接受网卡的地址</li>\n<li>2:只响应目标ip接受网卡的地址，且需要在同网段</li>\n<li>3:请求的地址作用域为host的不响应，只有作用域为<code>global</code>和<code>link</code>的才响应</li>\n<li>4-7:保留</li>\n<li>8:任何arp都不响应</li>\n</ul>\n<p>在dr模式中每个rs上都配置了vip的地址如果不设置arp_ignore为1则会响应vip的arp请求使客户端的请求绕过了ds直接到了rs</p>\n<h5 id=\"arp-announce\"><a href=\"#arp-announce\" class=\"headerlink\" title=\"arp_announce\"></a>arp_announce</h5><p>设置使用那个网卡的mac和ip用来响应arp请求,既arp响应的dst_mac和dst_ip</p>\n<ul>\n<li>0:使用任何配置在本接口上的地址响应</li>\n<li>1:尽量避免使用不属于该发送网卡子网的本地地址作为发送arp请求的源IP地址</li>\n<li>2:忽略IP数据包的源IP地址，选择该发送网卡上最合适的本地地址作为arp请求的源IP地址</li>\n</ul>\n<h5 id=\"rp-filter\"><a href=\"#rp-filter\" class=\"headerlink\" title=\"rp_filter\"></a>rp_filter</h5><p>反向路径过滤</p>\n<ul>\n<li>0:不校验</li>\n<li>1(默认):严格的校验，每个数据包都进行校验，校验反向路径通过特定的接口是否是最佳路径，如不是则丢弃</li>\n<li>2:宽松模式。只校验通过任意接口是否可达，如果不通则丢弃</li>\n<li>取conf&#x2F;{all,interface}&#x2F;rp_filter中的最大值</li>\n</ul>\n<h4 id=\"负载均衡算法\"><a href=\"#负载均衡算法\" class=\"headerlink\" title=\"负载均衡算法\"></a>负载均衡算法</h4><ul>\n<li>rr（轮询）</li>\n<li>wrr（权重）</li>\n<li>lc（最后连接）</li>\n<li>wlc（权重）</li>\n<li>lblc（本地最后连接）</li>\n<li>lblcr（带复制的本地最后连接）</li>\n<li>dh（目的地址哈希）</li>\n<li>sh（源地址哈希）</li>\n<li>sed（最小期望延迟）</li>\n<li>nq（永不排队）</li>\n</ul>\n<h4 id=\"ipvsadm常用命令\"><a href=\"#ipvsadm常用命令\" class=\"headerlink\" title=\"ipvsadm常用命令\"></a>ipvsadm常用命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看规则</span></span><br><span class=\"line\">ipvsadm -L</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看指定规则</span></span><br><span class=\"line\">ipvsadm -L -t 10.0.0.1:80</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看链接</span></span><br><span class=\"line\">ipvsadm -l -c</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清理所有规则</span></span><br><span class=\"line\">ipvsadm -c</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清空计数器</span></span><br><span class=\"line\">ipvsadm -Z</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加一个虚拟服务器，算法为轮询</span></span><br><span class=\"line\">ipvsadm -A -t 10.0.0.1:80 -s rr</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除一个虚拟服务,同时删除RS</span></span><br><span class=\"line\">ipvsadm -D -t 10.0.0.1:80</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改一个服务，将算法修改为wlc</span></span><br><span class=\"line\">ipvsadm -E -t 10.0.0.1:80 -s wlc</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加一个RS,nat模式</span></span><br><span class=\"line\">ipvsadm -a -t 10.0.0.1:80 -r 192.168.32.129:80 -m</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加一个RS,路由模式,权重为3</span></span><br><span class=\"line\">ipvsadm -a -t 10.0.0.1:80 -r 192.168.32.129:80 -g -w 3</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加一个RS,ipip隧道模式</span></span><br><span class=\"line\">ipvsadm -a -t 10.0.0.1:80 -r 192.168.32.129:80 -i</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改rs 将此rs的模式改为ipip权重为2</span></span><br><span class=\"line\">ipvsadm -e -t 10.0.0.1:80 -r 192.168.32.129:80 -i -w 2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除一个RS</span></span><br><span class=\"line\">ipvsadm -d -t 10.0.0.1:80 -r 192.168.32.129:80</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看转发情况</span></span><br><span class=\"line\">ipvsadm -L -n -c</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">保存配置</span></span><br><span class=\"line\">ipvsadm -S -n &gt;ipvs.conf</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">读取配置</span></span><br><span class=\"line\">ipvsadm -R &lt; ipvs.conf</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.cnblogs.com/laolieren/p/lvs_explained.html\">https://www.cnblogs.com/laolieren/p/lvs_explained.html</a><br><a href=\"https://www.cnblogs.com/klb561/p/9215667.html\">https://www.cnblogs.com/klb561/p/9215667.html</a><br><a href=\"https://www.jianshu.com/p/734640384fda\">https://www.jianshu.com/p/734640384fda</a><br><a href=\"https://www.cnblogs.com/f-ck-need-u/p/8472744.html\">https://www.cnblogs.com/f-ck-need-u/p/8472744.html</a></p>\n","tags":["网络","负载均衡"]},{"title":"ip命令基本使用","url":"/2021/05/02/ip%E5%91%BD%E4%BB%A4%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","content":"<p>ip 命令是linux中常用的网络配置命令</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>ip命令是iproute2包中的命令</p>\n</blockquote>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><blockquote>\n<p>一般发行版再带ip命令</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">macos</span></span><br><span class=\"line\">brew install iproute2mac</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ubuntu</span></span><br><span class=\"line\">apt install iproute2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">centos</span></span><br><span class=\"line\">yum install iproute2</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设备-device\"><a href=\"#设备-device\" class=\"headerlink\" title=\"设备(device)\"></a>设备(device)</h4><blockquote>\n<p>主要是配置OSI模型中的第二层数据链路层</p>\n</blockquote>\n<h5 id=\"查看设备\"><a href=\"#查看设备\" class=\"headerlink\" title=\"查看设备\"></a>查看设备</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 显示所有</span><br><span class=\"line\">ip link show</span><br><span class=\"line\"></span><br><span class=\"line\">详细显示</span><br><span class=\"line\">ip -s link show</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"操作设备\"><a href=\"#操作设备\" class=\"headerlink\" title=\"操作设备\"></a>操作设备</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开启网卡</span></span><br><span class=\"line\">ip link set ens33 up</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">关闭网卡</span></span><br><span class=\"line\">ip link set ens33 down</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">开启网卡的混合模式</span></span><br><span class=\"line\">ip link set ens33 promisc on</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">关闭网卡的混个模式</span></span><br><span class=\"line\">ip link set ens33 promisc offi</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置网卡队列长度</span></span><br><span class=\"line\">ip link set ens33 txqueuelen 1200</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置网卡最大传输单元</span></span><br><span class=\"line\">ip link set ens33 mtu 1400</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改名字</span></span><br><span class=\"line\">ip link set ens33 name eth0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改网卡的MAC地址</span></span><br><span class=\"line\">ip link set ens33 address aa:aa:aa:aa:aa:aa</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将 ens33 连接到vbr0网桥</span></span><br><span class=\"line\">ip link set ens33 master vbr0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"IP相关配置\"><a href=\"#IP相关配置\" class=\"headerlink\" title=\"IP相关配置\"></a>IP相关配置</h4><h5 id=\"查看IP\"><a href=\"#查看IP\" class=\"headerlink\" title=\"查看IP\"></a>查看IP</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示所有IP地址</span></span><br><span class=\"line\">ip address</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">简写</span></span><br><span class=\"line\">ip addr </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示指定网卡的IP</span></span><br><span class=\"line\">ip addr ens</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">详细显示指定网卡的IP</span></span><br><span class=\"line\">ip -s addr ens33</span><br><span class=\"line\"></span><br><span class=\"line\">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class=\"line\">    link/ether 00:0c:29:d9:89:c8 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.32.132/24 brd 192.168.32.255 scope global noprefixroute ens33</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::20c:29ff:fed9:89c8/64 scope link</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>broadcast：设定广播位址，如果设定值是 + 表示让系统自动计算；</li>\n<li>label：该设备的别名，例如eth0:0；</li>\n<li>scope：这个设备的领域，默认global，通常是以下几个大类：</li>\n<li>global：允许来自所有来源的连线；<ul>\n<li>site：仅支持IPv6 ，仅允许本主机的连接；</li>\n<li>link：仅允许本设备自我连接；</li>\n<li>host：仅允许本主机内部的连接；</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"增加IP\"><a href=\"#增加IP\" class=\"headerlink\" title=\"增加IP\"></a>增加IP</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置ens33网卡IP地址192.168.1.1</span></span><br><span class=\"line\">ip addr add 192.168.1.1/24 dev ens33 </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除IP\"><a href=\"#删除IP\" class=\"headerlink\" title=\"删除IP\"></a>删除IP</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"> # </span><span class=\"language-bash\">删除ens33网卡IP地址</span></span><br><span class=\"line\">ip addr del 192.168.1.1/24 dev ens33</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路由相关配置\"><a href=\"#路由相关配置\" class=\"headerlink\" title=\"路由相关配置\"></a>路由相关配置</h4><h5 id=\"查看路由\"><a href=\"#查看路由\" class=\"headerlink\" title=\"查看路由\"></a>查看路由</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示系统路由</span></span><br><span class=\"line\">ip route show</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">简写</span></span><br><span class=\"line\">ip r</span><br><span class=\"line\"></span><br><span class=\"line\">default via 192.168.32.2 dev ens33 proto static metric 100                      </span><br><span class=\"line\">169.254.0.0/16 dev ens33 scope link metric 1000                                 </span><br><span class=\"line\">172.16.1.0/24 dev docker0 proto kernel scope link src 172.16.1.1                </span><br><span class=\"line\">192.168.32.0/24 dev ens33 proto kernel scope link src 192.168.32.132 metric 100 </span><br><span class=\"line\">192.168.49.0/24 dev br-e6a94a27c143 proto kernel scope link src 192.168.49.1    </span><br><span class=\"line\">192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 linkdown  </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示vip这个路由表的路由</span></span><br><span class=\"line\">ip route show table vip</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看某个地址走那条路由</span></span><br><span class=\"line\">ip route get 114.114.114.114</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>proto：此路由的路由协定，主要有redirect,kernel,boot,static,ra等，其中kernel是直接由核心判断自动设定。</li>\n<li>scope：路由的范围，主要是link，是与本设备有关的直接连接。</li>\n</ul>\n<h5 id=\"增加-修改路由\"><a href=\"#增加-修改路由\" class=\"headerlink\" title=\"增加&#x2F;修改路由\"></a>增加&#x2F;修改路由</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置192.168.1.0网段的网关为192.168.1.1数据走eth0接口</span></span><br><span class=\"line\">ip route add 192.168.1.0/24 via 192.168.1.1 dev eth0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置默认网关为192.168.1.1</span></span><br><span class=\"line\">ip route add default via 192.168.1.1 dev eth0</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除路由\"><a href=\"#删除路由\" class=\"headerlink\" title=\"删除路由\"></a>删除路由</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除192.168.1.0网段的网关</span></span><br><span class=\"line\">ip route del 192.168.1.0/24</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除默认路由</span></span><br><span class=\"line\">ip route del default</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除路由</span></span><br><span class=\"line\">ip route delete 192.168.1.0/24 dev eth0 </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"网络命名空间\"><a href=\"#网络命名空间\" class=\"headerlink\" title=\"网络命名空间\"></a>网络命名空间</h4><h5 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip netns</span><br><span class=\"line\">ip netns show</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"增加\"><a href=\"#增加\" class=\"headerlink\" title=\"增加\"></a>增加</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">增加一个叫<span class=\"built_in\">test</span>的网络命名空间</span></span><br><span class=\"line\">ip netns add test</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除一个叫<span class=\"built_in\">test</span>的网络命名空间</span></span><br><span class=\"line\">ip netns del test</span><br></pre></td></tr></table></figure>\n<h5 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在 <span class=\"built_in\">test</span> ns 下执行ip addr</span></span><br><span class=\"line\">ip netns exec test ip addr</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://wangchujiang.com/linux-command/c/ip.html\">https://wangchujiang.com/linux-command/c/ip.html</a><br><a href=\"https://www.jianshu.com/p/7466862382c4\">https://www.jianshu.com/p/7466862382c4</a></p>\n","tags":["网络"]},{"title":"k8s-apiserver中loopback证书源码阅读","url":"/2023/07/10/k8s-apiserver%E4%B8%ADloopback%E8%AF%81%E4%B9%A6%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/","content":"<p>apiserver因为loopback证书过期导致一些功能无法使用,</p>\n<span id=\"more\"></span>\n\n<p>apiserver启动的时候会生成一个loopback证书，该证书默认只有一年有效期,k8s官方解释说应该每年升级或者重启一次,<a href=\"https://github.com/kubernetes/kubernetes/issues/86552\">issues</a></p>\n<p>但在实际场景当中不能没事就重启或升级apiserver</p>\n<h4 id=\"生成证书和回环客户端\"><a href=\"#生成证书和回环客户端\" class=\"headerlink\" title=\"生成证书和回环客户端\"></a>生成证书和回环客户端</h4><ul>\n<li>入口</li>\n</ul>\n<p>.&#x2F;cmd&#x2F;kube-apiserver&#x2F;main.go</p>\n<ul>\n<li>然后跳转</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./cmd/kube-apiserver/app/server.go</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// NewAPIServerCommand creates a *cobra.Command object with default parameters</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewAPIServerCommand</span><span class=\"params\">()</span></span> *cobra.Command &#123;</span><br><span class=\"line\">    s := options.NewServerRunOptions()</span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Run(completedOptions, genericapiserver.SetupSignalHandler())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Run runs the specified APIServer.  This should never exit.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Run</span><span class=\"params\">(completeOptions completedServerRunOptions, xstopCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span></span> <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// To help debugging, immediately log version</span></span><br><span class=\"line\">    klog.Infof(<span class=\"string\">&quot;Version: %+v&quot;</span>, version.Get())</span><br><span class=\"line\"></span><br><span class=\"line\">    klog.InfoS(<span class=\"string\">&quot;Golang settings&quot;</span>, <span class=\"string\">&quot;GOGC&quot;</span>, os.Getenv(<span class=\"string\">&quot;GOGC&quot;</span>), <span class=\"string\">&quot;GOMAXPROCS&quot;</span>, os.Getenv(<span class=\"string\">&quot;GOMAXPROCS&quot;</span>), <span class=\"string\">&quot;GOTRACEBACK&quot;</span>, os.Getenv(<span class=\"string\">&quot;GOTRACEBACK&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    server, err := CreateServerChain(completeOptions, stopCh)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    prepared, err := server.PrepareRun()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> prepared.Run(stopCh)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CreateServerChain creates the apiservers connected via delegation.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CreateServerChain</span><span class=\"params\">(completedOptions completedServerRunOptions, stopCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;)</span></span> (*aggregatorapiserver.APIAggregator, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 回环证书在此创建</span></span><br><span class=\"line\">    kubeAPIServerConfig, serviceResolver, pluginInitializer, err := CreateKubeAPIServerConfig(completedOptions)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CreateKubeAPIServerConfig</span><span class=\"params\">(s completedServerRunOptions)</span></span> (</span><br><span class=\"line\">    *controlplane.Config,</span><br><span class=\"line\">    aggregatorapiserver.ServiceResolver,</span><br><span class=\"line\">    []admission.PluginInitializer,</span><br><span class=\"line\">    <span class=\"type\">error</span>,</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">    genericConfig, versionedInformers, serviceResolver, pluginInitializers, admissionPostStartHook, storageFactory, err := buildGenericConfig(s.ServerRunOptions, proxyTransport)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BuildGenericConfig takes the master server options and produces the genericapiserver.Config associated with it</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buildGenericConfig</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    s *options.ServerRunOptions,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    proxyTransport *http.Transport,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">)</span></span> (</span><br><span class=\"line\">    genericConfig *genericapiserver.Config,</span><br><span class=\"line\">    versionedInformers clientgoinformers.SharedInformerFactory,</span><br><span class=\"line\">    serviceResolver aggregatorapiserver.ServiceResolver,</span><br><span class=\"line\">    pluginInitializers []admission.PluginInitializer,</span><br><span class=\"line\">    admissionPostStartHook genericapiserver.PostStartHookFunc,</span><br><span class=\"line\">    storageFactory *serverstorage.DefaultStorageFactory,</span><br><span class=\"line\">    lastErr <span class=\"type\">error</span>,</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    genericConfig = genericapiserver.NewConfig(legacyscheme.Codecs)</span><br><span class=\"line\">    genericConfig.MergedResourceConfig = controlplane.DefaultAPIResourceConfigSource()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> lastErr = s.GenericServerRunOptions.ApplyTo(genericConfig); lastErr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将生成的回环客户端赋值给genericConfig</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> lastErr = s.SecureServing.ApplyTo(&amp;genericConfig.SecureServing, &amp;genericConfig.LoopbackClientConfig); lastErr != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./k8s.io/apiserver/pkg/server/options/serving_with_loopback.go</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *SecureServingOptionsWithLoopback)</span></span> ApplyTo(secureServingInfo **server.SecureServingInfo, loopbackClientConfig **rest.Config) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s == <span class=\"literal\">nil</span> || s.SecureServingOptions == <span class=\"literal\">nil</span> || secureServingInfo == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 将正式放到SNICerts,给http服务使用</span></span><br><span class=\"line\">    (*secureServingInfo).SNICerts = <span class=\"built_in\">append</span>([]dynamiccertificates.SNICertKeyContentProvider&#123;certProvider&#125;, (*secureServingInfo).SNICerts...)</span><br><span class=\"line\">    secureLoopbackClientConfig, err := (*secureServingInfo).NewLoopbackClientConfig(uuid.New().String(), certPem) <span class=\"comment\">// 使用生成的证书创建一个reset客户端</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// if we failed and there&#x27;s no fallback loopback client config, we need to fail</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> err != <span class=\"literal\">nil</span> &amp;&amp; *loopbackClientConfig == <span class=\"literal\">nil</span>:</span><br><span class=\"line\">        (*secureServingInfo).SNICerts = (*secureServingInfo).SNICerts[<span class=\"number\">1</span>:]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// if we failed, but we already have a fallback loopback client config (usually insecure), allow it</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> err != <span class=\"literal\">nil</span> &amp;&amp; *loopbackClientConfig != <span class=\"literal\">nil</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        *loopbackClientConfig = secureLoopbackClientConfig <span class=\"comment\">// 传回结构体</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./k8s.io/client-go/util/cert/cert.go</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GenerateSelfSignedCertKey creates a self-signed certificate and key for the given host.</span></span><br><span class=\"line\"><span class=\"comment\">// Host may be an IP or a DNS name</span></span><br><span class=\"line\"><span class=\"comment\">// You may also specify additional subject alt names (either ip or dns names) for the certificate.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GenerateSelfSignedCertKey</span><span class=\"params\">(host <span class=\"type\">string</span>, alternateIPs []net.IP, alternateDNS []<span class=\"type\">string</span>)</span></span> ([]<span class=\"type\">byte</span>, []<span class=\"type\">byte</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> GenerateSelfSignedCertKeyWithFixtures(host, alternateIPs, alternateDNS, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GenerateSelfSignedCertKeyWithFixtures</span><span class=\"params\">(host <span class=\"type\">string</span>, alternateIPs []net.IP, alternateDNS []<span class=\"type\">string</span>, fixtureDirectory <span class=\"type\">string</span>)</span></span> ([]<span class=\"type\">byte</span>, []<span class=\"type\">byte</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    validFrom := time.Now().Add(-time.Hour) <span class=\"comment\">// valid an hour earlier to avoid flakes due to clock skew</span></span><br><span class=\"line\">    maxAge := time.Hour * <span class=\"number\">24</span> * <span class=\"number\">365</span>         <span class=\"comment\">// one year self-signed certs # 这里就是控制证书过期的时间</span></span><br><span class=\"line\"></span><br><span class=\"line\">    baseName := fmt.Sprintf(<span class=\"string\">&quot;%s_%s_%s&quot;</span>, host, strings.Join(ipsToStrings(alternateIPs), <span class=\"string\">&quot;-&quot;</span>), strings.Join(alternateDNS, <span class=\"string\">&quot;-&quot;</span>))</span><br><span class=\"line\">    certFixturePath := filepath.Join(fixtureDirectory, baseName+<span class=\"string\">&quot;.crt&quot;</span>)</span><br><span class=\"line\">    keyFixturePath := filepath.Join(fixtureDirectory, baseName+<span class=\"string\">&quot;.key&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(fixtureDirectory) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        cert, err := ioutil.ReadFile(certFixturePath)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            key, err := ioutil.ReadFile(keyFixturePath)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> cert, key, <span class=\"literal\">nil</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;cert %s can be read, but key %s cannot: %v&quot;</span>, certFixturePath, keyFixturePath, err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        maxAge = <span class=\"number\">100</span> * time.Hour * <span class=\"number\">24</span> * <span class=\"number\">365</span> <span class=\"comment\">// 100 years fixtures</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">    caTemplate := x509.Certificate&#123;</span><br><span class=\"line\">        SerialNumber: big.NewInt(<span class=\"number\">1</span>),</span><br><span class=\"line\">        Subject: pkix.Name&#123;</span><br><span class=\"line\">            CommonName: fmt.Sprintf(<span class=\"string\">&quot;%s-ca@%d&quot;</span>, host, time.Now().Unix()),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        NotBefore: validFrom,</span><br><span class=\"line\">        NotAfter:  validFrom.Add(maxAge),</span><br><span class=\"line\"></span><br><span class=\"line\">        KeyUsage:              x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature | x509.KeyUsageCertSign,</span><br><span class=\"line\">        BasicConstraintsValid: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        IsCA:                  <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>到此位置生成的证书和回环客户端完成，其中回环客户端复制给了<code>controlplane.Config.LoopbackClientConfig</code>,证书给了<code>controlplane.Config.SNICerts</code></li>\n</ul>\n<h4 id=\"使用证书\"><a href=\"#使用证书\" class=\"headerlink\" title=\"使用证书\"></a>使用证书</h4><ul>\n<li>使用证书的地方为</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">staging/src/k8s.io/apiserver/pkg/server/genericapiserver.go</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s preparedGenericAPIServer)</span></span> Run(stopCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">    stoppedCh, listenerStoppedCh, err := s.NonBlockingRun(stopHttpServerCh, shutdownTimeout)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s preparedGenericAPIServer)</span></span> NonBlockingRun(stopCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;, shutdownTimeout time.Duration) (&lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;, &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s.SecureServingInfo != <span class=\"literal\">nil</span> &amp;&amp; s.Handler != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> err <span class=\"type\">error</span></span><br><span class=\"line\">        stoppedCh, listenerStoppedCh, err = s.SecureServingInfo.Serve(s.Handler, shutdownTimeout, internalStopCh)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">close</span>(internalStopCh)</span><br><span class=\"line\">            <span class=\"built_in\">close</span>(auditStopCh)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">    s.RunPostStartHooks(stopCh) <span class=\"comment\">//启动之前注册的hook</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> _, err := systemd.SdNotify(<span class=\"literal\">true</span>, <span class=\"string\">&quot;READY=1\\n&quot;</span>); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        klog.Errorf(<span class=\"string\">&quot;Unable to send systemd daemon successful start message: %v\\n&quot;</span>, err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>继续跳转到<code>server()</code></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *SecureServingInfo)</span></span> Serve(handler http.Handler, shutdownTimeout time.Duration, stopCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;) (&lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;, &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    tlsConfig, err := s.tlsConfig(stopCh) <span class=\"comment\">// 这里配置http的证书</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *SecureServingInfo)</span></span> tlsConfig(stopCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;) (*tls.Config, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建了基本的tls.config</span></span><br><span class=\"line\">    tlsConfig := &amp;tls.Config&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Can&#x27;t use SSLv3 because of POODLE and BEAST</span></span><br><span class=\"line\">        <span class=\"comment\">// Can&#x27;t use TLSv1.0 because of POODLE and BEAST using CBC cipher</span></span><br><span class=\"line\">        <span class=\"comment\">// Can&#x27;t use TLSv1.1 because of RC4 cipher usage</span></span><br><span class=\"line\">        MinVersion: tls.VersionTLS12,</span><br><span class=\"line\">        <span class=\"comment\">// enable HTTP2 for go&#x27;s 1.7 HTTP Server</span></span><br><span class=\"line\">        NextProtos: []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;h2&quot;</span>, <span class=\"string\">&quot;http/1.1&quot;</span>&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">... </span><br><span class=\"line\">    <span class=\"comment\">// 创建了一个动态证书控制器</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> s.ClientCA != <span class=\"literal\">nil</span> || s.Cert != <span class=\"literal\">nil</span> || <span class=\"built_in\">len</span>(s.SNICerts) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        dynamicCertificateController := dynamiccertificates.NewDynamicServingCertificateController(</span><br><span class=\"line\">            tlsConfig,</span><br><span class=\"line\">            s.ClientCA,</span><br><span class=\"line\">            s.Cert,</span><br><span class=\"line\">            s.SNICerts,</span><br><span class=\"line\">            <span class=\"literal\">nil</span>, <span class=\"comment\">// TODO see how to plumb an event recorder down in here. For now this results in simply klog messages.</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">...</span><br><span class=\"line\">        <span class=\"keyword\">for</span> _, sniCert := <span class=\"keyword\">range</span> s.SNICerts &#123;</span><br><span class=\"line\">            sniCert.AddListener(dynamicCertificateController)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> controller, ok := sniCert.(dynamiccertificates.ControllerRunner); ok &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// runonce to try to prime data.  If this fails, it&#x27;s ok because we fail closed.</span></span><br><span class=\"line\">                    <span class=\"comment\">// Files are required to be populated already, so this is for convenience.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> err := controller.RunOnce(ctx); err != <span class=\"literal\">nil</span> &#123; <span class=\"comment\">//</span></span><br><span class=\"line\">                    klog.Warningf(<span class=\"string\">&quot;Initial population of SNI serving certificate failed: %v&quot;</span>, err)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">go</span> controller.Run(ctx, <span class=\"number\">1</span>) <span class=\"comment\">// 同步证书</span></span><br><span class=\"line\">        </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">tlsConfig.GetConfigForClient = dynamicCertificateController.GetConfigForClient <span class=\"comment\">// 设置了这个参数之后，接受到https请求之后会调用这个</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用客户端\"><a href=\"#使用客户端\" class=\"headerlink\" title=\"使用客户端\"></a>使用客户端</h4><ul>\n<li>回环证书在很多地方回到<code>CreateServerChain</code>这里</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里已经有调用了</span></span><br><span class=\"line\">    apiExtensionsConfig, err := createAPIExtensionsConfig(*kubeAPIServerConfig.GenericConfig, kubeAPIServerConfig.ExtraConfig.VersionedInformers, pluginInitializer, completedOptions.ServerRunOptions, completedOptions.MasterCount,</span><br><span class=\"line\">        serviceResolver, webhook.NewDefaultAuthenticationInfoResolverWrapper(kubeAPIServerConfig.ExtraConfig.ProxyTransport, kubeAPIServerConfig.GenericConfig.EgressSelector, kubeAPIServerConfig.GenericConfig.LoopbackClientConfig, kubeAPIServerConfig.GenericConfig.TracerProvider)) <span class=\"comment\">// TODO</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>最多为hook使用，在http服务启动之后前面注册的hook就开始执行其中传入了回环证书</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RunPostStartHooks runs the PostStartHooks for the server</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *GenericAPIServer)</span></span> RunPostStartHooks(stopCh &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>&#123;&#125;) &#123;</span><br><span class=\"line\">    s.postStartHookLock.Lock()</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> s.postStartHookLock.Unlock()</span><br><span class=\"line\">    s.postStartHooksCalled = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    context := PostStartHookContext&#123;</span><br><span class=\"line\">        LoopbackClientConfig: s.LoopbackClientConfig, <span class=\"comment\">//使用了回环</span></span><br><span class=\"line\">        StopCh:               stopCh,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> hookName, hookEntry := <span class=\"keyword\">range</span> s.postStartHooks &#123; <span class=\"comment\">// 将前面注册的hook全部启动</span></span><br><span class=\"line\">        <span class=\"keyword\">go</span> runPostStartHook(hookName, hookEntry, context)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><ul>\n<li><p>一个服务多个证书，其实就是通过<code>tsl.Config.GetConfigForClient</code>来实现</p>\n</li>\n<li><p>为什么要loopback,从代码来看apiserve本身也需要请求一个资源，比如校验参数的正确性,如果不请求自己就需要从新写一套从etcd获取的逻辑，这样就逻辑重复了</p>\n</li>\n<li><p>除了一些零散的调用主要是通过AddPostStartHookOrDie注册的hook在启动后调用</p>\n</li>\n</ul>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2NTU3NjgxOA==&amp;action=getalbum&amp;album_id=2958341226519298049&amp;scene=173&amp;from_msgid=2247488299&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect\">https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2NTU3NjgxOA==&amp;action=getalbum&amp;album_id=2958341226519298049&amp;scene=173&amp;from_msgid=2247488299&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect</a></p>\n<p><a href=\"https://github.com/kubernetes/kubernetes/issues/86552\">https://github.com/kubernetes/kubernetes/issues/86552</a></p>\n","tags":["k8s"]},{"title":"k8s-service网络","url":"/2022/12/14/k8s-service%E7%BD%91%E7%BB%9C/","content":"<p>k8s service是对一组pod进行抽象的方法</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>pod并不是永久的随时可以销毁的，那么他ip也会变的，这样的话就需要一种方法来作为pod的”前端“来转发到pod上去</p>\n</blockquote>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>service的ip是虚拟的他的具体实现程序是<code>kube-proxy</code></p>\n<p><img src=\"/../images/kube-svc-1.png\" alt=\"svc\"></p>\n<p>如图，流量被service给负载到后端当中，对于用户来说只要访问service即可</p>\n<p>kub-proxy有目前主要有四种</p>\n<ul>\n<li>用户空间: 早期的方案，所有策略都在用户空间效率比较差</li>\n<li>iptables: iptables在内核空间，主要通过nat实现，由于iptables是一个一个匹配所有规则多时效果延迟比较大</li>\n<li>ipvs: 和iptables类似只不过使用了ipvs</li>\n<li>ebpf: 最新的技术速度快效率高，但对内核版本要求比较高</li>\n</ul>\n<p>目前主流使用iptables和ipvs，所以主要说iptables和ipvs</p>\n<p><img src=\"/../images/kube-svc-1.png\" alt=\"svc\"></p>\n<h5 id=\"kube-proxy\"><a href=\"#kube-proxy\" class=\"headerlink\" title=\"kube-proxy\"></a>kube-proxy</h5><h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">foo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> <span class=\"comment\"># 选择需要负载到pod</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">foo</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span> <span class=\"comment\"># 服务的端口</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span> <span class=\"comment\"># pod的端口</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span> <span class=\"comment\"># 类型，默认ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n<p>将上面的保存为foo.yaml然后执行<code>kubectl apply -f foo.yaml</code>即可创建一个svc</p>\n<h4 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h4><p>k8s的服务类型拥有很多种，根据实际情况选择</p>\n<h5 id=\"ClusterIP\"><a href=\"#ClusterIP\" class=\"headerlink\" title=\"ClusterIP\"></a>ClusterIP</h5><p>默认的类型,创建一个虚拟的ip并将选择器选择的pod的ip作为这个虚拟ip的后端</p>\n<h5 id=\"NodePort\"><a href=\"#NodePort\" class=\"headerlink\" title=\"NodePort\"></a>NodePort</h5><p>和ClusterIP基本一致，但是会将端口映射到所有集群中所有的节点上,端口范围默认是3000以上</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">foo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">externalTrafficPolicy:</span> <span class=\"string\">Cluster</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">foo</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Headless\"><a href=\"#Headless\" class=\"headerlink\" title=\"Headless\"></a>Headless</h5><p>和ClusterIP基本一致，只是没有虚拟ip同时失去了lb的功能,<code>kube-proxy</code>不会处理此svc且dns返回对应ep的所有地址，常用于<code>服务发现</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">foo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span> </span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">foo</span></span><br><span class=\"line\">  <span class=\"attr\">clusterIP:</span> <span class=\"string\">None</span> <span class=\"comment\"># 指定为none</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span> </span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span> </span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"LoadBalancer\"><a href=\"#LoadBalancer\" class=\"headerlink\" title=\"LoadBalancer\"></a>LoadBalancer</h5><p>这个类型一般只有云服务商只能使用，创建这个服务的同时在云服务商的lb服务商上创建了一个实例</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">foo-loadbalancer</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">externalTrafficPolicy:</span> <span class=\"string\">Cluster</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">800</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">foo</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">LoadBalancer</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ExternalName\"><a href=\"#ExternalName\" class=\"headerlink\" title=\"ExternalName\"></a>ExternalName</h5><p>外部的服务对内部的一个别名，比如web的域名是10.23.83.9.sslip.io，则在集群中可以使用web来访问10.23.83.9.sslip.io,</p>\n<p>没有选择器,kube-proxy不会创建规则,仅在dns层面完成</p>\n<p>externalName为dns地址如果是ip的话dns无法解析,而且如果是http(s)将可能无法访问，因为你访问的是<code>a</code>,而对应的服务只接受<code>b</code>域名</p>\n<p>解决方法使用类似&lt;sslip.io&gt;这种域名来通过域名动态解析到ip上</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">web</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">externalName:</span> <span class=\"number\">10.23</span><span class=\"number\">.83</span><span class=\"number\">.9</span><span class=\"string\">.sslip.io</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">tcp</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">sessionAffinity:</span> <span class=\"string\">None</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ExternalName</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"外部IP\"><a href=\"#外部IP\" class=\"headerlink\" title=\"外部IP\"></a>外部IP</h5><p>可以将一个外部地址导入到集群内部对应的服务里,在本地请求</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">cdebug</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">http</span></span><br><span class=\"line\">      <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">      <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">externalIPs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">1.1</span><span class=\"number\">.1</span><span class=\"number\">.1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用效果如下</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@10-23-141-183 ~]# kubectl get svc my-service</span><br><span class=\"line\">NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)   AGE</span><br><span class=\"line\">my-service   ClusterIP   172.17.4.228   1.1.1.1       80/TCP    19h</span><br><span class=\"line\">[root@10-23-141-183 ~]# curl 1.1.1.1</span><br><span class=\"line\">ClientAddr: 10.23.141.183:52416</span><br><span class=\"line\">ClientReqPath: /</span><br><span class=\"line\">ClientReqMeth: GET</span><br><span class=\"line\">ServerHostName: cdebug-77cc4fc98f-rv9hn</span><br><span class=\"line\">ServerAddr: 10.23.8.140</span><br><span class=\"line\">[root@10-23-141-183 ~]#                                                                                 </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"指定后端Endpoints\"><a href=\"#指定后端Endpoints\" class=\"headerlink\" title=\"指定后端Endpoints\"></a>指定后端Endpoints</h5><ul>\n<li>可以手动创建可以svc同名的ep来指定一个svc的对应的ep</li>\n</ul>\n<h4 id=\"流量策略\"><a href=\"#流量策略\" class=\"headerlink\" title=\"流量策略\"></a>流量策略</h4><p>流量策略主要解决在拥有众多ep的服务在转发流量时有些pod距离访问的node比较远导致延迟增大</p>\n<p>目前拥有2种策略，<code>cluster</code>和<code>local</code></p>\n<ul>\n<li><p>cluster(默认):会将流量转发到所有节点的pod当中,但有可能pod在其他节点或者其他地域上会导致延迟</p>\n</li>\n<li><p>local: 只会将流量转发本地的pod上，不会转发到其他node上的pod,拥有较好的性能</p>\n</li>\n</ul>\n<p><img src=\"/../images/kube-svc-3.png\" alt=\"kube-svc\"></p>\n<h5 id=\"internalTrafficPolicy\"><a href=\"#internalTrafficPolicy\" class=\"headerlink\" title=\"internalTrafficPolicy\"></a>internalTrafficPolicy</h5><ul>\n<li>主要针对pod访问svc的策略</li>\n</ul>\n<h5 id=\"externalTrafficPolicy\"><a href=\"#externalTrafficPolicy\" class=\"headerlink\" title=\"externalTrafficPolicy\"></a>externalTrafficPolicy</h5><ul>\n<li>针对外面通过node port访问集群的svc</li>\n</ul>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><h5 id=\"iptables\"><a href=\"#iptables\" class=\"headerlink\" title=\"iptables\"></a>iptables</h5><h5 id=\"规则分析\"><a href=\"#规则分析\" class=\"headerlink\" title=\"规则分析\"></a>规则分析</h5><h6 id=\"PREROUTING\"><a href=\"#PREROUTING\" class=\"headerlink\" title=\"PREROUTING\"></a>PREROUTING</h6><ul>\n<li><code>PREROUTING</code>链的nat表是所有svc的入口,进入的流量都会到<code>KUBE-SERVICES</code>这条自定义链</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL PREROUTING -t nat</span><br><span class=\"line\">Chain PREROUTING (policy ACCEPT 1 packets, 60 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">   57  3492 KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */</span><br><span class=\"line\">    2   192 DOCKER_OUTPUT  all  --  *      *       0.0.0.0/0            192.168.65.2        </span><br><span class=\"line\">   57  3420 DOCKER     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<code>KUBE-SERVICES</code>中就是我们定义的svc对应的规则,来源地址是任何目标地址是<code>clusterIP</code>时,匹配对应svc的自定义链</li>\n<li>其中<code>KUBE-NODEPORTS</code>是处理nodePort类型的规则</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL KUBE-SERVICES -t nat </span><br><span class=\"line\">Chain KUBE-SERVICES (2 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    0     0 KUBE-SVC-NPX46M4PTMTKRN6Y  tcp  --  *      *       0.0.0.0/0            10.96.0.1            /* default/kubernetes:https cluster IP */ tcp dpt:443</span><br><span class=\"line\">    0     0 KUBE-SVC-JD5MR3NA4I4DYORP  tcp  --  *      *       0.0.0.0/0            10.96.0.10           /* kube-system/kube-dns:metrics cluster IP */ tcp dpt:9153</span><br><span class=\"line\">    0     0 KUBE-SVC-TCOU7JCQXEZGVUNU  udp  --  *      *       0.0.0.0/0            10.96.0.10           /* kube-system/kube-dns:dns cluster IP */ udp dpt:53</span><br><span class=\"line\">    0     0 KUBE-SVC-ERIFXISQEP7F7OF4  tcp  --  *      *       0.0.0.0/0            10.96.0.10           /* kube-system/kube-dns:dns-tcp cluster IP */ tcp dpt:53</span><br><span class=\"line\">    0     0 KUBE-SVC-ZZYI5KMAZUYAMTQ6  tcp  --  *      *       0.0.0.0/0            10.98.178.225        /* default/cdebug cluster IP */ tcp dpt:80</span><br><span class=\"line\"> 1043 62580 KUBE-NODEPORTS  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service nodeports; NOTE: this must be the last rule in this chain */ ADDRTYPE match dst-type LOCAL</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<code>KUBE-SVC-ZZYI5KMAZUYAMTQ6</code>这条自定义链中定义了具体的nat地址,当原地址不是10.244.0.0&#x2F;16目标是clusterIP时会进入一个打标签的自定义链</li>\n<li>下面2条是每一条分别对应<code>svc</code>的<code>ep</code>,进入第一条的几率是50%通过<code>random</code>,实现了负载均衡</li>\n<li>10.244.0.0&#x2F;16是<code>kube-proxy</code>的<code>clusterCIDR</code>设置,作用是区别流量是否是pod的流量以用来直接访问svc参考<a href=\"https://blog.csdn.net/shida_csdn/article/details/104334372\">https://blog.csdn.net/shida_csdn/article/details/104334372</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL KUBE-SVC-ZZYI5KMAZUYAMTQ6 -t nat</span><br><span class=\"line\">Chain KUBE-SVC-ZZYI5KMAZUYAMTQ6 (2 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  tcp  --  *      *      !10.244.0.0/16        10.98.178.225        /* default/cdebug cluster IP */ tcp dpt:80</span><br><span class=\"line\">    0     0 KUBE-SEP-36ZFR6ZLFG6NGI5P  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/cdebug -&gt; 172.17.0.4:80 */ statistic mode random probability 0.50000000000</span><br><span class=\"line\">    0     0 KUBE-SEP-4E32UMZN7V2DQATS  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/cdebug -&gt; 172.17.0.5:80 */</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<code>KUBE-MARK-MASQ</code>是个标记的链他会将流量打上<code>0x4000</code>标签,该流量将在<code>PODTROUTNG</code>链中的<code>KUBE-POSTROUTING</code>被执行snat</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL KUBE-MARK-MASQ -t nat</span><br><span class=\"line\">Chain KUBE-MARK-MASQ (8 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    0     0 MARK       all  --  *      *       0.0.0.0/0            0.0.0.0/0            MARK or 0x4000</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这里对来源是<code>172.17.0.4(ep)</code>的进行打标签，同时进行了DNAT到了ep</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL KUBE-SEP-36ZFR6ZLFG6NGI5P -t nat</span><br><span class=\"line\">Chain KUBE-SEP-36ZFR6ZLFG6NGI5P (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  all  --  *      *       172.17.0.4           0.0.0.0/0            /* default/cdebug */</span><br><span class=\"line\">    0     0 DNAT       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/cdebug */ tcp to:172.17.0.4:80</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>KUBE-NODEPORTS</code>下是存放nodePort的规则,打标签之后进入了svc</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL KUBE-NODEPORTS -t nat</span><br><span class=\"line\">Chain KUBE-NODEPORTS (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    0     0 KUBE-EXT-ZZYI5KMAZUYAMTQ6  tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            /* default/cdebug */ tcp dpt:32753</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>具体内容和<code>KUBE-SERVICES</code>里一样的规则复用了每个svc创建的链</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL KUBE-EXT-ZZYI5KMAZUYAMTQ6  -t nat</span><br><span class=\"line\">Chain KUBE-EXT-ZZYI5KMAZUYAMTQ6 (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    2   120 KUBE-MARK-MASQ  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* masquerade traffic for default/cdebug external destinations */</span><br><span class=\"line\">    2   120 KUBE-SVC-ZZYI5KMAZUYAMTQ6  all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br></pre></td></tr></table></figure>\n\n<h6 id=\"INPUT\"><a href=\"#INPUT\" class=\"headerlink\" title=\"INPUT\"></a>INPUT</h6><ul>\n<li>这里主要实现了一些防火墙规则</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL INPUT -t filter</span><br><span class=\"line\">Chain INPUT (policy ACCEPT 279K packets, 37M bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\"> 647K   39M KUBE-PROXY-FIREWALL  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate NEW /* kubernetes load balancer firewall */</span><br><span class=\"line\">  75M   10G KUBE-NODEPORTS  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes health check service ports */</span><br><span class=\"line\"> 647K   39M KUBE-EXTERNAL-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate NEW /* kubernetes externally-visible service portals */</span><br><span class=\"line\">  75M   10G KUBE-FIREWALL  all  --  *      *       0.0.0.0/0            0.0.0.0/0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL  KUBE-PROXY-FIREWALL -t filter </span><br><span class=\"line\">Chain KUBE-PROXY-FIREWALL (3 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL  KUBE-NODEPORTS -t filter</span><br><span class=\"line\">Chain KUBE-NODEPORTS (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL  KUBE-EXTERNAL-SERVICES -t filter</span><br><span class=\"line\">Chain KUBE-EXTERNAL-SERVICES (2 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这个将丢弃标签为<code>0x8000</code>的流量还有源头不是<code>127.0.0.0/8</code>目标是<code>127.0.0.0/8</code>状态是RELATED,ESTABLISHED,DNAT的流量</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL KUBE-FIREWALL -t filter</span><br><span class=\"line\">Chain KUBE-FIREWALL (2 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    0     0 DROP       all  --  *      *      !127.0.0.0/8          127.0.0.0/8          /* block incoming localnet connections */ ! ctstate RELATED,ESTABLISHED,DNAT</span><br><span class=\"line\">    0     0 DROP       all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes firewall for dropping marked packets */ mark match 0x8000/0x8000</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"FORWARD\"><a href=\"#FORWARD\" class=\"headerlink\" title=\"FORWARD\"></a>FORWARD</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL FORWARD -t filter</span><br><span class=\"line\">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    0     0 KUBE-PROXY-FIREWALL  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate NEW /* kubernetes load balancer firewall */</span><br><span class=\"line\">    0     0 KUBE-FORWARD  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes forwarding rules */</span><br><span class=\"line\">    0     0 KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate NEW /* kubernetes service portals */</span><br><span class=\"line\">    0     0 KUBE-EXTERNAL-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate NEW /* kubernetes externally-visible service portals */</span><br><span class=\"line\">    0     0 DOCKER-USER  all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class=\"line\">    0     0 DOCKER-ISOLATION-STAGE-1  all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br><span class=\"line\">    0     0 ACCEPT     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED</span><br><span class=\"line\">    0     0 DOCKER     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class=\"line\">    0     0 ACCEPT     all  --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0           </span><br><span class=\"line\">    0     0 ACCEPT     all  --  docker0 docker0  0.0.0.0/0            0.0.0.0/0  </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL  KUBE-FORWARD  -t filter</span><br><span class=\"line\">Chain KUBE-FORWARD (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\">    0     0 DROP       all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate INVALID</span><br><span class=\"line\">    0     0 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes forwarding rules */ mark match 0x4000/0x4000</span><br><span class=\"line\">    0     0 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes forwarding conntrack rule */ ctstate RELATED,ESTABLISHED</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"OUTPUT\"><a href=\"#OUTPUT\" class=\"headerlink\" title=\"OUTPUT\"></a>OUTPUT</h6><ul>\n<li>这里继续会有一个<code>KUBE-SERVICES</code>这个链用于处理节点上访问svc</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL OUTPUT -t nat</span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT 3995 packets, 240K bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\"> 748K   45M KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */</span><br><span class=\"line\">  130  8116 DOCKER_OUTPUT  all  --  *      *       0.0.0.0/0            192.168.65.2        </span><br><span class=\"line\"> 499K   30M DOCKER     all  --  *      *       0.0.0.0/0           !127.0.0.0/8          ADDRTYPE match dst-type LOCAL</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL OUTPUT -t filter</span><br><span class=\"line\">Chain OUTPUT (policy ACCEPT 368K packets, 49M bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\"> 748K   45M KUBE-PROXY-FIREWALL  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate NEW /* kubernetes load balancer firewall */</span><br><span class=\"line\"> 748K   45M KUBE-SERVICES  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate NEW /* kubernetes service portals */</span><br><span class=\"line\">  75M 9999M KUBE-FIREWALL  all  --  *      *       0.0.0.0/0            0.0.0.0/0           </span><br></pre></td></tr></table></figure>\n\n<h6 id=\"POSTROUTING\"><a href=\"#POSTROUTING\" class=\"headerlink\" title=\"POSTROUTING\"></a>POSTROUTING</h6><ul>\n<li>整个流程中最后一个地点，这里主要对前面打了<code>0x4000/0x4000</code>的标签进行snat</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL POSTROUTING -t nat   </span><br><span class=\"line\">Chain POSTROUTING (policy ACCEPT 4112 packets, 247K bytes)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\"> 748K   45M KUBE-POSTROUTING  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes postrouting rules */</span><br><span class=\"line\">    0     0 MASQUERADE  all  --  *      !docker0  172.17.0.0/16        0.0.0.0/0           </span><br><span class=\"line\">    0     0 DOCKER_POSTROUTING  all  --  *      *       0.0.0.0/0            192.168.65.2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@minikube:~# iptables -nvL KUBE-POSTROUTING -t nat</span><br><span class=\"line\">Chain KUBE-POSTROUTING (1 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination         </span><br><span class=\"line\"> 4253  255K RETURN     all  --  *      *       0.0.0.0/0            0.0.0.0/0            mark match ! 0x4000/0x4000</span><br><span class=\"line\">    0     0 MARK       all  --  *      *       0.0.0.0/0            0.0.0.0/0            MARK xor 0x4000</span><br><span class=\"line\">    0     0 MASQUERADE  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* kubernetes service traffic requiring SNAT */ random-fully</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h6><p><img src=\"/../images/kube-svc-7.png\" alt=\"svc\"></p>\n<blockquote>\n<p>流程图</p>\n</blockquote>\n<p><img src=\"/../images/kube-proxy-iptables-nat-control-flow.svg\" alt=\"Alt text\"></p>\n<h5 id=\"集群外访问NodePort\"><a href=\"#集群外访问NodePort\" class=\"headerlink\" title=\"集群外访问NodePort\"></a>集群外访问NodePort</h5><p>集群外部一台服务器(10.23.83.9)通过<code>nodePort</code>请求集群的cdebug这个服务</p>\n<p>cdebug服务详情</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ k get svc -o wide</span><br><span class=\"line\">NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE    SELECTOR</span><br><span class=\"line\">cdebug       NodePort    172.17.102.133   &lt;none&gt;        80:32577/TCP   5d2h   app=cdebug</span><br><span class=\"line\">kubernetes   ClusterIP   172.17.0.1       &lt;none&gt;        443/TCP        5d2h   &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">❯ k get po -l app=cdebug -o wide</span><br><span class=\"line\">NAME                      READY   STATUS    RESTARTS   AGE    IP            NODE            NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">cdebug-77cc4fc98f-rv9hn   1/1     Running   0          5d1h   10.23.8.140   10.23.142.106   &lt;none&gt;           &lt;none&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">❯ kubectl get po nginx -o wide</span><br><span class=\"line\">NAME    READY   STATUS    RESTARTS   AGE   IP              NODE            NOMINATED NODE   READINESS GATES</span><br><span class=\"line\">nginx   1/1     Running   0          22h   10.23.246.131   10.23.142.106   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这是在请求的node上抓包</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">发送</span><br><span class=\"line\">10.23.83.9:36848 &gt; 10.23.142.106:32577</span><br><span class=\"line\">10.23.142.106:36848 &gt; 10.23.8.140:80</span><br><span class=\"line\"></span><br><span class=\"line\">返回</span><br><span class=\"line\">10.23.8.140:80 &gt; 10.23.142.106:36848</span><br><span class=\"line\">10.23.142.106:32577 &gt; 10.23.83.9:36848</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/kube-svc-4.png\" alt=\"svc\"></p>\n<p>可以看到客户端请求集群的nodePort，iptables目的地址改为对应的pod地址,源地址则是nodePort的地址,所以pod<code>不知道真正的客户端是谁</code><br>即pod看到的请求来自<code>请求的nodePort所在的node</code><br>这里做了</p>\n<ul>\n<li>在netfilter流向,这里充当了一个路由器防火墙</li>\n</ul>\n<p><img src=\"/../images/kube-svc-5.png\" alt=\"svc\"></p>\n<h5 id=\"集群内节点访问NodePort\"><a href=\"#集群内节点访问NodePort\" class=\"headerlink\" title=\"集群内节点访问NodePort\"></a>集群内节点访问NodePort</h5><p>和集群外访问NodePort差不多,最终pod的看到的源地址为访问所在的node的地址</p>\n<h5 id=\"POD访问SVC\"><a href=\"#POD访问SVC\" class=\"headerlink\" title=\"POD访问SVC\"></a>POD访问SVC</h5><p>发送<br>10.23.246.131:38906 &gt; 172.17.102.133:80<br>10.23.246.131:38906 &gt; 10.23.8.140:80</p>\n<p>响应<br>10.23.8.140:80    &gt; 10.23.246.131:38906<br>172.17.102.133:80 &gt; 10.23.246.131:38906</p>\n<p><img src=\"/../images/kube-svc-6.png\" alt=\"svc\"></p>\n<p>路径和访问NodePort差不都只不过没有做SNAT只做了DNAT,也就是说集群POD访问SVC是可以知道客户端的真实地址</p>\n<h4 id=\"kube-proxy修改为ipvs\"><a href=\"#kube-proxy修改为ipvs\" class=\"headerlink\" title=\"kube-proxy修改为ipvs\"></a>kube-proxy修改为ipvs</h4><ul>\n<li>去人内核模块是否有ipvs</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">lsmos|grep ip_vs</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据情况是否安装ipvsadm管理工具</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install ipvsadm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>kube-proxy配置文件中<code>mode</code>,改为<code>ipvs</code>即可切换为ipvs,如果是<code>ds</code>运行的话需要重启pod</li>\n</ul>\n<h4 id=\"ipvs\"><a href=\"#ipvs\" class=\"headerlink\" title=\"ipvs\"></a>ipvs</h4><p>总体来说ipvs相比iptables要简单一些</p>\n<ul>\n<li><p>创建了一个名为<code>kube-ipvs0</code>的<code>dummy</code>类型网卡，该网卡上会有所有<code>CluserIP</code>的地址,用于让该ip的流量进入协议栈，不然网卡发现本地没该地址流量被丢弃</p>\n</li>\n<li><p>iptables上会通过创建一些规则,使用<code>ipset</code>提升性能</p>\n</li>\n<li><p>创建ipvs转发规则,使用nat模式</p>\n</li>\n</ul>\n<h5 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h5><ul>\n<li>一个svc叫cdebug详情如下</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl get svc cdebug</span></span><br><span class=\"line\">NAME     TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class=\"line\">cdebug   NodePort   172.17.102.133   &lt;none&gt;        80:32577/TCP   25d</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubectl get ep  cdebug</span></span><br><span class=\"line\">NAME     ENDPOINTS          AGE</span><br><span class=\"line\">cdebug   10.23.169.107:80   25d</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"网卡\"><a href=\"#网卡\" class=\"headerlink\" title=\"网卡\"></a>网卡</h6><ul>\n<li>节点上的kube-ipvs0网卡上可以看到这个svc的<code>ClusterIP</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ip -s addr show kube-ipvs0 |grep 172.17.102.133</span></span><br><span class=\"line\">    inet 172.17.102.133/32 scope global kube-ipvs0</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ipvs规则\"><a href=\"#ipvs规则\" class=\"headerlink\" title=\"ipvs规则\"></a>ipvs规则</h6><ul>\n<li>同时ipvs的规则中rs为svc对应的ep也就是pod的地址转发规则为<code>rr</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ipvsadm -Ln -t 172.17.102.133:80</span></span><br><span class=\"line\">Prot LocalAddress:Port Scheduler Flags</span><br><span class=\"line\"><span class=\"meta prompt_\">  -&gt; </span><span class=\"language-bash\">RemoteAddress:Port           Forward Weight ActiveConn InActConn</span></span><br><span class=\"line\">TCP  172.17.102.133:80 rr</span><br><span class=\"line\"><span class=\"meta prompt_\">  -&gt; </span><span class=\"language-bash\">10.23.169.107:80             Masq    1      0          0</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"iptable规则\"><a href=\"#iptable规则\" class=\"headerlink\" title=\"iptable规则\"></a>iptable规则</h6><ul>\n<li>ipvs下依然使用了iptables</li>\n<li>使用ipset模块来过滤添加标记,并在POSTROUTING上做snat</li>\n<li>和iptables模式一样分别在<code>OUTPUT</code>和<code>PREROUTING</code>上调用了<code>KUBE-SERVICES</code></li>\n<li><code>KUBE-SERVICES</code>和iptables模式相比没有了负载均衡功能(交给了ipvs)</li>\n<li>ipvs模式吧所有的流量都做snat</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">iptables -t nat -nvL KUBE-SERVICES</span></span><br><span class=\"line\">Chain KUBE-SERVICES (2 references)</span><br><span class=\"line\"> pkts bytes target     prot opt in     out     source               destination</span><br><span class=\"line\">    0     0 KUBE-LOAD-BALANCER  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* Kubernetes service lb portal */ match-set KUBE-LOAD-BALANCER dst,dst</span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* Kubernetes service cluster ip + port for masquerade purpose */ match-set KUBE-CLUSTER-IP src,dst</span><br><span class=\"line\">    0     0 KUBE-MARK-MASQ  all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* Kubernetes service external ip + port for masquerade and filter purpose */ match-set KUBE-EXTERNAL-IP dst,dst</span><br><span class=\"line\">    0     0 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* Kubernetes service external ip + port for masquerade and filter purpose */ match-set KUBE-EXTERNAL-IP dst,dst PHYSDEV match ! --physdev-is-in ADDRTYPE match src-type !LOCAL</span><br><span class=\"line\">    0     0 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            /* Kubernetes service external ip + port for masquerade and filter purpose */ match-set KUBE-EXTERNAL-IP dst,dst ADDRTYPE match dst-type LOCAL</span><br><span class=\"line\">   39  2148 KUBE-NODE-PORT  all  --  *      *       0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br><span class=\"line\">    0     0 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            match-set KUBE-CLUSTER-IP dst,dst</span><br><span class=\"line\">    0     0 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            match-set KUBE-LOAD-BALANCER dst,dst</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h4><p>当svc比较多的时候选择ipvs比较好，否则iptables</p>\n<p>参考<a href=\"https://docs.ucloud.cn/uk8s/userguide/kubeproxy_mode\">https://docs.ucloud.cn/uk8s/userguide/kubeproxy_mode</a></p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://kubernetes.io/zh/docs/concepts/services-networking/service/\">https://kubernetes.io/zh/docs/concepts/services-networking/service/</a><br><a href=\"https://draveness.me/kubernetes-service/\">https://draveness.me/kubernetes-service/</a></p>\n","tags":["网络","k8s"]},{"title":"k8s中创建8ks-vcluster","url":"/2022/12/19/k8s%E4%B8%AD%E5%88%9B%E5%BB%BA8ks-vcluster/","content":"<p>vcluster是一个kink(k8s in k8s)程序即在k8s里创建k8s,和ns相比主要可以随便安装crd等资源且可以获得类似完整的集群体验</p>\n<span id=\"more\"></span>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ul>\n<li>macos</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L -o vcluster &quot;https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-darwin-arm64&quot; &amp;&amp; sudo install -c -m 0755 vcluster /usr/local/bin &amp;&amp; rm -f vcluster</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其他的<a href=\"https://www.vcluster.com/docs/getting-started/setup\">https://www.vcluster.com/docs/getting-started/setup</a></li>\n</ul>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p><img src=\"/../images/vcluster-1.svg\" alt=\"vcluster\"></p>\n<p>其主要原理是在宿主集群中启动了一个轻量k8s-k3s,然后将k3s的端口通过宿主集群的svc暴漏,在虚拟集群中创建的资源通过同步到宿主集群中由宿主集群来创建具体的pod</p>\n<h4 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h4><ul>\n<li>创建集群,创建完成之后会在当前的kubeconfig中添加虚拟机集群的context</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vcluster create &lt;集群名字&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看所有集群</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vcluster list</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除集群</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vcluster list &lt;集群名字&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>连接集群</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vcluster connect &lt;集群名字&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.vcluster.com/docs/what-are-virtual-clusters\">https://www.vcluster.com/docs/what-are-virtual-clusters</a></p>\n","tags":["k8s","部署"]},{"title":"k8s使用nfs持久化数据","url":"/2022/07/16/k8s%E4%BD%BF%E7%94%A8nfs%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE/","content":"<p>nfs是们常用的远程存储，这里记录下k8s安装nfs</p>\n<span id=\"more\"></span>\n\n<h4 id=\"部署nfs服务器\"><a href=\"#部署nfs服务器\" class=\"headerlink\" title=\"部署nfs服务器\"></a>部署nfs服务器</h4><p>安装nfs工具</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">yum -y install nfs-utils</span><br><span class=\"line\">systemctl start nfs &amp;&amp; systemctl enable nfs</span><br></pre></td></tr></table></figure>\n\n<p>创建nfs的目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/nfs/ &amp;&amp; chmod -R 777 /data/nfs</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置共享目录</span></span><br><span class=\"line\">echo &quot;/data/nfs *(rw,no_root_squash,sync)&quot; &gt;&gt; /etc/exports</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">应用配置</span></span><br><span class=\"line\">exportfs -r</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看配置</span></span><br><span class=\"line\">exportfs</span><br></pre></td></tr></table></figure>\n\n<p>启动nfs服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl restart rpcbind &amp;&amp; systemctl enable rpcbind</span><br><span class=\"line\">systemctl restart nfs &amp;&amp; systemctl enable nfs</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看 RPC 服务的注册状况</span></span><br><span class=\"line\">rpcinfo -p localhost</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">测试一下</span></span><br><span class=\"line\">showmount -e 192.168.32.133</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"k8s安装nfs驱动\"><a href=\"#k8s安装nfs驱动\" class=\"headerlink\" title=\"k8s安装nfs驱动\"></a>k8s安装nfs驱动</h4><p>官方仓库<a href=\"https://github.com/kubernetes-csi/csi-driver-nfs\">https://github.com/kubernetes-csi/csi-driver-nfs</a></p>\n<div class=\"note warning\"><p>官方默认的镜像在国内是无法访问，需要转储到国内的仓库里，建议找台香港的机器或者科学上网</p>\n</div>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">registry.k8s.io/sig-storage/csi-provisioner:v3.2.0</span><br><span class=\"line\">registry.k8s.io/sig-storage/livenessprobe:v2.7.0</span><br><span class=\"line\">registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.5.1</span><br><span class=\"line\">gcr.io/k8s-staging-sig-storage/nfsplugin:canary</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在线安装\"><a href=\"#在线安装\" class=\"headerlink\" title=\"在线安装\"></a>在线安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -skSL https://raw.githubusercontent.com/kubernetes-csi/csi-driver-nfs/master/deploy/install-driver.sh | bash -s master --</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"本地安装\"><a href=\"#本地安装\" class=\"headerlink\" title=\"本地安装\"></a>本地安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/kubernetes-csi/csi-driver-nfs.git</span><br><span class=\"line\">cd csi-driver-nfs</span><br><span class=\"line\">./deploy/install-driver.sh master local</span><br></pre></td></tr></table></figure>\n\n<p>等待所有pod running</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl -n kube-system get pod  |grep nfs</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"部署存储类对象\"><a href=\"#部署存储类对象\" class=\"headerlink\" title=\"部署存储类对象\"></a>部署存储类对象</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt; nfs-cs.yml</span><br><span class=\"line\">apiVersion: storage.k8s.io/v1</span><br><span class=\"line\">kind: StorageClass</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: nfs</span><br><span class=\"line\">parameters:</span><br><span class=\"line\">  server: 192.168.32.133 # nfs服务器地址</span><br><span class=\"line\">  share: /data/nfs # nfs共享的目录</span><br><span class=\"line\">provisioner: nfs.csi.k8s.io</span><br><span class=\"line\">reclaimPolicy: Delete</span><br><span class=\"line\">volumeBindingMode: Immediate</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f nfs-cs.yml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将nfs-csi 设置为默认存储类</span></span><br><span class=\"line\">kubectl patch storageclass nfs-csi -p &#x27;&#123;&quot;metadata&quot;: &#123;&quot;annotations&quot;:&#123;&quot;storageclass.kubernetes.io/is-default-class&quot;:&quot;true&quot;&#125;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试部署\"><a href=\"#测试部署\" class=\"headerlink\" title=\"测试部署\"></a>测试部署</h4><p>静态pv</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pv-nfs</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">10Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">persistentVolumeReclaimPolicy:</span> <span class=\"string\">Retain</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs-csi</span></span><br><span class=\"line\">  <span class=\"attr\">mountOptions:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">nfsvers=3</span></span><br><span class=\"line\">  <span class=\"attr\">csi:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">nfs.csi.k8s.io</span></span><br><span class=\"line\">    <span class=\"attr\">readOnly:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">volumeHandle:</span> <span class=\"string\">unique-volumeid</span>  <span class=\"comment\"># make sure it&#x27;s a unique id in the cluster</span></span><br><span class=\"line\">    <span class=\"attr\">volumeAttributes:</span></span><br><span class=\"line\">      <span class=\"attr\">server:</span> <span class=\"number\">192.168</span><span class=\"number\">.32</span><span class=\"number\">.133</span></span><br><span class=\"line\">      <span class=\"attr\">share:</span> <span class=\"string\">/data/nfs</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pvc-nfs-static</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">10Gi</span></span><br><span class=\"line\">  <span class=\"attr\">volumeName:</span> <span class=\"string\">pv-nfs</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs-csi</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br><span class=\"line\">      <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">test</span></span><br><span class=\"line\">    <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">      <span class=\"attr\">claimName:</span> <span class=\"string\">pvc-nfs-static</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://github.com/kubernetes-csi/csi-driver-nfs\">https://github.com/kubernetes-csi/csi-driver-nfs</a></p>\n","tags":["k8s","存储"]},{"title":"k8s中安装gitlab-runner","url":"/2021/12/17/k8s%E4%B8%AD%E5%AE%89%E8%A3%85gitlab-runenr/","content":"<p>记录下在k8s中安装gitlab-runner</p>\n<span id=\"more\"></span>\n\n<h4 id=\"获取注册token\"><a href=\"#获取注册token\" class=\"headerlink\" title=\"获取注册token\"></a>获取注册token</h4><ul>\n<li><p>全局runner：管理员界面-&gt;概览—&gt;runner-&gt;左上角(&#x2F;admin&#x2F;runners)</p>\n</li>\n<li><p>组runner：组界面-&gt;设置-&gt;CI&#x2F;CD-&gt;展开runner(&#x2F;groups&#x2F;&lt;组名&gt;&#x2F;-&#x2F;settings&#x2F;ci_cd)</p>\n</li>\n<li><p>项目runner：项目界面-&gt;设置-&gt;CI&#x2F;CD-&gt;展开runner(&lt;组名&gt;&#x2F;&lt;项目名&gt;&#x2F;-&#x2F;settings&#x2F;ci_cd)</p>\n</li>\n</ul>\n<h4 id=\"添加helmc仓库\"><a href=\"#添加helmc仓库\" class=\"headerlink\" title=\"添加helmc仓库\"></a>添加helmc仓库</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm repo add gitlab https://charts.gitlab.io</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解压chart包\"><a href=\"#解压chart包\" class=\"headerlink\" title=\"解压chart包\"></a>解压chart包</h4><blockquote>\n<p>解压他的包为了得到完整的values.yaml，这个文件里面说的很详细的一些配置</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm pull gitlab/gitlab-runner</span><br><span class=\"line\">tar -xvf gitlab-runner-0.35.3.tgz</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改参数\"><a href=\"#修改参数\" class=\"headerlink\" title=\"修改参数\"></a>修改参数</h4><ul>\n<li><p>修改<code>gitlabUrl</code>的地址为你的gitlab地址</p>\n</li>\n<li><p>配置<code>runnerRegistrationToken</code>为你的token</p>\n</li>\n<li><p>配置<code>tags</code>字段，可以在在选择性</p>\n</li>\n<li><p>增加权限，这里直接给所有权限</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rbac:</span></span><br><span class=\"line\">  <span class=\"attr\">create:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">rules:</span> </span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br><span class=\"line\">     <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br><span class=\"line\">   <span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">     <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br><span class=\"line\">     <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装gitlab\"><a href=\"#安装gitlab\" class=\"headerlink\" title=\"安装gitlab\"></a>安装gitlab</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm install --namespace gitlab gitlab-runner -f values.yaml gitlab/gitlab-runner </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm upgrade --namespace gitlab -f values.yaml gitlab-runner gitlab/gitlab-runner</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://docs.gitlab.com/runner/install/kubernetes.html\">https://docs.gitlab.com/runner/install/kubernetes.html</a></p>\n","tags":["cicd"]},{"title":"k8s节点管理","url":"/2020/01/17/k8s%E8%8A%82%E7%82%B9%E7%AE%A1%E7%90%86/","content":"<p>节点管理</p>\n<span id=\"more\"></span>\n\n<h6 id=\"查看节点\"><a href=\"#查看节点\" class=\"headerlink\" title=\"查看节点\"></a>查看节点</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看节点基本信息</span></span><br><span class=\"line\">kubectl get nodes</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">查看节点详细信息</span></span><br><span class=\"line\">kubectl get nodes &lt;节点名字&gt; -o wide</span><br><span class=\"line\">kubectl describe nodes &lt;节点名字&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"节点调度\"><a href=\"#节点调度\" class=\"headerlink\" title=\"节点调度\"></a>节点调度</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">停止向此节点调度</span></span><br><span class=\"line\">kubectl cordon &lt;节点名字&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">将此节点上的所有容器驱逐到其他节点</span></span><br><span class=\"line\">kubectl drain &lt;节点名字&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">恢复向此节点调度pod</span></span><br><span class=\"line\">kubectl uncordon &lt;节点名字&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">打标签</span></span><br><span class=\"line\">kubectl label nodes &lt;节点名字&gt; &lt;标签key&gt;=&lt;标签val&gt;  </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除节点标签</span></span><br><span class=\"line\">kubectl label nodes &lt;节点名字&gt; &lt;标签key&gt;- </span><br></pre></td></tr></table></figure>\n\n<h6 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">驱逐节点上的pod</span></span><br><span class=\"line\">kubectl drain &lt;节点&gt; --delete-local-data --force --ignore-daemonsets</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除节点</span></span><br><span class=\"line\">kubectl delete nodes &lt;节点&gt;</span><br></pre></td></tr></table></figure>\n","tags":["k8s"]},{"title":"kubeadm搭建高可用集群","url":"/2021/09/04/kubeadm%E6%90%AD%E5%BB%BA%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/","content":"<p>kubeadm是官方的一个用来管理k8s集群的工具</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>kubeadm，虽然是官方的是使用起来也不是很方便，他需要在每个节点上进行安装，在大规模的时候需要借助其他工具</p>\n</blockquote>\n<h4 id=\"环境信息说明\"><a href=\"#环境信息说明\" class=\"headerlink\" title=\"环境信息说明\"></a>环境信息说明</h4><ul>\n<li>4台2c2g虚拟机,官方要求最少2c4g但是我的机器没这么高配置，如果仅仅是学习的话够用了</li>\n<li>系统为centos7</li>\n<li>lb方案为了方便使用hosts文件，生产环境请使用lvs,haproxy,nginx等方案</li>\n<li>默认为最新版本</li>\n</ul>\n<h4 id=\"节点初始化\"><a href=\"#节点初始化\" class=\"headerlink\" title=\"节点初始化\"></a>节点初始化</h4><blockquote>\n<p>所有节点无论master和node</p>\n</blockquote>\n<h5 id=\"设置主机名字和PS1为主机IP\"><a href=\"#设置主机名字和PS1为主机IP\" class=\"headerlink\" title=\"设置主机名字和PS1为主机IP\"></a>设置主机名字和PS1为主机IP</h5><blockquote>\n<p>为了方便统一设置主机名为ip地址</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &#x27;export PS1=&quot;[\\u@\\H \\W]\\$ &quot;&#x27; &gt;&gt; .bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">IP=$(ip addr show $(ip route |grep default |awk &#x27;&#123;print$5&#125;&#x27;) |grep -w inet |awk -F &#x27;[ /]+&#x27; &#x27;&#123;print $3&#125;&#x27;)</span><br><span class=\"line\">hostnamectl set-hostname $IP</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关闭swap交换分区\"><a href=\"#关闭swap交换分区\" class=\"headerlink\" title=\"关闭swap交换分区\"></a>关闭swap交换分区</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">临时关闭</span></span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">永久关闭</span></span><br><span class=\"line\">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关闭selinux\"><a href=\"#关闭selinux\" class=\"headerlink\" title=\"关闭selinux\"></a>关闭selinux</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">setenforce 0 &amp;&amp; sed -i &#x27;s/^SELINUX=.*/SELINUX=disable/g&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"同步时间\"><a href=\"#同步时间\" class=\"headerlink\" title=\"同步时间\"></a>同步时间</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"yum源\"><a href=\"#yum源\" class=\"headerlink\" title=\"yum源\"></a>yum源</h5><p>默认源很慢，改为阿里云的</p>\n<h6 id=\"修改centos7源为阿里云\"><a href=\"#修改centos7源为阿里云\" class=\"headerlink\" title=\"修改centos7源为阿里云\"></a>修改centos7源为阿里云</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"修改centos7-epel源为阿里云\"><a href=\"#修改centos7-epel源为阿里云\" class=\"headerlink\" title=\"修改centos7 epel源为阿里云\"></a>修改centos7 epel源为阿里云</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"安装k8s源\"><a href=\"#安装k8s源\" class=\"headerlink\" title=\"安装k8s源\"></a>安装k8s源</h6><p>官方的国内不可用，使用阿里云的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">repo_gpgcheck=1</span><br><span class=\"line\">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装CRI\"><a href=\"#安装CRI\" class=\"headerlink\" title=\"安装CRI\"></a>安装CRI</h5><h6 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h6><div class=\"note warning\"><p>k8s 1.24之后无法直接支持docker,需要安装<a href=\"https://github.com/Mirantis/cri-dockerd\">cri-dockerd</a></p>\n</div>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加配置文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">cat &lt;&lt;EOF &gt; /etc/docker/daemon.json </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;oom-score-adjust&quot;: -1000,</span><br><span class=\"line\">    &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class=\"line\">    &quot;log-opts&quot;: &#123;</span><br><span class=\"line\">        &quot;max-size&quot;: &quot;100m&quot;,</span><br><span class=\"line\">        &quot;max-file&quot;: &quot;3&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class=\"line\">    &quot;live-restore&quot;: true,</span><br><span class=\"line\">    &quot;max-concurrent-downloads&quot;: 10,</span><br><span class=\"line\">    &quot;max-concurrent-uploads&quot;: 10,</span><br><span class=\"line\">    &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;,&quot;https://registry.docker-cn.com&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;],</span><br><span class=\"line\">    &quot;storage-driver&quot;: &quot;overlay2&quot;,</span><br><span class=\"line\">    &quot;storage-opts&quot;: [</span><br><span class=\"line\">        &quot;overlay2.override_kernel_check=true&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装docker</span></span><br><span class=\"line\">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启docker</span></span><br><span class=\"line\">systemctl restart docker &amp;&amp; systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"安装containerd\"><a href=\"#安装containerd\" class=\"headerlink\" title=\"安装containerd\"></a>安装containerd</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">加载内核模块</span></span><br><span class=\"line\">cat &lt;&lt; EOF &gt; /etc/modules-load.d/containerd.conf</span><br><span class=\"line\">overlay</span><br><span class=\"line\">br_netfilter</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">modprobe overlay</span><br><span class=\"line\">modprobe br_netfilter</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用阿里的源</span></span><br><span class=\"line\">wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\">yum install containerd.io-1.6.6-3.1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装k8s组件\"><a href=\"#安装k8s组件\" class=\"headerlink\" title=\"安装k8s组件\"></a>安装k8s组件</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y kubelet kubeadm kubectl</span><br><span class=\"line\">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ipvs模式推荐安装</span></span><br><span class=\"line\">yum install -y ipvsadm</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装master\"><a href=\"#安装master\" class=\"headerlink\" title=\"安装master\"></a>安装master</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行master节点初始化</span></span><br><span class=\"line\">kubeadm init \\</span><br><span class=\"line\">    --control-plane-endpoint &quot;k8s-api:6443&quot; \\</span><br><span class=\"line\">    --upload-certs \\</span><br><span class=\"line\">    --image-repository registry.aliyuncs.com/google_containers \\</span><br><span class=\"line\">    --pod-network-cidr=172.16.1.0/16 \\</span><br><span class=\"line\">    --v=6</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化完成之后会打印出加入集群的命令</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>加入集群的命令可以使用kubeadm重新获取,参考后面kubeadm</p>\n<h5 id=\"其他两个master节点\"><a href=\"#其他两个master节点\" class=\"headerlink\" title=\"其他两个master节点\"></a>其他两个master节点</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubeadm join k8s-api:6443 --token iq5o5t.8mtwj9117qhed25p \\</span><br><span class=\"line\">       --discovery-token-ca-cert-hash sha256:95fda448e3cb56303efc3bccbc785e000c3124a9a045ff2ed33c854cb9ee3108 \\</span><br><span class=\"line\">       --control-plane --certificate-key f075fe20e799440297bf9bd48942134da1c95f1c00ef94d7d208a2a66ce87bda</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装工作节点\"><a href=\"#安装工作节点\" class=\"headerlink\" title=\"安装工作节点\"></a>安装工作节点</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubeadm join k8s-api:6443 --token iq5o5t.8mtwj9117qhed25p \\</span><br><span class=\"line\">        --discovery-token-ca-cert-hash sha256:95fda448e3cb56303efc3bccbc785e000c3124a9a045ff2ed33c854cb9ee3108</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"cni\"><a href=\"#cni\" class=\"headerlink\" title=\"cni\"></a>cni</h4><blockquote>\n<p>k8s支持很多cni，这里使用了最简单的flannel</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"清理master上的污点\"><a href=\"#清理master上的污点\" class=\"headerlink\" title=\"清理master上的污点\"></a>清理master上的污点</h4><blockquote>\n<p>默认安装完成之后master是有污点的</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl taint nodes &lt;节点名字&gt; node-role.kubernetes.io/master:NoSchedule-</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>新版本叫<code>control-plane</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl taint nodes --all node-role.kubernetes.io/control-plane-</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"metrics-server\"><a href=\"#metrics-server\" class=\"headerlink\" title=\"metrics-server\"></a>metrics-server</h4><blockquote>\n<p>metrics-server提供了最基础的metrics手机，使用<code>kubectl top</code>和hpa时需要他，当然也可以使用kube-prometheus代理</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ingress\"><a href=\"#ingress\" class=\"headerlink\" title=\"ingress\"></a>ingress</h4><blockquote>\n<p>ingress官方只是定义了crd，具体实现由第三方实现，这里使用了常见的nginx-ingreses</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.0/deploy/static/provider/baremetal/deploy.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用helm</span></span><br><span class=\"line\">helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx</span><br><span class=\"line\">helm repo update</span><br><span class=\"line\">helm install ingress-nginx ingress-nginx/ingress-nginx</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"dashboard\"><a href=\"#dashboard\" class=\"headerlink\" title=\"dashboard\"></a>dashboard</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除清理\"><a href=\"#删除清理\" class=\"headerlink\" title=\"删除清理\"></a>删除清理</h5><blockquote>\n<p>master要保持奇数！</p>\n</blockquote>\n<ul>\n<li>驱逐节点上的pod</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl drain &lt;节点&gt; --delete-local-data --force --ignore-daemonsets</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除节点</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl delete &lt;节点&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在要删除的节点上执行</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubeadm reset</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清理iptables规则</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">iptables -F &amp;&amp; iptables -t nat -F &amp;&amp; iptables -t mangle -F &amp;&amp; iptables -X</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果使用了ipvs模式</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipvsadm -C</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清理安装目录和文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm -rf ~/.kube</span><br><span class=\"line\">rm -rf /opt/cni</span><br><span class=\"line\">rm -rf /etc/cni</span><br><span class=\"line\">rm -rf /etc/kubernetes</span><br><span class=\"line\">rm -rf /var/etcd # master节点才有</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>卸载组件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum remove kube*</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"升级版本\"><a href=\"#升级版本\" class=\"headerlink\" title=\"升级版本\"></a>升级版本</h5><blockquote>\n<p>k8s升级版本最大不能跨越两个次版本，其版本通过二进制的版本来确定要通过kubeadm去每个节点上执行</p>\n</blockquote>\n<h6 id=\"master节点\"><a href=\"#master节点\" class=\"headerlink\" title=\"master节点\"></a>master节点</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y update kubeadm kubelet kubectl</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">验证版本</span></span><br><span class=\"line\">kubeadm version</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看升级计划</span></span><br><span class=\"line\">kubeadm upgrade plan</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行升级</span></span><br><span class=\"line\">sudo kubeadm upgrade apply v1.y.x</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">其他的master</span></span><br><span class=\"line\">sudo kubeadm upgrade node</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"工作节点\"><a href=\"#工作节点\" class=\"headerlink\" title=\"工作节点\"></a>工作节点</h6><ul>\n<li>驱逐节点上pod</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl drain &lt;节点&gt; --delete-local-data --force --ignore-daemonsets</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>升级节点</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum update -y kubelet</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart kubelet</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>恢复节点</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl uncordon &lt;节点&gt;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h6><ul>\n<li>查看cni是不是需要根据版本升级</li>\n<li>dashboard等k8s应用升级</li>\n</ul>\n<h4 id=\"kubeadm常用命令\"><a href=\"#kubeadm常用命令\" class=\"headerlink\" title=\"kubeadm常用命令\"></a>kubeadm常用命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">打印默认的初始化配置</span></span><br><span class=\"line\">kubeadm config print init-defaults &gt; kubeadm-config.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">打印默认的初始化配置,巴罗了kubeetl组件</span></span><br><span class=\"line\">kubeadm config print init-defaults --component-configs KubeletConfiguration</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用配置文件来初始化集群</span></span><br><span class=\"line\">kubeadm init --config kubeadm-config.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看所需要的镜像列表</span></span><br><span class=\"line\">kubeadm config images list</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载默认配置的镜像</span></span><br><span class=\"line\">kubeadm config images pull</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">由于国内无法访问gcr.io，可以指定仓库，这里使用了阿里的镜像</span></span><br><span class=\"line\">kubeadm config images pull --image-repository registry.aliyuncs.com/google_containers --kubernetes-version latest</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取key</span></span><br><span class=\"line\">kubeadm init phase upload-certs --upload-certs</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取加入节点的命令</span></span><br><span class=\"line\">kubeadm token create --print-join-command --ttl 0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将获取的key组合成添加master的命令</span></span><br><span class=\"line\">kubeadm join k8s-api:6443 </span><br><span class=\"line\">--token &lt;token&gt; \\</span><br><span class=\"line\">--discovery-token-ca-cert-hash &lt;cert&gt;\\</span><br><span class=\"line\">--control-plane \\</span><br><span class=\"line\">--certificate-key &lt;key&gt; \\</span><br><span class=\"line\">--v=6</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">加入master的简便命令</span></span><br><span class=\"line\">kubeadm token create --print-join-command --certificate-key $(kubeadm init phase upload-certs --upload-certs|tail -1)</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kubeadm init 和 kubeadm <span class=\"built_in\">join</span> 如果cpu配置太低可以使用下面的参数忽略</span></span><br><span class=\"line\">--ignore-preflight-errors=Mem,NumCPU</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看证书时间</span></span><br><span class=\"line\">kubeadm certs check-expiration</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">证书续期</span></span><br><span class=\"line\">kubeadm certs renew all</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/\">https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/</a><br><a href=\"https://kubernetes.io/zh/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/\">https://kubernetes.io/zh/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/</a><br><a href=\"https://kubernetes.io/docs/setup/production-environment/container-runtimes/#docker\">https://kubernetes.io/docs/setup/production-environment/container-runtimes/#docker</a></p>\n","tags":["k8s","kubeadm"]},{"title":"kubeadm修改证书过期时间","url":"/2022/08/19/kubeadm%E4%BF%AE%E6%94%B9%E8%AF%81%E4%B9%A6%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4/","content":"<p>kubeadm搭建的集群证书默认ca是时间，其他组件的证书是一年如果一年没有执行升级的操作就会过期</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>所以一劳永逸直接修改kubeadm证书时间</p>\n</blockquote>\n<h4 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone -b v1.27.3 https://github.com/kubernetes/kubernetes.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改证书时间\"><a href=\"#修改证书时间\" class=\"headerlink\" title=\"修改证书时间\"></a>修改证书时间</h4><ul>\n<li>ca 证书</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">code ./staging/src/k8s.io/client-go/util/cert/cert.go</span><br></pre></td></tr></table></figure>\n\n<p><code>NewSelfSignedCACert</code>这个函数的NotAfter字段</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// NewSelfSignedCACert creates a CA certificate</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewSelfSignedCACert</span><span class=\"params\">(cfg Config, key crypto.Signer)</span></span> (*x509.Certificate, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  now := time.Now()</span><br><span class=\"line\">  tmpl := x509.Certificate&#123;</span><br><span class=\"line\">    SerialNumber: <span class=\"built_in\">new</span>(big.Int).SetInt64(<span class=\"number\">0</span>),</span><br><span class=\"line\">    Subject: pkix.Name&#123;</span><br><span class=\"line\">      CommonName:   cfg.CommonName,</span><br><span class=\"line\">      Organization: cfg.Organization,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    DNSNames:              []<span class=\"type\">string</span>&#123;cfg.CommonName&#125;,</span><br><span class=\"line\">    NotBefore:             now.UTC(),</span><br><span class=\"line\">    NotAfter:              now.Add(duration365d * <span class=\"number\">10</span>).UTC(), <span class=\"comment\">// 需要修改的地方</span></span><br><span class=\"line\">    KeyUsage:              x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature | x509.KeyUsageCertSign,</span><br><span class=\"line\">    BasicConstraintsValid: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    IsCA:                  <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  certDERBytes, err := x509.CreateCertificate(cryptorand.Reader, &amp;tmpl, &amp;tmpl, key.Public(), key)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x509.ParseCertificate(certDERBytes)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>loopback证书</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GenerateSelfSignedCertKeyWithFixtures</span><span class=\"params\">(host <span class=\"type\">string</span>, alternateIPs []net.IP, alternateDNS []<span class=\"type\">string</span>, fixtureDirectory <span class=\"type\">string</span>)</span></span> ([]<span class=\"type\">byte</span>, []<span class=\"type\">byte</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  validFrom := time.Now().Add(-time.Hour) <span class=\"comment\">// valid an hour earlier to avoid flakes due to clock skew</span></span><br><span class=\"line\">  maxAge := time.Minute * <span class=\"number\">10</span><span class=\"comment\">// one year self-signed certs 这里需要修改</span></span><br><span class=\"line\"></span><br><span class=\"line\">  baseName := fmt.Sprintf(<span class=\"string\">&quot;%s_%s_%s&quot;</span>, host, strings.Join(ipsToStrings(alternateIPs), <span class=\"string\">&quot;-&quot;</span>), strings.Join(alternateDNS, <span class=\"string\">&quot;-&quot;</span>))</span><br><span class=\"line\">  certFixturePath := filepath.Join(fixtureDirectory, baseName+<span class=\"string\">&quot;.crt&quot;</span>)</span><br><span class=\"line\">  keyFixturePath := filepath.Join(fixtureDirectory, baseName+<span class=\"string\">&quot;.key&quot;</span>)</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>组件证书</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">code ./cmd/kubeadm/app/constants/constants.go</span><br></pre></td></tr></table></figure>\n\n<p><code>CertificateValidity</code>这个变量</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CertificateValidity defines the validity for all the signed certificates generated by kubeadm</span></span><br><span class=\"line\">CertificateValidity = time.Hour * <span class=\"number\">24</span> * <span class=\"number\">365</span> <span class=\"comment\">// 需要修改的地方</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重新编译\"><a href=\"#重新编译\" class=\"headerlink\" title=\"重新编译\"></a>重新编译</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">make all WHAT=cmd/kubeadm GOFLAGS=-v</span><br><span class=\"line\"></span><br><span class=\"line\">make all WHAT=cmd/kube-apiserver GOFLAGS=-v</span><br></pre></td></tr></table></figure>\n\n<p>编译好的二进制文件中在<code>_output/bin/</code></p>\n<p>建议先使用yum等工具安装官方的kubeadm之后进行二进制替换</p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://blog.51cto.com/legehappy/4895615\">https://blog.51cto.com/legehappy/4895615</a></p>\n","tags":["k8s","kubeadm","证书"]},{"title":"kubectl插件管理工具krew","url":"/2021/04/18/kubectl%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7krew/","content":"<p>krew是一个kubectl的插件管理系统</p>\n<span id=\"more\"></span>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">(</span><br><span class=\"line\">  set -x; cd &quot;$(mktemp -d)&quot; &amp;&amp;</span><br><span class=\"line\">  OS=&quot;$(uname | tr &#x27;[:upper:]&#x27; &#x27;[:lower:]&#x27;)&quot; &amp;&amp;</span><br><span class=\"line\">  ARCH=&quot;$(uname -m | sed -e &#x27;s/x86_64/amd64/&#x27; -e &#x27;s/\\(arm\\)\\(64\\)\\?.*/\\1\\2/&#x27; -e &#x27;s/aarch64$/arm64/&#x27;)&quot; &amp;&amp;</span><br><span class=\"line\">  curl -fsSLO &quot;https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.tar.gz&quot; &amp;&amp;</span><br><span class=\"line\">  tar zxvf krew.tar.gz &amp;&amp;</span><br><span class=\"line\">  KREW=./krew-&quot;$&#123;OS&#125;_$&#123;ARCH&#125;&quot; &amp;&amp;</span><br><span class=\"line\">  &quot;$KREW&quot; install krew</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>添加环境变量</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export PATH=&quot;$&#123;KREW_ROOT:-$HOME/.krew&#125;/bin:$PATH&quot;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h5><ul>\n<li><p>kubectl krew install xxx 安装插件</p>\n</li>\n<li><p>kubectl krew uninstall xxx 卸载插件</p>\n</li>\n<li><p>kubectl krew list xxx 查看插件</p>\n</li>\n<li><p>kubectl krew update xxx 升级插件</p>\n</li>\n</ul>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://krew.sigs.k8s.io/\">https://krew.sigs.k8s.io</a></p>\n","tags":["k8s"]},{"title":"k8s动态准入控制","url":"/2021/06/17/k8s%E5%8A%A8%E6%80%81%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6/","content":"<p>准入控制是k8s中用来提供安全控制的一个控制器，而动态控制则是用户定制的安全策略</p>\n<span id=\"more\"></span>\n\n<h4 id=\"种类\"><a href=\"#种类\" class=\"headerlink\" title=\"种类\"></a>种类</h4><blockquote>\n<p>动态准入控制分为两种，分别为Mutating，Validating</p>\n</blockquote>\n<h5 id=\"Mutating\"><a href=\"#Mutating\" class=\"headerlink\" title=\"Mutating\"></a>Mutating</h5><p>Mutating主要为修改性质的，在api调用完成之后k8s会根据<code>ValidatingWebhookConfiguration</code>中的条件发送给配置的webhook服务，webhook服务根据业务逻辑进行修改，比如说大名鼎鼎的istio的Sidecar注入就是于此</p>\n<h5 id=\"Validating\"><a href=\"#Validating\" class=\"headerlink\" title=\"Validating\"></a>Validating</h5><p>Validating主要为验证性质的，主要看是不是符合条件集群要求，比方说为了高可用不允许设置副本数为1的类型为deployment的请求</p>\n<h4 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h4><blockquote>\n<p>下图所显的是api请求的流程<br><img src=\"/../images/pasted-24.png\" alt=\"upload successful\"></p>\n</blockquote>\n<h4 id=\"编写webhook\"><a href=\"#编写webhook\" class=\"headerlink\" title=\"编写webhook\"></a>编写webhook</h4><h5 id=\"创建证书\"><a href=\"#创建证书\" class=\"headerlink\" title=\"创建证书\"></a>创建证书</h5><blockquote>\n<p>创建证书的的程序很多比较出名的是<code>openssl</code>，这里我们使用rancher提供的一个自动生成证书的脚本</p>\n</blockquote>\n<h6 id=\"1-将下面的脚本保存为create-self-signed-cert-sh\"><a href=\"#1-将下面的脚本保存为create-self-signed-cert-sh\" class=\"headerlink\" title=\"1. 将下面的脚本保存为create_self-signed-cert.sh\"></a>1. 将下面的脚本保存为<code>create_self-signed-cert.sh</code></h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash -e</span></span><br><span class=\"line\"></span><br><span class=\"line\">help ()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    echo  &#x27; ================================================================ &#x27;</span><br><span class=\"line\">    echo  &#x27; --ssl-domain: 生成ssl证书需要的主域名，如不指定则默认为www.rancher.local，如果是ip访问服务，则可忽略；&#x27;</span><br><span class=\"line\">    echo  &#x27; --ssl-trusted-ip: 一般ssl证书只信任域名的访问请求，有时候需要使用ip去访问server，那么需要给ssl证书添加扩展IP，多个IP用逗号隔开；&#x27;</span><br><span class=\"line\">    echo  &#x27; --ssl-trusted-domain: 如果想多个域名访问，则添加扩展域名（SSL_TRUSTED_DOMAIN）,多个扩展域名用逗号隔开；&#x27;</span><br><span class=\"line\">    echo  &#x27; --ssl-size: ssl加密位数，默认2048；&#x27;</span><br><span class=\"line\">    echo  &#x27; --ssl-cn: 国家代码(2个字母的代号),默认CN;&#x27;</span><br><span class=\"line\">    echo  &#x27; 使用示例:&#x27;</span><br><span class=\"line\">    echo  &#x27; ./create_self-signed-cert.sh --ssl-domain=www.test.com --ssl-trusted-domain=www.test2.com \\ &#x27;</span><br><span class=\"line\">    echo  &#x27; --ssl-trusted-ip=1.1.1.1,2.2.2.2,3.3.3.3 --ssl-size=2048 --ssl-date=3650&#x27;</span><br><span class=\"line\">    echo  &#x27; ================================================================&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">case &quot;$1&quot; in</span><br><span class=\"line\">    -h|--help) help; exit;;</span><br><span class=\"line\">esac</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $1 == &#x27;&#x27; ]];then</span><br><span class=\"line\">    help;</span><br><span class=\"line\">    exit;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">CMDOPTS=&quot;$*&quot;</span><br><span class=\"line\">for OPTS in $CMDOPTS;</span><br><span class=\"line\">do</span><br><span class=\"line\">    key=$(echo $&#123;OPTS&#125; | awk -F&quot;=&quot; &#x27;&#123;print $1&#125;&#x27; )</span><br><span class=\"line\">    value=$(echo $&#123;OPTS&#125; | awk -F&quot;=&quot; &#x27;&#123;print $2&#125;&#x27; )</span><br><span class=\"line\">    case &quot;$key&quot; in</span><br><span class=\"line\">        --ssl-domain) SSL_DOMAIN=$value ;;</span><br><span class=\"line\">        --ssl-trusted-ip) SSL_TRUSTED_IP=$value ;;</span><br><span class=\"line\">        --ssl-trusted-domain) SSL_TRUSTED_DOMAIN=$value ;;</span><br><span class=\"line\">        --ssl-size) SSL_SIZE=$value ;;</span><br><span class=\"line\">        --ssl-date) SSL_DATE=$value ;;</span><br><span class=\"line\">        --ca-date) CA_DATE=$value ;;</span><br><span class=\"line\">        --ssl-cn) CN=$value ;;</span><br><span class=\"line\">    esac</span><br><span class=\"line\">done</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">CA相关配置</span></span><br><span class=\"line\">CA_DATE=$&#123;CA_DATE:-3650&#125;</span><br><span class=\"line\">CA_KEY=$&#123;CA_KEY:-cakey.pem&#125;</span><br><span class=\"line\">CA_CERT=$&#123;CA_CERT:-cacerts.pem&#125;</span><br><span class=\"line\">CA_DOMAIN=cattle-ca</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ssl相关配置</span></span><br><span class=\"line\">SSL_CONFIG=$&#123;SSL_CONFIG:-$PWD/openssl.cnf&#125;</span><br><span class=\"line\">SSL_DOMAIN=$&#123;SSL_DOMAIN:-&#x27;www.rancher.local&#x27;&#125;</span><br><span class=\"line\">SSL_DATE=$&#123;SSL_DATE:-3650&#125;</span><br><span class=\"line\">SSL_SIZE=$&#123;SSL_SIZE:-2048&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 国家代码(2个字母的代号),默认CN;</span></span></span><br><span class=\"line\">CN=$&#123;CN:-CN&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SSL_KEY=$SSL_DOMAIN.key</span><br><span class=\"line\">SSL_CSR=$SSL_DOMAIN.csr</span><br><span class=\"line\">SSL_CERT=$SSL_DOMAIN.crt</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;\\033[32m ---------------------------- \\033[0m&quot;</span><br><span class=\"line\">echo -e &quot;\\033[32m       | 生成 SSL Cert |       \\033[0m&quot;</span><br><span class=\"line\">echo -e &quot;\\033[32m ---------------------------- \\033[0m&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ -e ./$&#123;CA_KEY&#125; ]]; then</span><br><span class=\"line\">    echo -e &quot;\\033[32m ====&gt; 1. 发现已存在CA私钥，备份&quot;$&#123;CA_KEY&#125;&quot;为&quot;$&#123;CA_KEY&#125;&quot;-bak，然后重新创建 \\033[0m&quot;</span><br><span class=\"line\">    mv $&#123;CA_KEY&#125; &quot;$&#123;CA_KEY&#125;&quot;-bak</span><br><span class=\"line\">    openssl genrsa -out $&#123;CA_KEY&#125; $&#123;SSL_SIZE&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo -e &quot;\\033[32m ====&gt; 1. 生成新的CA私钥 $&#123;CA_KEY&#125; \\033[0m&quot;</span><br><span class=\"line\">    openssl genrsa -out $&#123;CA_KEY&#125; $&#123;SSL_SIZE&#125;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ -e ./$&#123;CA_CERT&#125; ]]; then</span><br><span class=\"line\">    echo -e &quot;\\033[32m ====&gt; 2. 发现已存在CA证书，先备份&quot;$&#123;CA_CERT&#125;&quot;为&quot;$&#123;CA_CERT&#125;&quot;-bak，然后重新创建 \\033[0m&quot;</span><br><span class=\"line\">    mv $&#123;CA_CERT&#125; &quot;$&#123;CA_CERT&#125;&quot;-bak</span><br><span class=\"line\">    openssl req -x509 -sha256 -new -nodes -key $&#123;CA_KEY&#125; -days $&#123;CA_DATE&#125; -out $&#123;CA_CERT&#125; -subj &quot;/C=$&#123;CN&#125;/CN=$&#123;CA_DOMAIN&#125;&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">    echo -e &quot;\\033[32m ====&gt; 2. 生成新的CA证书 $&#123;CA_CERT&#125; \\033[0m&quot;</span><br><span class=\"line\">    openssl req -x509 -sha256 -new -nodes -key $&#123;CA_KEY&#125; -days $&#123;CA_DATE&#125; -out $&#123;CA_CERT&#125; -subj &quot;/C=$&#123;CN&#125;/CN=$&#123;CA_DOMAIN&#125;&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;\\033[32m ====&gt; 3. 生成Openssl配置文件 $&#123;SSL_CONFIG&#125; \\033[0m&quot;</span><br><span class=\"line\">cat &gt; $&#123;SSL_CONFIG&#125; &lt;&lt;EOM</span><br><span class=\"line\">[req]</span><br><span class=\"line\">req_extensions = v3_req</span><br><span class=\"line\">distinguished_name = req_distinguished_name</span><br><span class=\"line\">[req_distinguished_name]</span><br><span class=\"line\">[ v3_req ]</span><br><span class=\"line\">basicConstraints = CA:FALSE</span><br><span class=\"line\">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span><br><span class=\"line\">extendedKeyUsage = clientAuth, serverAuth</span><br><span class=\"line\">EOM</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ -n $&#123;SSL_TRUSTED_IP&#125; || -n $&#123;SSL_TRUSTED_DOMAIN&#125; ]]; then</span><br><span class=\"line\">    cat &gt;&gt; $&#123;SSL_CONFIG&#125; &lt;&lt;EOM</span><br><span class=\"line\">subjectAltName = @alt_names</span><br><span class=\"line\">[alt_names]</span><br><span class=\"line\">EOM</span><br><span class=\"line\">    IFS=&quot;,&quot;</span><br><span class=\"line\">    dns=($&#123;SSL_TRUSTED_DOMAIN&#125;)</span><br><span class=\"line\">    dns+=($&#123;SSL_DOMAIN&#125;)</span><br><span class=\"line\">    for i in &quot;$&#123;!dns[@]&#125;&quot;; do</span><br><span class=\"line\">      echo DNS.$((i+1)) = $&#123;dns[$i]&#125; &gt;&gt; $&#123;SSL_CONFIG&#125;</span><br><span class=\"line\">    done</span><br><span class=\"line\"></span><br><span class=\"line\">    if [[ -n $&#123;SSL_TRUSTED_IP&#125; ]]; then</span><br><span class=\"line\">        ip=($&#123;SSL_TRUSTED_IP&#125;)</span><br><span class=\"line\">        for i in &quot;$&#123;!ip[@]&#125;&quot;; do</span><br><span class=\"line\">          echo IP.$((i+1)) = $&#123;ip[$i]&#125; &gt;&gt; $&#123;SSL_CONFIG&#125;</span><br><span class=\"line\">        done</span><br><span class=\"line\">    fi</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;\\033[32m ====&gt; 4. 生成服务SSL KEY $&#123;SSL_KEY&#125; \\033[0m&quot;</span><br><span class=\"line\">openssl genrsa -out $&#123;SSL_KEY&#125; $&#123;SSL_SIZE&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;\\033[32m ====&gt; 5. 生成服务SSL CSR $&#123;SSL_CSR&#125; \\033[0m&quot;</span><br><span class=\"line\">openssl req -sha256 -new -key $&#123;SSL_KEY&#125; -out $&#123;SSL_CSR&#125; -subj &quot;/C=$&#123;CN&#125;/CN=$&#123;SSL_DOMAIN&#125;&quot; -config $&#123;SSL_CONFIG&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;\\033[32m ====&gt; 6. 生成服务SSL CERT $&#123;SSL_CERT&#125; \\033[0m&quot;</span><br><span class=\"line\">openssl x509 -sha256 -req -in $&#123;SSL_CSR&#125; -CA $&#123;CA_CERT&#125; \\</span><br><span class=\"line\">    -CAkey $&#123;CA_KEY&#125; -CAcreateserial -out $&#123;SSL_CERT&#125; \\</span><br><span class=\"line\">    -days $&#123;SSL_DATE&#125; -extensions v3_req \\</span><br><span class=\"line\">    -extfile $&#123;SSL_CONFIG&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;\\033[32m ====&gt; 7. 证书制作完成 \\033[0m&quot;</span><br><span class=\"line\">echo</span><br><span class=\"line\">echo -e &quot;\\033[32m ====&gt; 8. 以YAML格式输出结果 \\033[0m&quot;</span><br><span class=\"line\">echo &quot;----------------------------------------------------------&quot;</span><br><span class=\"line\">echo &quot;ca_key: |&quot;</span><br><span class=\"line\">cat $CA_KEY | sed &#x27;s/^/  /&#x27;</span><br><span class=\"line\">echo</span><br><span class=\"line\">echo &quot;ca_cert: |&quot;</span><br><span class=\"line\">cat $CA_CERT | sed &#x27;s/^/  /&#x27;</span><br><span class=\"line\">echo</span><br><span class=\"line\">echo &quot;ssl_key: |&quot;</span><br><span class=\"line\">cat $SSL_KEY | sed &#x27;s/^/  /&#x27;</span><br><span class=\"line\">echo</span><br><span class=\"line\">echo &quot;ssl_csr: |&quot;</span><br><span class=\"line\">cat $SSL_CSR | sed &#x27;s/^/  /&#x27;</span><br><span class=\"line\">echo</span><br><span class=\"line\">echo &quot;ssl_cert: |&quot;</span><br><span class=\"line\">cat $SSL_CERT | sed &#x27;s/^/  /&#x27;</span><br><span class=\"line\">echo</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;\\033[32m ====&gt; 9. 附加CA证书到Cert文件 \\033[0m&quot;</span><br><span class=\"line\">cat $&#123;CA_CERT&#125; &gt;&gt; $&#123;SSL_CERT&#125;</span><br><span class=\"line\">echo &quot;ssl_cert: |&quot;</span><br><span class=\"line\">cat $SSL_CERT | sed &#x27;s/^/  /&#x27;</span><br><span class=\"line\">echo</span><br><span class=\"line\"></span><br><span class=\"line\">echo -e &quot;\\033[32m ====&gt; 10. 重命名服务证书 \\033[0m&quot;</span><br><span class=\"line\">echo &quot;cp $&#123;SSL_DOMAIN&#125;.key tls.key&quot;</span><br><span class=\"line\">cp $&#123;SSL_DOMAIN&#125;.key tls.key</span><br><span class=\"line\">echo &quot;cp $&#123;SSL_DOMAIN&#125;.crt tls.crt&quot;</span><br><span class=\"line\">cp $&#123;SSL_DOMAIN&#125;.crt tls.crt</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-然后执行下面的命令\"><a href=\"#2-然后执行下面的命令\" class=\"headerlink\" title=\"2. 然后执行下面的命令\"></a>2. 然后执行下面的命令</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./create_self-signed-cert.sh --ssl-domain=admission-example.admission-example.svc.cluster.local  --ssl-trusted-domain=admission-example,admission-example.admission-example.svc -ssl-trusted-ip=127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3-会在目录里生成一套证书和秘钥\"><a href=\"#3-会在目录里生成一套证书和秘钥\" class=\"headerlink\" title=\"3. 会在目录里生成一套证书和秘钥\"></a>3. 会在目录里生成一套证书和秘钥</h6><ul>\n<li>.key的为秘钥</li>\n<li>.crt为域名的证书</li>\n<li>csr文件为证书申请文件</li>\n<li>ca开头的为根证书和秘钥</li>\n</ul>\n<h5 id=\"编写yaml文件\"><a href=\"#编写yaml文件\" class=\"headerlink\" title=\"编写yaml文件\"></a>编写yaml文件</h5><blockquote>\n<p>编写MutatingWebhookConfiguration和ValidatingWebhookConfiguration</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">admissionregistration.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">MutatingWebhookConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mutating-example</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">admission-example</span></span><br><span class=\"line\"><span class=\"attr\">webhooks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">admission-example.naturelr.cc</span></span><br><span class=\"line\">    <span class=\"attr\">clientConfig:</span></span><br><span class=\"line\">      <span class=\"attr\">service:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">admission-example</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">admission-example</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">&quot;/mutate&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"comment\"># 证书进行base64编码</span></span><br><span class=\"line\">      <span class=\"attr\">caBundle:</span> &#123;&#123;<span class=\"string\">CA</span>&#125;&#125;</span><br><span class=\"line\">    <span class=\"attr\">rules:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">operations:</span> [ <span class=\"string\">&quot;CREATE&quot;</span> ]</span><br><span class=\"line\">        <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;apps&quot;</span>, <span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">        <span class=\"attr\">apiVersions:</span> [<span class=\"string\">&quot;v1&quot;</span>]</span><br><span class=\"line\">        <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;deployments&quot;</span>,<span class=\"string\">&quot;services&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">admissionReviewVersions:</span> [<span class=\"string\">&quot;v1&quot;</span>, <span class=\"string\">&quot;v1beta1&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">sideEffects:</span> <span class=\"string\">None</span></span><br><span class=\"line\">    <span class=\"comment\"># 只有ns上拥有admission-webhook-example: enabled才生效</span></span><br><span class=\"line\">    <span class=\"attr\">namespaceSelector:</span></span><br><span class=\"line\">      <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">        <span class=\"attr\">admission-webhook-example:</span> <span class=\"string\">enabled</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">admissionregistration.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ValidatingWebhookConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">validation-example</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">admission-example</span></span><br><span class=\"line\"><span class=\"attr\">webhooks:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">admission-example.naturelr.cc</span></span><br><span class=\"line\">    <span class=\"attr\">clientConfig:</span></span><br><span class=\"line\">      <span class=\"attr\">service:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">admission-example</span></span><br><span class=\"line\">        <span class=\"attr\">namespace:</span> <span class=\"string\">admission-example</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">&quot;/validate&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">      <span class=\"attr\">caBundle:</span> &#123;&#123;<span class=\"string\">CA</span>&#125;&#125;</span><br><span class=\"line\">    <span class=\"attr\">rules:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">operations:</span> [ <span class=\"string\">&quot;CREATE&quot;</span> ]</span><br><span class=\"line\">        <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;apps&quot;</span>, <span class=\"string\">&quot;&quot;</span>]</span><br><span class=\"line\">        <span class=\"attr\">apiVersions:</span> [<span class=\"string\">&quot;v1&quot;</span>]</span><br><span class=\"line\">        <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;deployments&quot;</span>,<span class=\"string\">&quot;services&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">admissionReviewVersions:</span> [<span class=\"string\">&quot;v1&quot;</span>, <span class=\"string\">&quot;v1beta1&quot;</span>]</span><br><span class=\"line\">    <span class=\"attr\">sideEffects:</span> <span class=\"string\">None</span></span><br><span class=\"line\">    <span class=\"attr\">namespaceSelector:</span></span><br><span class=\"line\">      <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">        <span class=\"attr\">admission-webhook-example:</span> <span class=\"string\">enabled</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"开发webhook\"><a href=\"#开发webhook\" class=\"headerlink\" title=\"开发webhook\"></a>开发webhook</h5><blockquote>\n<p>开发上面定义的两个接口validate，mutate</p>\n</blockquote>\n<p>监听的端口和上面配置的端口一直，且使用创建的证书</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">  http.HandleFunc(<span class=\"string\">&quot;/validate&quot;</span>, validate)</span><br><span class=\"line\">  http.HandleFunc(<span class=\"string\">&quot;/mutate&quot;</span>, mutate)</span><br><span class=\"line\">  http.HandleFunc(<span class=\"string\">&quot;/ping&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    fmt.Fprintln(w, <span class=\"string\">&quot;pong&quot;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  svr := http.Server&#123;</span><br><span class=\"line\">    Addr:         <span class=\"string\">&quot;:8080&quot;</span>,</span><br><span class=\"line\">    ReadTimeout:  time.Minute,</span><br><span class=\"line\">    WriteTimeout: time.Minute,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> *key == <span class=\"string\">&quot;&quot;</span> || *cert == <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;http服务启动成功&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> err := svr.ListenAndServe(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatalln(err)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;https服务启动成功&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := svr.ListenAndServeTLS(*cert, *key); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      log.Fatalln(err)</span><br><span class=\"line\">  &#125;()  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>实现mutate的部分，我们需要给满足条件的deployment和service添加一个名为<code>admission-example.naturelr.cc/status&quot;: &quot;test&quot;</code>的注解<br>这里和使用kubectl操作上很像只不过由代码返回给k8s</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mutate</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 请求结构体</span></span><br><span class=\"line\">  qar := admissionv1.AdmissionReview&#123;&#125;</span><br><span class=\"line\">  _, _, err := serializer.NewCodecFactory(runtime.NewScheme()).UniversalDeserializer().Decode(body, <span class=\"literal\">nil</span>, &amp;qar)</span><br><span class=\"line\">  checkErr(err)  </span><br><span class=\"line\">  <span class=\"keyword\">type</span> patchOperation <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Op    <span class=\"type\">string</span>      <span class=\"string\">`json:&quot;op&quot;`</span></span><br><span class=\"line\">    Path  <span class=\"type\">string</span>      <span class=\"string\">`json:&quot;path&quot;`</span></span><br><span class=\"line\">    Value <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:&quot;value,omitempty&quot;`</span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  p := patchOperation&#123;</span><br><span class=\"line\">    Op:    <span class=\"string\">&quot;add&quot;</span>,</span><br><span class=\"line\">    Path:  <span class=\"string\">&quot;/metadata/annotations&quot;</span>,</span><br><span class=\"line\">    Value: <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;admission-example.naturelr.cc/status&quot;</span>: <span class=\"string\">&quot;test&quot;</span>&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  patch, err := json.Marshal([]patchOperation&#123;p&#125;)</span><br><span class=\"line\">  checkErr(err)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回给k8s的消息</span></span><br><span class=\"line\">  are := &amp;admissionv1.AdmissionReview&#123;</span><br><span class=\"line\">    TypeMeta: apimetav1.TypeMeta&#123;</span><br><span class=\"line\">      APIVersion: qar.APIVersion,</span><br><span class=\"line\">      Kind:       qar.Kind,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Response: &amp;admissionv1.AdmissionResponse&#123;</span><br><span class=\"line\">      Allowed: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      Patch:   patch,</span><br><span class=\"line\">      PatchType: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> *admissionv1.PatchType &#123;</span><br><span class=\"line\">        pt := admissionv1.PatchTypeJSONPatch</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &amp;pt</span><br><span class=\"line\">      &#125;(),</span><br><span class=\"line\">      UID: qar.Request.UID,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  resp, err := json.Marshal(are)</span><br><span class=\"line\">  checkErr(err)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;响应:&quot;</span>, <span class=\"type\">string</span>(resp))</span><br><span class=\"line\">  w.WriteHeader(<span class=\"number\">200</span>)</span><br><span class=\"line\">  w.Write(resp)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>validate中主要验证service和deployment中标签是否有admission字段如果就没有则拒绝访问</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">validate</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 请求结构体</span></span><br><span class=\"line\">  qar := admissionv1.AdmissionReview&#123;&#125;</span><br><span class=\"line\">  _, _, err := serializer.NewCodecFactory(runtime.NewScheme()).UniversalDeserializer().Decode(body, <span class=\"literal\">nil</span>, &amp;qar)</span><br><span class=\"line\">  checkErr(err</span><br><span class=\"line\">  <span class=\"comment\">// 处理逻辑 从请求的结构体判断是是否满足条件</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span>  availableLabels <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  requiredLabels := <span class=\"string\">&quot;admission&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> errMsg <span class=\"type\">error</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> qar.Request.Kind.Kind &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&quot;Deployment&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> deploy appsv1.Deployment</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := json.Unmarshal(qar.Request.Object.Raw, &amp;deploy); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      log.Println(<span class=\"string\">&quot;无法解析格式:&quot;</span>, err)</span><br><span class=\"line\">      errMsg = err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    availableLabels = deploy.Labels</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&quot;Service&quot;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">var</span> service corev1.Service</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := json.Unmarshal(qar.Request.Object.Raw, &amp;service); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      log.Println(<span class=\"string\">&quot;无法解析格式:&quot;</span>, err)</span><br><span class=\"line\">      errMsg = err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    availableLabels = service.Labels</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    msg := fmt.Sprintln(<span class=\"string\">&quot;不能处理的类型：&quot;</span>, qar.Request.Kind.Kind)</span><br><span class=\"line\">    log.Println(msg)</span><br><span class=\"line\">    errMsg = errors.New(msg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> status *apimetav1.Status</span><br><span class=\"line\">  <span class=\"keyword\">var</span> allowed <span class=\"type\">bool</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> _, ok := availableLabels[requiredLabels]; !ok || errMsg != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    msg := <span class=\"string\">&quot;不符合条件&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        msg = fmt.Sprintln(errMsg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  status = &amp;apimetav1.Status&#123;</span><br><span class=\"line\">      Message: msg,</span><br><span class=\"line\">      Reason:  apimetav1.StatusReason(msg),</span><br><span class=\"line\">      Code:    <span class=\"number\">304</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    allowed = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    Message: <span class=\"string\">&quot;通过&quot;</span>,</span><br><span class=\"line\">    status = &amp;apimetav1.Status&#123;</span><br><span class=\"line\">     Reason:  <span class=\"string\">&quot;通过&quot;</span>,</span><br><span class=\"line\">     Code:    <span class=\"number\">200</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    allowed = <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 返回给k8s的消息</span></span><br><span class=\"line\">  are := &amp;admissionv1.AdmissionReview&#123;</span><br><span class=\"line\">    TypeMeta: apimetav1.TypeMeta&#123;</span><br><span class=\"line\">      APIVersion: qar.APIVersion,</span><br><span class=\"line\">      Kind:       qar.Kind,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    Response: &amp;admissionv1.AdmissionResponse&#123;</span><br><span class=\"line\">      Allowed: allowed,</span><br><span class=\"line\">      Result:  status,</span><br><span class=\"line\">      UID:     qar.Request.UID,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  resp, err := json.Marshal(are)</span><br><span class=\"line\">  checkErr(err)</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;响应:&quot;</span>, <span class=\"type\">string</span>(resp))</span><br><span class=\"line\">  w.WriteHeader(<span class=\"number\">200</span>)</span><br><span class=\"line\">  w.Write(resp)</span><br></pre></td></tr></table></figure>\n\n<p>完整项目在<a href=\"https://github.com/NatureLR/admission-example\">https://github.com/NatureLR/admission-example</a></p>\n<h5 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h5><ul>\n<li>在打了<code>admission-webhook-example: enabled</code>标签下的ns中随便创建一个应用会发现被拒绝</li>\n<li>在给deployment打上了设定的标签之后就可以创建了，且deployment多了一个注解</li>\n</ul>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://kubernetes.io/zh/docs/reference/access-authn-authz/admission-controllers/\">https://kubernetes.io/zh/docs/reference/access-authn-authz/admission-controllers/</a><br><a href=\"https://kubernetes.io/zh/docs/reference/access-authn-authz/extensible-admission-controllers/\">https://kubernetes.io/zh/docs/reference/access-authn-authz/extensible-admission-controllers/</a></p>\n","tags":["k8s"]},{"title":"kubectl多集群管理","url":"/2020/09/14/kubectl%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/","content":"<p>大部分情况我们不只一个k8s集群，这个时候我们需要快速的在各个集群之间进行切换。且省去每次都要申明namespace</p>\n<span id=\"more\"></span>\n<h4 id=\"使用kubectx\"><a href=\"#使用kubectx\" class=\"headerlink\" title=\"使用kubectx\"></a>使用kubectx</h4><p>kubectx是个可以快速的切换集群且能设置namespace的官方<a href=\"https://github.com/ahmetb/kubectx\">地址</a></p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install kubectx</span><br></pre></td></tr></table></figure>\n\n<p>为了能够使用模糊推查找荐安装<a href=\"https://github.com/junegunn/fzf\">fzf</a></p>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><ul>\n<li>kubectx 可以看到所有环境，通过模糊查找可快速选择集群</li>\n<li>kubens 可以看到当前环境所有的namespace，可以快速选择NS，选择NS之后执行的命令就是在当前NS中执行了，比如执行kubectl get pods 显示的就是当前NS所有的pod，不需要加上-n xxxx</li>\n</ul>\n<h4 id=\"多集群的管理\"><a href=\"#多集群的管理\" class=\"headerlink\" title=\"多集群的管理\"></a>多集群的管理</h4><p>kubectx 所有解决了多个环境和命名空间的问题，但是没能解决快速添加集群<br>利用kubectl的环境变量拿到所有的环境然后通过<code>kubectl config view --raw</code>合并成为一个config文件，脚本如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">! /bin/bash</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">合并<span class=\"variable\">$HOME</span>/.kube/configs目录下的文件到<span class=\"variable\">$HOME</span>/.kube/config</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">配合kubectx工具进行环境切换</span></span><br><span class=\"line\"></span><br><span class=\"line\">CONFIGPATH=$HOME/.kube/configs</span><br><span class=\"line\"></span><br><span class=\"line\">FILEPATH=</span><br><span class=\"line\"></span><br><span class=\"line\">for C in `ls $CONFIGPATH/*yaml`;do</span><br><span class=\"line\">    echo &quot;找到配置文件:&quot;$C</span><br><span class=\"line\">    FILEPATH=$FILEPATH$C:</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">export KUBECONFIG=$FILEPATH</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl config view --raw &gt; $HOME/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">unset KUBECONFIG</span><br></pre></td></tr></table></figure>\n\n<p>添加集群就只需要把集群的config文件保存到<code>$HOME/.kube/configs</code>下，名字为xxx.yaml，然后执行脚本，删除同理只需要将该集群的yaml文件从<code>$HOME/.kube/configs</code>中移除在执行脚本</p>\n","tags":["k8s"]},{"title":"kibana总是创建index-pattern","url":"/2022/01/13/kibana%E6%80%BB%E6%98%AF%E5%88%9B%E5%BB%BAindex-pattern/","content":"<p>在kibana界面点击创建index pattern失败一直让创建index pattern</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>今天在做升级修复log4j时升级之后打开kibana界面创建index pattern总是创建不出来，将es删除重建也不行，看日志也没发现一些错误，于是就想是不是kibana的问题，于是重启kibana和删除es中一些kibana的索引解决了</p>\n</blockquote>\n<h4 id=\"1-删除es索引\"><a href=\"#1-删除es索引\" class=\"headerlink\" title=\"1.删除es索引\"></a>1.删除es索引</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">先查看所有索引</span></span><br><span class=\"line\">curl 127.0.0.1:9200/_cat/indices?v</span><br></pre></td></tr></table></figure>\n\n<p>可能还有其他类似.kibana_1之类的我也删除了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除kibana的索引</span></span><br><span class=\"line\">curl -XDELETE 127.0.0.1:9200/.kibana?pretty</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-重启kibana容器\"><a href=\"#2-重启kibana容器\" class=\"headerlink\" title=\"2.重启kibana容器\"></a>2.重启kibana容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl rollout restart deployment kibana</span><br></pre></td></tr></table></figure>\n","tags":["kibana"]},{"title":"kubebuilder扩展k8s","url":"/2021/11/02/kubebuilder%E6%89%A9%E5%B1%95k8s/","content":"<p>kubebuilder是个专门用于开发k8s的框架</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>k8s有很多资源如deployment,cronjob等资源，这些资源的行为则由位于controller-manager中的各个资源控制器来实现逻辑,</p>\n</blockquote>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>在<a href=\"https://github.com/kubernetes-sigs/kubebuilder/releases\">https://github.com/kubernetes-sigs/kubebuilder/releases</a>下载合适的二进制文件并放入path中</p>\n<h4 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h4><ul>\n<li>GV: Api Group和Version<ul>\n<li>API Group 是相关API功能的集合，</li>\n<li>每个 Group 拥有一或多个Versions</li>\n</ul>\n</li>\n<li>GVK: Group Version Kind<ul>\n<li>每个GV都包含很多个api 类型，称之为Kinds,不同Version同一个Kinds可能不同</li>\n</ul>\n</li>\n<li>GVR: Group Version Rsource<ul>\n<li>Resource 是 Kind 的对象标识，一般来Kind和Resource 是1:1 的,但是有时候存在 1:n 的关系，不过对于Operator来说都是 1:1 的关系</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span> <span class=\"comment\"># 这个是 GV，G 是 apps，V 是 v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span>    <span class=\"comment\"># 这个就是 Kind</span></span><br><span class=\"line\"><span class=\"attr\">sepc:</span>               <span class=\"comment\"># 加上下放的 spec 就是 Resource了</span></span><br></pre></td></tr></table></figure>\n\n<p>根据GVK K8s就能找到你到底要创建什么类型的资源，根据你定义的Spec创建好资源之后就成为了Resource，也就是GVR。GVK&#x2F;GVR就是K8s资源的坐标，是我们创建&#x2F;删除&#x2F;修改&#x2F;读取资源的基础</p>\n<p>类似这样的关系&#x2F;group&#x2F;version&#x2F;kind</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><h5 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h5><p>完整代码:<a href=\"https://github.com/NatureLR/code-example/tree/master/operator\">https://github.com/NatureLR/code-example/tree/master/operator</a></p>\n<h5 id=\"需求背景\"><a href=\"#需求背景\" class=\"headerlink\" title=\"需求背景\"></a>需求背景</h5><blockquote>\n<p>我们在部署服务的时候经常需要同时部署deployment和svc这样很复杂，于是自定义一个资源叫appx，让appx来创建svc和deployment</p>\n</blockquote>\n<h5 id=\"初始化文件夹\"><a href=\"#初始化文件夹\" class=\"headerlink\" title=\"初始化文件夹\"></a>初始化文件夹</h5><p>在项目文件夹下执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubebuilder init --repo github.com/naturelr/code-example/operator --domain naturelr.cc --skip-go-version-check</span><br></pre></td></tr></table></figure>\n\n<p>这个时候目录下会产生一些文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">├── Dockerfile # 编译docker镜像</span><br><span class=\"line\">├── Makefile # 编译部署相关的脚本，常用功能都在里面</span><br><span class=\"line\">├── PROJECT # 项目说明</span><br><span class=\"line\">├── config # 这个目录都是一些需要安装到集群的文件</span><br><span class=\"line\">│   ├── default # 默认配置</span><br><span class=\"line\">│   ├── manager # crd文件</span><br><span class=\"line\">│   ├── prometheus # 监控相关的如ServiceMonitor</span><br><span class=\"line\">│   └── rbac # rbac文件</span><br><span class=\"line\">├── go.mod</span><br><span class=\"line\">├── go.sum</span><br><span class=\"line\">├── hack</span><br><span class=\"line\">│   └── boilerplate.go.txt</span><br><span class=\"line\">└── main.go</span><br><span class=\"line\"></span><br><span class=\"line\">6 directories, 24 files</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"创建api模板\"><a href=\"#创建api模板\" class=\"headerlink\" title=\"创建api模板\"></a>创建api模板</h5><p>执行下面的命令，创建api，期间会问你是不是需要创建Resource和Controller，这里我们都选y</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubebuilder create api --group appx --version v1 --kind Appx</span><br></pre></td></tr></table></figure>\n\n<p>完成之后多了一些目录</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── Dockerfile</span><br><span class=\"line\">├── Makefile</span><br><span class=\"line\">├── PROJECT</span><br><span class=\"line\">├── api</span><br><span class=\"line\">│   └── v1 # 我们自定义的api</span><br><span class=\"line\">├── bin</span><br><span class=\"line\">│   └── controller-gen # 生成文件的程序</span><br><span class=\"line\">├── config</span><br><span class=\"line\">├── controllers</span><br><span class=\"line\">│   ├── appx_controller.go # 控制逻辑写在这</span><br><span class=\"line\">│   └── suite_test.go # 测试用例</span><br><span class=\"line\">├── go.mod</span><br><span class=\"line\">├── go.sum</span><br><span class=\"line\">├── hack</span><br><span class=\"line\">│   └── boilerplate.go.txt</span><br><span class=\"line\">└── main.go</span><br><span class=\"line\"></span><br><span class=\"line\">12 directories, 10 files</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h5><h5 id=\"定义字段\"><a href=\"#定义字段\" class=\"headerlink\" title=\"定义字段\"></a>定义字段</h5><p>在<code>api/v1/application_types.go</code>中的AppxSpec写上需要的字段</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> AppxSpec <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\"> <span class=\"comment\">// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster</span></span><br><span class=\"line\"> <span class=\"comment\">// Important: Run &quot;make&quot; to regenerate code after modifying this file</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// Foo is an example field of Appx. Edit appx_types.go to remove/update</span></span><br><span class=\"line\"> Image <span class=\"type\">string</span> <span class=\"string\">`json:&quot;image,omitempty&quot;`</span></span><br><span class=\"line\"> Port  <span class=\"type\">int</span>    <span class=\"string\">`json:&quot;port,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后执行<code>make manifests generate</code>命令生成crd文件</p>\n<p>生成的crd文件在<code>config/crd/bases/</code>中</p>\n<h5 id=\"实现控制器\"><a href=\"#实现控制器\" class=\"headerlink\" title=\"实现控制器\"></a>实现控制器</h5><blockquote>\n<p>有crd只能在k8s中定义cr但是k8s并不知道如何处理这些cr，所以我们要实现控制器来处理这些逻辑</p>\n</blockquote>\n<p>我们需要实现的控制器逻辑在<code>controllers/application_controller.go</code>中的<code>Reconcile</code>函数中</p>\n<p>逻辑改完之后就需要上测试了，执行<code>make install</code>安装crd到集群，注意他会安装到<code>~/.kube/config</code>这个配置文件中的集群</p>\n<p>然后执行<code>make run</code>运行控制器，他会打印很多日志</p>\n<ul>\n<li>获取cd，拿到cr中定义的镜像和端口号</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">appx := &amp;appxv1.Appx&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> err := r.Get(ctx, req.NamespacedName, appx); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> ctrl.Result&#123;&#125;, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拿到信息之后需要创建对应的deployment对象和service对象，需要特别注意的是要管理创建的资源，不然删除的不会删除创建的子资源</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">svc := &amp;apiv1.Service&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> err := r.Get(ctx, req.NamespacedName, svc); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> client.IgnoreNotFound(err) != <span class=\"literal\">nil</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ctrl.Result&#123;&#125;, err<span class=\"comment\">// 如果有错误且不是没找到的话就直接返回错误</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 没找到就创建资源</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> svc.Name == <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">    l.Info(<span class=\"string\">&quot;创建service:&quot;</span>, <span class=\"string\">&quot;名字&quot;</span>, appx.Name)</span><br><span class=\"line\">    svc = &amp;apiv1.Service&#123;</span><br><span class=\"line\">      ObjectMeta: metav1.ObjectMeta&#123;</span><br><span class=\"line\">        Name:      req.Name,</span><br><span class=\"line\">        Namespace: req.Namespace,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">        Spec: apiv1.ServiceSpec&#123;</span><br><span class=\"line\">        Selector: <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;app&quot;</span>: req.Name&#125;,</span><br><span class=\"line\">        Ports: []apiv1.ServicePort&#123;&#123;</span><br><span class=\"line\">          Port:       <span class=\"type\">int32</span>(appx.Spec.Port),</span><br><span class=\"line\">          TargetPort: intstr.FromInt(appx.Spec.Port),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 关联 appx和deployment</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := controllerutil.SetOwnerReference(appx, svc, r.Scheme); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> ctrl.Result&#123;&#125;, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := r.Create(ctx, svc); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> ctrl.Result&#123;&#125;, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    l.Info(<span class=\"string\">&quot;创建service成功&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果已经有此资源,那么可能就需要更新资源了</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// svc</span></span><br><span class=\"line\">svc.Spec.Ports = []apiv1.ServicePort&#123;&#123;Port: <span class=\"type\">int32</span>(appx.Spec.Port)&#125;&#125;</span><br><span class=\"line\">l.Info(<span class=\"string\">&quot;更新service&quot;</span>, <span class=\"string\">&quot;port&quot;</span>, appx.Spec.Image)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err := r.Update(ctx, svc); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> ctrl.Result&#123;&#125;, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">l.Info(<span class=\"string\">&quot;service更新完成&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>到此一个简单的crd的控制逻辑就完成了</p>\n<h5 id=\"status\"><a href=\"#status\" class=\"headerlink\" title=\"status\"></a>status</h5><blockquote>\n<p>上面创建的cr当查看的时候并不会显示status</p>\n</blockquote>\n<ul>\n<li>在<code>api/v1/appx_types.go</code>中找到<code>AppxStatus</code>,添加上合适的字段</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AppxStatus defines the observed state of Appx</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> AppxStatus <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster</span></span><br><span class=\"line\">  <span class=\"comment\">// Important: Run &quot;make&quot; to regenerate code after modifying this file</span></span><br><span class=\"line\">  <span class=\"comment\">// 必须要有json tag</span></span><br><span class=\"line\">  Workload <span class=\"type\">int32</span>  <span class=\"string\">`json:&quot;workload&quot;`</span></span><br><span class=\"line\">  Svc      <span class=\"type\">string</span> <span class=\"string\">`json:&quot;svc&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<code>controllers/application_controller.go</code>中更新status字段</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">appx.Status.Workload = *deploy.Spec.Replicas</span><br><span class=\"line\">appx.Status.Svc = fmt.Sprintf(<span class=\"string\">&quot;%d&quot;</span>, svc.Spec.Ports[<span class=\"number\">0</span>].Port)</span><br><span class=\"line\">r.Status().Update(ctx, appx)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上面自会显示在get xx -o yaml当中,当我们想显示在 get xxx -o wide中时需要在<code>api/v1/appx_types.go</code>中添加注释，具体参考<a href=\"https://book.kubebuilder.io/reference/generating-crd.html\">https://book.kubebuilder.io/reference/generating-crd.html</a></li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 注意type要对应上字段！！！</span><br><span class=\"line\">//+kubebuilder:printcolumn:JSONPath=&quot;.status.workload&quot;,name=Workload,type=integer</span><br><span class=\"line\">//+kubebuilder:printcolumn:JSONPath=&quot;.status.svc&quot;,name=Svc,type=string</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同样需要重新生成crd并且要安装</li>\n</ul>\n<h5 id=\"event事件\"><a href=\"#event事件\" class=\"headerlink\" title=\"event事件\"></a>event事件</h5><blockquote>\n<p>evnet事件，有的时候告诉我们一些重要的信息</p>\n</blockquote>\n<ul>\n<li>在<code>controllers/application_controller.go</code>中增加字段</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AppxReconciler reconciles a Appx object</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> AppxReconciler <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  client.Client</span><br><span class=\"line\">  Scheme   *runtime.Scheme</span><br><span class=\"line\">  Recorder record.EventRecorder<span class=\"comment\">//增加事件结构体</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>调用</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">r.Recorder.Event(appx, apiv1.EventTypeNormal, <span class=\"string\">&quot;找到cr&quot;</span>, appx.Name)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<code>main.go</code>中加上Recorder的初始化逻辑</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> err = (&amp;controllers.AppxReconciler&#123;</span><br><span class=\"line\">  Client:   mgr.GetClient(),</span><br><span class=\"line\">  Scheme:   mgr.GetScheme(),</span><br><span class=\"line\">  Recorder: mgr.GetEventRecorderFor(<span class=\"string\">&quot;Appx&quot;</span>), <span class=\"comment\">//+</span></span><br><span class=\"line\">&#125;).SetupWithManager(mgr); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  setupLog.Error(err, <span class=\"string\">&quot;unable to create controller&quot;</span>, <span class=\"string\">&quot;controller&quot;</span>, <span class=\"string\">&quot;Appx&quot;</span>)</span><br><span class=\"line\">  os.Exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">kubectl get event</span></span><br><span class=\"line\">LAST SEEN   TYPE     REASON   OBJECT     MESSAGE</span><br><span class=\"line\">2m55s       Normal   找到cr     appx       </span><br><span class=\"line\">4s          Normal   找到cr     appx/foo   foo  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">初始化</span></span><br><span class=\"line\">kubebuilder init --repo github.com/naturelr/code-example/operator --domain naturelr.cc --skip-go-version-check</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建 api</span></span><br><span class=\"line\">kubebuilder create api --group appx --version v1 --kind Appx</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建webhook</span></span><br><span class=\"line\">kubebuilder create webhook --group nodes --version v1 --kind Appx --defaulting --programmatic-validation</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成文件</span></span><br><span class=\"line\">make manifests generate</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装crd等文件</span></span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">本地调试运行</span></span><br><span class=\"line\">make run</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://book.kubebuilder.io/introduction.html\">https://book.kubebuilder.io/introduction.html</a><br><a href=\"https://lailin.xyz/post/operator-03-kubebuilder-tutorial.html\">https://lailin.xyz/post/operator-03-kubebuilder-tutorial.html</a></p>\n","tags":["k8s","go"]},{"title":"kustomize","url":"/2021/07/21/kustomize/","content":"<p>kustomize是k8s-sig开发的一个用来渲染一些k8s资源文件的工具</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>主要场景就是多集群环境，一个服务在每个集群的配置不一样很容易造成混乱</p>\n</blockquote>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>macos</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install kustomize</span><br></pre></td></tr></table></figure>\n\n<p>二进制手动安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -s &quot;https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh&quot;  | bash</span><br></pre></td></tr></table></figure>\n\n<p>kubectl</p>\n<blockquote>\n<p>kubectl 已经集成了kustomize</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl kustomize</span><br><span class=\"line\">kubectl apply -k</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"动手尝试\"><a href=\"#动手尝试\" class=\"headerlink\" title=\"动手尝试\"></a>动手尝试</h4><h5 id=\"1-创建kustomize描述文件\"><a href=\"#1-创建kustomize描述文件\" class=\"headerlink\" title=\"1.创建kustomize描述文件\"></a>1.创建kustomize描述文件</h5><p>创建一个名为<code>base</code>的文件夹并在文件夹里一个文件名为<code>kustomization.yaml</code>且写入如下内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置ns</span></span><br><span class=\"line\"><span class=\"attr\">namespace:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deployment.yaml</span></span><br><span class=\"line\"><span class=\"comment\"># 生成config</span></span><br><span class=\"line\"><span class=\"attr\">configMapGenerator:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">example-configmap-1</span></span><br><span class=\"line\">  <span class=\"attr\">envs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">env.conf</span></span><br><span class=\"line\">  <span class=\"attr\">literals:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">FOO=Bar</span></span><br><span class=\"line\"><span class=\"comment\"># 生成secrets</span></span><br><span class=\"line\"><span class=\"attr\">secretGenerator:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">example-secret-2</span></span><br><span class=\"line\">  <span class=\"attr\">literals:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">username=admin</span></span><br><span class=\"line\">  <span class=\"comment\"># 通过文件生成secret</span></span><br><span class=\"line\">  <span class=\"attr\">files:</span> </span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">passwd.conf</span></span><br><span class=\"line\"><span class=\"attr\">generatorOptions:</span> <span class=\"comment\"># 只对生成的资源有效</span></span><br><span class=\"line\">  <span class=\"attr\">disableNameSuffixHash:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 关闭生成的资源文件的hash值</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span> <span class=\"comment\"># 所有生产的资源都会有下面的标签</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">generated</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span> <span class=\"comment\"># 所有生产的资源都会有下面的注解</span></span><br><span class=\"line\">    <span class=\"attr\">note:</span> <span class=\"string\">generated</span></span><br><span class=\"line\"><span class=\"comment\"># 镜像替换</span></span><br><span class=\"line\"><span class=\"attr\">images:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">newName:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">newTag:</span> <span class=\"string\">alpine</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-创建依引用资源文件\"><a href=\"#2-创建依引用资源文件\" class=\"headerlink\" title=\"2.创建依引用资源文件\"></a>2.创建依引用资源文件</h5><p>创建kustomization.yaml中引用的文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建deployment.yaml 此文件为为模板文件</span></span><br><span class=\"line\">cat &lt;&lt;EOF &gt;base/deployment.yaml</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: test</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    matchLabels:</span><br><span class=\"line\">      app: test</span><br><span class=\"line\">  template:</span><br><span class=\"line\">    metadata:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        app: test</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      containers:</span><br><span class=\"line\">      - name: test</span><br><span class=\"line\">        image: nginx</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          limits:</span><br><span class=\"line\">            memory: &quot;128Mi&quot;</span><br><span class=\"line\">            cpu: &quot;500m&quot;</span><br><span class=\"line\">        ports:</span><br><span class=\"line\">        - containerPort: 80</span><br><span class=\"line\">        volumeMount:</span><br><span class=\"line\">        - name: config</span><br><span class=\"line\">          mountPath: /config</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: config</span><br><span class=\"line\">        configMap:</span><br><span class=\"line\">          name: example-configmap-1</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建配置文件</span></span><br><span class=\"line\">cat &lt;&lt;EOF &gt;base/env.conf</span><br><span class=\"line\">key=abcdef</span><br><span class=\"line\">debug=true</span><br><span class=\"line\">EOF</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建secrets文件</span></span><br><span class=\"line\">cat &lt;&lt;EOF &gt;base/passwd.conf</span><br><span class=\"line\">user=root</span><br><span class=\"line\">passwd=123456</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>最终文件结构如下：<br>base<br>├── deployment.yaml<br>├── env.conf<br>├── kustomization.yaml<br>└── passwd.conf</p>\n<h5 id=\"3-编译\"><a href=\"#3-编译\" class=\"headerlink\" title=\"3.编译\"></a>3.编译</h5><p>执行<code>kubectl kustomize base</code>或者<code>kustomize build base</code></p>\n<p>这时候我们发现生成的内容当中\b自动从.conf文件自动转换为k8s资源文件，且镜像被替换了生成的文件都有我们指定的标签</p>\n<h4 id=\"基准覆盖\"><a href=\"#基准覆盖\" class=\"headerlink\" title=\"基准覆盖\"></a>基准覆盖</h4><p>上面我们创建的只是一个基本k8s资源文件，在实际中一个服务在各个环境会有细微的区别那么我们可以通过kustomize在基本上进行一些修改</p>\n<p>假如上面的服务我们要部署到测试环境中，在测试环境中ns需要加上一些dev等字段，且还有一些节点亲和等操作</p>\n<h5 id=\"1-创建测试环境的kustomize文件\"><a href=\"#1-创建测试环境的kustomize文件\" class=\"headerlink\" title=\"1.创建测试环境的kustomize文件\"></a>1.创建测试环境的kustomize文件</h5><ul>\n<li>在base同级目录中创建一个叫<code>overlays</code>的目录,且在里面在创建个目录叫dev</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p overlays/dev</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>写入<code>kustomization.yaml</code></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 引用基准资源</span></span><br><span class=\"line\"><span class=\"attr\">resources:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">../../base</span></span><br><span class=\"line\"><span class=\"comment\"># 设置ns名字前缀</span></span><br><span class=\"line\"><span class=\"attr\">namePrefix:</span> <span class=\"string\">dev-</span></span><br><span class=\"line\"><span class=\"comment\"># 设置ns名字后缀</span></span><br><span class=\"line\"><span class=\"attr\">nameSuffix:</span> <span class=\"string\">&quot;-a&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 设置公共标签</span></span><br><span class=\"line\"><span class=\"attr\">commonLabels:</span></span><br><span class=\"line\">  <span class=\"attr\">env:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"comment\"># 设置公共注解</span></span><br><span class=\"line\"><span class=\"attr\">commonAnnotations:</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span> <span class=\"string\">foo</span></span><br><span class=\"line\"><span class=\"attr\">images:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">newName:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">newTag:</span> <span class=\"string\">alpine</span></span><br><span class=\"line\"><span class=\"comment\"># 合并补丁</span></span><br><span class=\"line\"><span class=\"attr\">patchesStrategicMerge:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">nodeAffinity.yaml</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-创建测试环境的引用文件\"><a href=\"#2-创建测试环境的引用文件\" class=\"headerlink\" title=\"2.创建测试环境的引用文件\"></a>2.创建测试环境的引用文件</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt;overlays/dev/nodeAffinity.yaml</span><br><span class=\"line\">apiVersion: apps/v1</span><br><span class=\"line\">kind: Deployment</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: test</span><br><span class=\"line\">  spec:</span><br><span class=\"line\">    template:</span><br><span class=\"line\">      spec:</span><br><span class=\"line\">        affinity:</span><br><span class=\"line\">          nodeAffinity:</span><br><span class=\"line\">            requiredDuringSchedulingIgnoredDuringExecution:</span><br><span class=\"line\">              nodeSelectorTerms:</span><br><span class=\"line\">              - matchExpressions:</span><br><span class=\"line\">                - key: kubernetes.io/os</span><br><span class=\"line\">                  operator: Exists</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>此时文件结构如下<br>.<br>├── base<br>│   ├── deployment.yaml<br>│   ├── env.conf<br>│   ├── kustomization.yaml<br>│   └── passwd.conf<br>└── overlays<br>    └── dev<br>        ├── kustomization.yaml<br>        ├── nodeAffinity.yaml</p>\n<h5 id=\"3-编译测试环境\"><a href=\"#3-编译测试环境\" class=\"headerlink\" title=\"3.编译测试环境\"></a>3.编译测试环境</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kustomize build overlays/dev</span><br></pre></td></tr></table></figure>\n\n<p>其他环境如法炮制，这样就可以优雅的管理服务在各个资源的描述，在结合argcd的情况下会更加的舒服！</p>\n<h4 id=\"kubectl使用\"><a href=\"#kubectl使用\" class=\"headerlink\" title=\"kubectl使用\"></a>kubectl使用</h4><blockquote>\n<p>kubectl中只需要在后面加上-k即可对应命令如下</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -k</span><br><span class=\"line\">kubectl apply --kustomize</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get -k</span><br><span class=\"line\">kubectl diff -k</span><br><span class=\"line\">kubectl describe -k</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><ul>\n<li><p><a href=\"https://kubernetes.io/zh/docs/tasks/manage-kubernetes-objects/kustomization\">https://kubernetes.io/zh/docs/tasks/manage-kubernetes-objects/kustomization</a></p>\n</li>\n<li><p><a href=\"https://kustomize.io/\">https://kustomize.io</a></p>\n</li>\n</ul>\n","tags":["k8s"]},{"title":"kvm","url":"/2021/05/22/kvm%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","content":"<p>kvm基于linux内核的虚拟化</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>kvm是基于硬件的完全虚拟化，集成在内核中，qemu主要外部设备的虚拟化两者各发挥所长</p>\n</blockquote>\n<h4 id=\"检查硬件是否支持\"><a href=\"#检查硬件是否支持\" class=\"headerlink\" title=\"检查硬件是否支持\"></a>检查硬件是否支持</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install cpu-checker</span><br><span class=\"line\"></span><br><span class=\"line\">kvm-ok</span><br><span class=\"line\">INFO: /dev/kvm exists</span><br><span class=\"line\">KVM acceleration can be used</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>虚拟机中需要打开虚拟化嵌套支持</p>\n</blockquote>\n<p><img src=\"/../images/pasted-12.png\" alt=\"upload successful\"></p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virtinst virt-manager</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>qemu-kvm -为KVM管理程序提供硬件仿真的软件。</li>\n<li>libvirt-daemon-system -用于将libvirt守护程序作为系统服务运行的配置文件。</li>\n<li>libvirt-clients -用于管理虚拟化平台的软件。</li>\n<li>bridge-utils -一组用于配置以太网桥的命令行工具。</li>\n<li>virtinst -一组用于创建虚拟机的命令行工具。</li>\n<li>virt-manager -易于使用的GUI界面和支持命令行工具，用于通过libvirt管理虚拟机。</li>\n</ul>\n<p>查看运行状态</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl status libvirtd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"图形化安装操作系统\"><a href=\"#图形化安装操作系统\" class=\"headerlink\" title=\"图形化安装操作系统\"></a>图形化安装操作系统</h4><blockquote>\n<p>找到虚拟系统管理器</p>\n</blockquote>\n<p><img src=\"/../images/pasted-13.png\" alt=\"upload successful\"></p>\n<blockquote>\n<p>点击新建，剩下的和vmware很像</p>\n</blockquote>\n<p><img src=\"/../images/pasted-14.png\" alt=\"upload successful\"></p>\n<blockquote>\n<p>选择安装类型</p>\n</blockquote>\n<p><img src=\"/../images/pasted-15.png\" alt=\"upload successful\"></p>\n<blockquote>\n<p>指定安装的iso镜像文件</p>\n</blockquote>\n<p><img src=\"/../images/pasted-16.png\" alt=\"upload successful\"></p>\n<blockquote>\n<p>自动选择系统类型有问题，无法识别，这里改为通用默认类型</p>\n</blockquote>\n<p><img src=\"/../images/pasted-17.png\" alt=\"upload successful\"></p>\n<blockquote>\n<p>启动成功进入了安装界面剩下的不做过多介绍</p>\n</blockquote>\n<p><img src=\"/../images/pasted-18.png\" alt=\"upload successful\"></p>\n<h5 id=\"其他界面说明\"><a href=\"#其他界面说明\" class=\"headerlink\" title=\"其他界面说明\"></a>其他界面说明</h5><blockquote>\n<p>系统启动引导界面</p>\n</blockquote>\n<p><img src=\"/../images/pasted-19.png\" alt=\"upload successful\"></p>\n<blockquote>\n<p>这里可以看到磁盘的信息</p>\n</blockquote>\n<p><img src=\"/../images/pasted-20.png\" alt=\"upload successful\"></p>\n<blockquote>\n<p>这里选择可图形服务器</p>\n</blockquote>\n<p><img src=\"/../images/pasted-21.png\" alt=\"upload successful\"></p>\n<blockquote>\n<p>网卡配置界面</p>\n</blockquote>\n<p><img src=\"/../images/pasted-22.png\" alt=\"upload successful\"></p>\n<h4 id=\"命令行创建\"><a href=\"#命令行创建\" class=\"headerlink\" title=\"命令行创建\"></a>命令行创建</h4><blockquote>\n<p>创建一个磁盘容量为15g，类型为qcow2，名字叫centos7.qcow2的虚拟磁盘</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">qemu-img create -f qcow2 centos7.qcow2 15G</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>创建虚拟机</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo virt-install \\</span><br><span class=\"line\"> --name=centos7 \\</span><br><span class=\"line\"> --disk path=/home/centos7.qcow2 \\</span><br><span class=\"line\"> --vcpus=1 --ram=1024 \\</span><br><span class=\"line\"> --cdrom=/home/CentOS-7-x86_64-Minimal-2003.iso \\</span><br><span class=\"line\"> --network bridge=virbr0 \\</span><br><span class=\"line\"> --graphics vnc,listen=0.0.0.0 \\</span><br><span class=\"line\"> --os-type=linux \\</span><br><span class=\"line\"> --os-variant=&quot;centos7.0&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此时可以通过vnc连接开始安装系统，也可以像图形化界面一样用虚拟机管理器安装</p>\n</blockquote>\n<p><img src=\"/../images/pasted-23.png\" alt=\"upload successful\"></p>\n<h5 id=\"选项说明\"><a href=\"#选项说明\" class=\"headerlink\" title=\"选项说明\"></a>选项说明</h5><blockquote>\n<p>virt-install 中–os-variant可选值</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ubuntu</span></span><br><span class=\"line\">sudo apt -y install libosinfo-bin</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">cengtos</span></span><br><span class=\"line\">yum -y install libosinfo</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"virsh常用命令\"><a href=\"#virsh常用命令\" class=\"headerlink\" title=\"virsh常用命令\"></a>virsh常用命令</h5><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>virsh start xxx</td>\n<td>启动名字为x的非活动虚拟机</td>\n</tr>\n<tr>\n<td>virsh list  –all</td>\n<td>列出虚拟机</td>\n</tr>\n<tr>\n<td>virsh create xxx.xml</td>\n<td>创建虚拟机，没有持久化</td>\n</tr>\n<tr>\n<td>virsh suspend xxx</td>\n<td>暂停虚拟机</td>\n</tr>\n<tr>\n<td>virsh resume xxxx</td>\n<td>启动暂停的虚拟机</td>\n</tr>\n<tr>\n<td>virsh shutdown xxxx</td>\n<td>正常关闭虚拟机</td>\n</tr>\n<tr>\n<td>virsh destroy xxxx</td>\n<td>强制关闭虚拟机</td>\n</tr>\n<tr>\n<td>virsh undefine xxx</td>\n<td>删除虚拟机，只是从列表中删除，且不会删除活动的虚拟机</td>\n</tr>\n<tr>\n<td>virsh dominfo xxx</td>\n<td>显示虚拟机的基本信息</td>\n</tr>\n<tr>\n<td>virsh domname 2</td>\n<td>显示id号为2的虚拟机名</td>\n</tr>\n<tr>\n<td>virsh domid xxx</td>\n<td>显示虚拟机id号</td>\n</tr>\n<tr>\n<td>virsh domuuid xxx</td>\n<td>显示虚拟机的uuid</td>\n</tr>\n<tr>\n<td>virsh domstate xxx</td>\n<td>显示虚拟机的当前状态</td>\n</tr>\n<tr>\n<td>virsh dumpxml xxx</td>\n<td>显示虚拟机的当前配置文件（可能和定义虚拟机时的配置不同，因为当虚拟机启动时，需要给虚拟机 分配id号、uuid、vnc端口号等等）</td>\n</tr>\n<tr>\n<td>virsh setmem x 512000</td>\n<td>给不活动虚拟机设置内存大小</td>\n</tr>\n<tr>\n<td>virsh edit xxx</td>\n<td>编辑配置文件（一般是在刚定义完虚拟机之后）</td>\n</tr>\n</tbody></table>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.iplayio.cn/post/92661051\">https://www.iplayio.cn/post/92661051</a><br><a href=\"https://www.cnblogs.com/saryli/p/11827903.html\">https://www.cnblogs.com/saryli/p/11827903.html</a></p>\n","tags":["kvm","虚拟化"]},{"title":"kubectl格式化输出","url":"/2020/07/21/kubectl%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/","content":"<p>有时候需要输出一些k8s的资源信息为一个表格比如统计资源你的数量</p>\n<span id=\"more\"></span>\n<p>将下面你的模板保存为template.txt</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; EOF &gt;&gt; template.txt</span><br><span class=\"line\">名字       数量            保留内存              保留cpu        最大内存  最大cpu</span><br><span class=\"line\">metadata.name  spec.replicas   spec.template.spec.containers[*].resources.requests.memory  spec.template.spec.containers[*].resources.requests.memory   spec.template.spec.containers[*].resources.limits.memory  spec.template.spec.containers[*].resources.limits.cpu</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<p>然后执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get deployment  -o custom-columns-file=template.txt</span><br></pre></td></tr></table></figure>\n\n<p>除了用模板文件还可以用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get deployment  -o custom-columns=名字:.metadata.name,数量:.spec.replicas</span><br></pre></td></tr></table></figure>\n","tags":["k8s"]},{"title":"linux删除文件之后磁盘没释放","url":"/2020/08/04/linux-%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E4%B9%8B%E5%90%8E%E6%B2%A1%E9%87%8A%E6%94%BE/","content":"<p>记一下Linux删除文件之后磁盘没释放</p>\n<span id=\"more\"></span>\n\n<h4 id=\"linux-删除文件之后磁盘没释放\"><a href=\"#linux-删除文件之后磁盘没释放\" class=\"headerlink\" title=\"linux 删除文件之后磁盘没释放\"></a>linux 删除文件之后磁盘没释放</h4><blockquote>\n<p>原因则执行删除的时候是解除链接，如果文件是被打开的，进程会继续读取那个文件</p>\n</blockquote>\n<p>正确是置空文件，命令如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat /dev/null&gt;xxx.log</span><br></pre></td></tr></table></figure>\n\n<p>可以用下面的命令查找一下类似的文件然后重启对应的程序即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">lsof | grep deleted</span><br></pre></td></tr></table></figure>\n","tags":["linux"]},{"title":"linux登录欢迎页","url":"/2020/08/03/linux%E7%99%BB%E5%BD%95%E6%AC%A2%E8%BF%8E%E9%A1%B5/","content":"<p>ssh每次登录的时候显示一些信息</p>\n<span id=\"more\"></span>\n<p>编辑<code>/etc/motd</code>中的内容，即可在登录的时候打印出来</p>\n<p><img src=\"/../images/pasted-0.png\" alt=\"upload successful\"></p>\n<p>例如将下面的复制进去</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">......................阿弥陀佛......................</span><br><span class=\"line\">                      _oo0oo_</span><br><span class=\"line\">                     o8888888o</span><br><span class=\"line\">                     88&quot; . &quot;88</span><br><span class=\"line\">                     (| -_- |)</span><br><span class=\"line\">                     0\\  =  /0</span><br><span class=\"line\">                   ___/‘---’\\___</span><br><span class=\"line\">                  .&#x27; \\|       |/ &#x27;.</span><br><span class=\"line\">                 / \\\\|||  :  |||// \\</span><br><span class=\"line\">                / _||||| -卍-|||||_ \\</span><br><span class=\"line\">               |   | \\\\\\  -  /// |   |</span><br><span class=\"line\">               | \\_|  &#x27;&#x27;\\---/&#x27;&#x27;  |_/ |</span><br><span class=\"line\">               \\  .-\\__  &#x27;-&#x27;  ___/-. /</span><br><span class=\"line\">             ___&#x27;. .&#x27;  /--.--\\  &#x27;. .&#x27;___</span><br><span class=\"line\">         .&quot;&quot; ‘&lt;  ‘.___\\_&lt;|&gt;_/___.’&gt;’ &quot;&quot;.</span><br><span class=\"line\">       | | :  ‘- \\‘.;‘\\ _ /’;.’/ - ’ : | |</span><br><span class=\"line\">         \\  \\ ‘_.   \\_ __\\ /__ _/   .-’ /  /</span><br><span class=\"line\">    =====‘-.____‘.___ \\_____/___.-’___.-’=====</span><br><span class=\"line\">                      ‘=---=’</span><br><span class=\"line\"></span><br><span class=\"line\">....................佛祖保佑 ,永无BUG...................</span><br></pre></td></tr></table></figure>\n","tags":["linux"]},{"title":"linux魔法键","url":"/2020/09/29/linux%E9%AD%94%E6%B3%95%E9%94%AE/","content":"<p>利用<code>/proc/sys/kernel/sysrq</code>处理Linux系统不能正常响应用户请求，比如不能重启这时可以使用<br>强制重启<code>echo b &gt;/proc/sys/kernel/sysrq</code></p>\n<span id=\"more\"></span>\n<p>SysRq也称为魔法键，可以使用键盘快捷键的，但还是使用命令明确一些</p>\n<h6 id=\"检查当前状态\"><a href=\"#检查当前状态\" class=\"headerlink\" title=\"检查当前状态\"></a>检查当前状态</h6><p>  cat &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;sysrq</p>\n<p>各个数字对应的含义</p>\n<ul>\n<li>0 完全关闭</li>\n<li>1 开启sysrq所有功能</li>\n<li>&gt;1 允许的sysrq函数的位掩码 具体请看官方<a href=\"https://www.kernel.org/doc/html/v4.11/admin-guide/sysrq.html\">文档</a></li>\n</ul>\n<h6 id=\"更改SysRq\"><a href=\"#更改SysRq\" class=\"headerlink\" title=\"更改SysRq\"></a>更改SysRq</h6><p>可以使用下面你的命令设置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &lt;number&gt; &gt;/proc/sys/kernel/sysrq</span><br></pre></td></tr></table></figure>\n\n<p>或者使用sysctl</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sysctl -w kernel.sysrq=&lt;number&gt;</span><br><span class=\"line\">```  </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">##### 使用SysRq</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">```shell</span><br><span class=\"line\">echo &lt;command&gt; &gt; /proc/sysrq-trigger</span><br></pre></td></tr></table></figure>\n\n<p>常用的command如下</p>\n<ul>\n<li>b 立即重启,但是不同步磁盘</li>\n<li>s 尝试同步磁盘</li>\n<li>其他的可以参考<a href=\"https://www.kernel.org/doc/html/v4.11/admin-guide/sysrq.html\">文档</a></li>\n</ul>\n","tags":["linux"]},{"title":"kubectl自带的debug命令","url":"/2022/09/16/kubectl%E8%87%AA%E5%B8%A6%E7%9A%84debug%E5%91%BD%E4%BB%A4/","content":"<p>在使用k8s的时候需要调试的时候我们一般都是exec -it 命令登录上去执行一些调试命令，但是很多镜像为了体积和安全都不内置这些命令，导致我们需要手动安装调试麻烦</p>\n<span id=\"more\"></span>\n\n<p>kubectl在1.18之后新加了一个debug子命令将我们的调试容器放到需要调试的pod中方便调试</p>\n<h4 id=\"支持情况\"><a href=\"#支持情况\" class=\"headerlink\" title=\"支持情况\"></a>支持情况</h4><p>k8s 1.18以后,需要开启特性</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><h5 id=\"调试pod\"><a href=\"#调试pod\" class=\"headerlink\" title=\"调试pod\"></a>调试pod</h5><ul>\n<li>将centos添加到pod进行调试</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl debug cdebug-64cd86798b-sjxrl -it --image=centos -- sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将centos添加到pod进行调试的同时复制一个pod叫cdebug-debug且共享进程，–share-processes&#x3D;true只有在<code>copy</code>是才生效</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl debug cdebug-64cd86798b-sjxrl -it --image=centos --share-processes --copy-to=cdebug-debug -- sh</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"调试node\"><a href=\"#调试node\" class=\"headerlink\" title=\"调试node\"></a>调试node</h5><ul>\n<li>需要注意的node会挂载在&#x2F;host下</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl debug node/10.69.202.146 -it --image=centos -- sh</span><br><span class=\"line\">chroot /host</span><br></pre></td></tr></table></figure>\n\n<p>此功能也可以通过<a href=\"https://github.com/kvaps/kubectl-node-shell\">node_shell</a>这个kubect插件来实现</p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://kubernetes.io/docs/tasks/debug/debug-application/debug-running-pod\">https://kubernetes.io/docs/tasks/debug/debug-application/debug-running-pod</a></p>\n","tags":["k8s"]},{"title":"linux内核升级","url":"/2022/05/02/linux%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7/","content":"<p>centos内核升级</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>升级centos内核</p>\n</blockquote>\n<h4 id=\"包管理安装\"><a href=\"#包管理安装\" class=\"headerlink\" title=\"包管理安装\"></a>包管理安装</h4><h5 id=\"添加epel仓库\"><a href=\"#添加epel仓库\" class=\"headerlink\" title=\"添加epel仓库\"></a>添加epel仓库</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class=\"line\">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">yum --enablerepo=&quot;elrepo-kernel&quot; list --showduplicates | sort -r | grep kernel-ml.x86_64</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"替换清华源\"><a href=\"#替换清华源\" class=\"headerlink\" title=\"替换清华源\"></a>替换清华源</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">备份</span></span><br><span class=\"line\">sudo cp /etc/yum.repos.d/elrepo.repo /etc/yum.repos.d/elrepo.repo.bak</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">然后编辑 /etc/yum.repos.d/elrepo.repo 文件，在 mirrorlist= 开头的行前面加 <span class=\"comment\"># 注释掉；</span></span></span><br><span class=\"line\">sed  -i &#x27;s/mirrorlist/#mirrorlist/g&#x27; /etc/yum.repos.d/elrepo.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">并将 elrepo.org/linux 替换为 mirrors.tuna.tsinghua.edu.cn/elrepo</span></span><br><span class=\"line\">sed -i &#x27;s/elrepo.org\\/linux/mirrors.tuna.tsinghua.edu.cn\\/elrepo/g&#x27; /etc/yum.repos.d/elrepo.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">注释掉其他仓库</span></span><br><span class=\"line\">sed  -i &#x27;/http:\\/\\/mirrors.coreix/d&#x27; /etc/yum.repos.d/elrepo.repo</span><br><span class=\"line\">sed  -i &#x27;/http:\\/\\/mirror.rackspace.com/d&#x27; /etc/yum.repos.d/elrepo.repo</span><br><span class=\"line\">sed  -i &#x27;/http:\\/\\/repos.lax-noc.com/d&#x27; /etc/yum.repos.d/elrepo.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新软件包缓存</span></span><br><span class=\"line\">sudo yum makecache</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装内核\"><a href=\"#安装内核\" class=\"headerlink\" title=\"安装内核\"></a>安装内核</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">稳定版本</span></span><br><span class=\"line\">yum --enablerepo=elrepo-kernel install  kernel-ml-devel kernel-ml -y</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装长期支持版本</span></span><br><span class=\"line\">yum --enablerepo=elrepo-kernel install kernel-lt-devel kernel-lt -y</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设置启动\"><a href=\"#设置启动\" class=\"headerlink\" title=\"设置启动\"></a>设置启动</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看安装的内核</span></span><br><span class=\"line\">awk -F\\&#x27; &#x27;$1==&quot;menuentry &quot; &#123;print $2&#125;&#x27; /etc/grub2.cfg</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置启动顺序</span></span><br><span class=\"line\">grub2-set-default 0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启生效</span></span><br><span class=\"line\">reboot</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h4><h5 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h5><div class=\"note info\"><p>mainline 最新稳定版<br>stable 稳定版本<br>longterm 长时间支持版本</p>\n</div>\n\n<p><a href=\"https://kernel.org/\">官方</a>国内<a href=\"https://mirror.tuna.tsinghua.edu.cn/kernel/v4.x/?C=M&O=D\">清华</a>镜像源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.17.5.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\">tar xvf linux-5.17.5.tar.xz</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装编译工具\"><a href=\"#安装编译工具\" class=\"headerlink\" title=\"安装编译工具\"></a>安装编译工具</h5><div class=\"note info\"><p>centos7默认4.8.5目前最新的5.17内核需要5.1.0以上</p>\n</div>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译工具</span></span><br><span class=\"line\">yum install -y ncurses-devel make gcc bc bison flex elfutils-libelf-devel openssl-devel</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">升级gcc版本</span></span><br><span class=\"line\">yum install  -y centos-release-scl</span><br><span class=\"line\">yum install  -y devtoolset-7-gcc*</span><br><span class=\"line\">scl enable devtoolset-7 bash</span><br><span class=\"line\">gcc --version</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置内核参数\"><a href=\"#配置内核参数\" class=\"headerlink\" title=\"配置内核参数\"></a>配置内核参数</h5><div class=\"note info\"><p>参数有两种配置方式：手动配置或者复制当前内核配置，最终在源码目录生成.config文件</p>\n</div>\n\n<h6 id=\"直接复制当前内核的参数\"><a href=\"#直接复制当前内核的参数\" class=\"headerlink\" title=\"直接复制当前内核的参数\"></a>直接复制当前内核的参数</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp -v /boot/config-$(uname -r) .config</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"手动配置\"><a href=\"#手动配置\" class=\"headerlink\" title=\"手动配置\"></a>手动配置</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">make menuconfig</span><br></pre></td></tr></table></figure>\n\n<p>新的配置界面</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">make nconfig</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编译安装内核\"><a href=\"#编译安装内核\" class=\"headerlink\" title=\"编译安装内核\"></a>编译安装内核</h5><h6 id=\"编译源码\"><a href=\"#编译源码\" class=\"headerlink\" title=\"编译源码\"></a>编译源码</h6><div class=\"note info\"><p>-j 参数根据cpu数量来设置以加快编译速度，通常是cpu数量的2倍</p>\n</div>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">make -j 8</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">make modules_install install</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设置开机启动\"><a href=\"#设置开机启动\" class=\"headerlink\" title=\"设置开机启动\"></a>设置开机启动</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看启动顺序</span></span><br><span class=\"line\">awk -F\\&#x27; &#x27;$1==&quot;menuentry &quot; &#123;print $2&#125;&#x27; /etc/grub2.cfg</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置启动顺序(编号是上面命令看的的顺序)</span></span><br><span class=\"line\">grub2-set-default 0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启生效</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"编译rpm包\"><a href=\"#编译rpm包\" class=\"headerlink\" title=\"编译rpm包\"></a>编译rpm包</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装rpm构建工具</span></span><br><span class=\"line\">yum install -y rpm-build rpmlint yum-utils rpmdevtools</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">构建rpm包</span></span><br><span class=\"line\">make rpm-pkg</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">yum install -y xx.rpm</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重新生成grub.cfg</span></span><br><span class=\"line\">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">设置启动顺序(编号是上面命令看的的顺序)</span></span><br><span class=\"line\">grub2-set-default 0</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启生效</span></span><br><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://ahelpme.com/linux/centos7/how-to-install-new-gcc-and-development-tools-under-centos-7/\">https://ahelpme.com/linux/centos7/how-to-install-new-gcc-and-development-tools-under-centos-7/</a><br><a href=\"https://nestealin.com/8bab8c2c/\">https://nestealin.com/8bab8c2c/</a><br><a href=\"https://github.com/torvalds/linux\">https://github.com/torvalds/linux</a><br><a href=\"https://www.kernel.org/doc/html/latest\">https://www.kernel.org/doc/html/latest</a></p>\n","tags":["内核"]},{"title":"logrotate","url":"/2020/12/14/logrotate/","content":"<p>Linux系统随着时间日志越来越大，我们需要日志转储和处理以免导致磁盘爆满</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>logrotate是一个日志转储工具，centos默认安装并且根据策略每天执行一次</p>\n</blockquote>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><blockquote>\n<p>一般cnetos都是默认安装如果没有安装执行：</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install logrotate</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用参数\"><a href=\"#常用参数\" class=\"headerlink\" title=\"常用参数\"></a>常用参数</h4><ul>\n<li>-d 调试 logrotate -d &#x2F;etc&#x2F;logrotate.conf</li>\n<li>-f 强制运行 logrotate -f &#x2F;etc&#x2F;logrotate.conf</li>\n<li>-s 启动备用备用状态文件默认文件在<code>/var/lib/logrotate/logrotate.status</code></li>\n<li>-v 详细模式</li>\n<li>指定logrotate的状态文件 logrotate -vf –s &#x2F;var&#x2F;log&#x2F;logrotate-status &#x2F;etc&#x2F;logrotate.conf 日志文件</li>\n</ul>\n<h4 id=\"默认运行机制\"><a href=\"#默认运行机制\" class=\"headerlink\" title=\"默认运行机制\"></a>默认运行机制</h4><blockquote>\n<p>crontab执行<code>/etc/cron.daily</code>下的<code>logrotate</code>脚本,由脚本调用logrotate执行配置目录和配置文件下的任务</p>\n</blockquote>\n<h4 id=\"配置解释\"><a href=\"#配置解释\" class=\"headerlink\" title=\"配置解释\"></a>配置解释</h4><blockquote>\n<p>配置文件在<code>/etc/logrotate.conf</code>配置目录在<code>/etc/logrotate.d/</code><br>logrotate.d目录防止其他程序的配置文件比如syslog</p>\n</blockquote>\n<h5 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># see &quot;man logrotate&quot; for details                                      # 详细情况执行`man logrotate</span><br><span class=\"line\"># rotate log files weekly                                              # 日志文件每周转储一次（全局配置）</span><br><span class=\"line\">weekly</span><br><span class=\"line\"></span><br><span class=\"line\"># keep 4 weeks worth of backlogs                                       # 保存4个转储周期</span><br><span class=\"line\">rotate 4</span><br><span class=\"line\"></span><br><span class=\"line\"># create new (empty) log files after rotating old ones                 # 转储模式为create</span><br><span class=\"line\">create</span><br><span class=\"line\"></span><br><span class=\"line\"># use date as a suffix of the rotated file                             # 转储的文件以日期最为后缀</span><br><span class=\"line\">dateext</span><br><span class=\"line\"></span><br><span class=\"line\"># uncomment this if you want your log files compressed                 # 是否压缩</span><br><span class=\"line\">compress</span><br><span class=\"line\"></span><br><span class=\"line\"># RPM packages drop log rotation information into this directory       # 导入配置目录</span><br><span class=\"line\">include /etc/logrotate.d</span><br><span class=\"line\"></span><br><span class=\"line\"># system-specific logs may be also be configured here.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置目录\"><a href=\"#配置目录\" class=\"headerlink\" title=\"配置目录\"></a>配置目录</h5><blockquote>\n<p>配置目录<code>syslog</code>为例：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/var/log/cron</span><br><span class=\"line\">/var/log/maillog</span><br><span class=\"line\">/var/log/messages</span><br><span class=\"line\">/var/log/secure</span><br><span class=\"line\">/var/log/spooler</span><br><span class=\"line\">/var/log/kern.log   # 目标日志文件</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    daily           # 执行周期还可以填写weekly,monthly，yearly</span><br><span class=\"line\">    missingok       # 转储时忽略日志错误</span><br><span class=\"line\">    sharedscripts   # 运行postrotate脚本，作用是在所有日志都轮转后统一执行一次脚本。如果没有配置这个，那么每个日志轮转后都会执行一次脚本</span><br><span class=\"line\">    postrotate      # 脚本开始</span><br><span class=\"line\">        /usr/bin/systemctl kill -s HUP rsyslog.service &gt;/dev/null 2&gt;&amp;1 || true</span><br><span class=\"line\">    endscript       # 脚本结束</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"其他重要参数说明\"><a href=\"#其他重要参数说明\" class=\"headerlink\" title=\"其他重要参数说明\"></a>其他重要参数说明</h6><ul>\n<li>compress                   通过gzip压缩日志</li>\n<li>nocompress                 不做gzip压缩处理</li>\n<li>copytruncate               用于还在打开中的日志文件，把当前日志备份并截断；是先拷贝再清空的方式，拷贝和清空之间有一个时间差，可能会丢失部分日志数据。</li>\n<li>nocopytruncate             备份日志文件不过不截断</li>\n<li>create mode owner group    轮转时指定创建新文件的属性，如create 0777 nobody nobody</li>\n<li>nocreate                   不建立新的日志文件</li>\n<li>delaycompress              和compress 一起使用时，转储的日志文件到下一次转储时才压缩</li>\n<li>nodelaycompress            覆盖 delaycompress 选项，转储同时压缩。</li>\n<li>missingok                  如果日志丢失，不报错继续滚动下一个日志</li>\n<li>errors address             专储时的错误信息发送到指定的Email 地址</li>\n<li>ifempty                    即使日志文件为空文件也做轮转，这个是logrotate的缺省选项。</li>\n<li>notifempty                 当日志文件为空时，不进行轮转</li>\n<li>mail address               把转储的日志文件发送到指定的E-mail 地址</li>\n<li>nomail                     转储时不发送日志文件</li>\n<li>olddir directory           转储后的日志文件放入指定的目录，必须和当前日志文件在同一个文件系统</li>\n<li>noolddir                   转储后的日志文件和当前日志文件放在同一个目录下</li>\n<li>sharedscripts              运行postrotate脚本，作用是在所有日志都轮转后统一执行一次脚本。如果没有配置这个，那么每个日志轮转后都会执行一次脚本</li>\n<li>prerotate                  在logrotate转储之前需要执行的指令，例如修改文件的属性等动作；必须独立成行</li>\n<li>postrotate                 在logrotate转储之后需要执行的指令，例如重新启动 (kill -HUP) 某个服务！必须独立成行</li>\n<li>daily                      指定转储周期为每天</li>\n<li>weekly                     指定转储周期为每周</li>\n<li>monthly                    指定转储周期为每月</li>\n<li>rotate count               指定日志文件删除之前转储的次数，0 指没有备份，5 指保留5 个备份</li>\n<li>dateext                    使用当期日期作为命名格式</li>\n<li>dateformat .%s             配合dateext使用，紧跟在下一行出现，定义文件转储后的文件名，配合dateext使用，只支持 %Y %m %d %s 这四个参数</li>\n<li>size(或minsize) log-size   日志文件超过多少之后就转储，可以是 100 100K  100M 100G这都是有效的</li>\n</ul>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://wsgzao.github.io/post/logrotate\">https://wsgzao.github.io/post/logrotate</a><br><a href=\"https://www.cnblogs.com/kevingrace/p/6307298.html\">https://www.cnblogs.com/kevingrace/p/6307298.html</a><br><code>man logrotate</code></p>\n","tags":["log"]},{"title":"nodeJS基本使用","url":"/2020/09/22/nodejs%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","content":"<p>nodejS和相关组件常见的命令记录</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>中文官方：<a href=\"https://nodejs.org/zh-cn\">https://nodejs.org/zh-cn</a></p>\n</blockquote>\n<h5 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h5><ul>\n<li>CentOS<ul>\n<li>sudo yum install epel-release #安装epel源</li>\n<li>sudo yum install nodejs 安装nodeJs</li>\n</ul>\n</li>\n<li>MacOS<ul>\n<li>brew install node</li>\n<li>官网下载安装包</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"检查是否安装成功\"><a href=\"#检查是否安装成功\" class=\"headerlink\" title=\"检查是否安装成功\"></a>检查是否安装成功</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">node --version</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装NVM管理Nodejs版本\"><a href=\"#安装NVM管理Nodejs版本\" class=\"headerlink\" title=\"安装NVM管理Nodejs版本\"></a>安装NVM管理Nodejs版本</h5><p>有些node代码有版本要求，nvm可以在各个版本时间切换</p>\n<p>执行下面的命令安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.1/install.sh | bash</span><br></pre></td></tr></table></figure>\n\n<p>安装确认：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm version</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置淘宝源\"><a href=\"#配置淘宝源\" class=\"headerlink\" title=\"配置淘宝源\"></a>配置淘宝源</h5><p>查看源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm get registry</span><br></pre></td></tr></table></figure>\n\n<p>查看修改为淘宝</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config set registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"使用nrm管理源\"><a href=\"#使用nrm管理源\" class=\"headerlink\" title=\"使用nrm管理源\"></a>使用nrm管理源</h6><p>安装nrm</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br></pre></td></tr></table></figure>\n\n<p>查看源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br><span class=\"line\"></span><br><span class=\"line\">  npm -------- https://registry.npmjs.org/</span><br><span class=\"line\">  yarn ------- https://registry.yarnpkg.com/</span><br><span class=\"line\">  cnpm ------- http://r.cnpmjs.org/</span><br><span class=\"line\">* taobao ----- https://registry.npm.taobao.org/</span><br><span class=\"line\">  nj --------- https://registry.nodejitsu.com/</span><br><span class=\"line\">  npmMirror -- https://skimdb.npmjs.com/registry/</span><br><span class=\"line\">  edunpm ----- http://registry.enpmjs.org/</span><br></pre></td></tr></table></figure>\n\n<p>切换源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">切换到淘宝</span></span><br><span class=\"line\">nrm use taobao</span><br></pre></td></tr></table></figure>\n\n<p>删除源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm del taobao</span><br></pre></td></tr></table></figure>\n\n<p>增加源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm add &lt;仓库名字&gt; &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"安装NCU检查模块更新\"><a href=\"#安装NCU检查模块更新\" class=\"headerlink\" title=\"安装NCU检查模块更新\"></a>安装NCU检查模块更新</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g npm-check-updates</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h5><ul>\n<li>npm 命令<ul>\n<li>npm install xxx 安装到当前目录</li>\n<li>npm install -g xxx 安装全局模块</li>\n<li>npm uninstall xxx 卸载模块</li>\n<li>npm uninstall -g  xxx 卸载全局模块</li>\n<li>npm list –depth&#x3D;0 查看所有高级的模块</li>\n<li>npm list –depth&#x3D;0 -global 查看所有全局安装的模块</li>\n</ul>\n</li>\n<li>nvm<ul>\n<li>nvm install xxx 安装指定版本的node</li>\n<li>nvm ls 查看现在node版本情况</li>\n<li>nvm use xxx 使用某个版本的node</li>\n<li>nvm use system 使用系统安装的node</li>\n<li>nvm uninstall xxx 卸载某个模块</li>\n</ul>\n</li>\n<li>ncu<ul>\n<li>ncu 插件模块是否有更新</li>\n<li>ncu -g 检查全局模块是否有更新</li>\n<li>ncu -u 更新到package.json</li>\n</ul>\n</li>\n</ul>\n","tags":["node","web"]},{"title":"minikube安装使用","url":"/2020/09/14/minikube%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/","content":"<p>在做k8s开发的时候受限于本地的性能以及复杂度不能搭建一个完整的k8s集群，这个时候需要minikube来搭建k8s开发环境</p>\n<span id=\"more\"></span>\n\n<h4 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h4><ul>\n<li>阿里云版本<a href=\"https://github.com/AliyunContainerService/minikube\">地址</a>,官方版本<a href=\"https://github.com/kubernetes/minikube\">地址</a>,推荐阿里云版本</li>\n</ul>\n<h5 id=\"下载阿里云版本二进制文件\"><a href=\"#下载阿里云版本二进制文件\" class=\"headerlink\" title=\"下载阿里云版本二进制文件\"></a>下载阿里云版本二进制文件</h5><h6 id=\"Macos\"><a href=\"#Macos\" class=\"headerlink\" title=\"Macos\"></a>Macos</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -Lo minikube https://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v1.13.0/minikube-darwin-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -Lo minikube https://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v1.14.2/minikube-linux-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h5><p>执行<code>minikube version</code>验证安装</p>\n<h4 id=\"启动Minikube\"><a href=\"#启动Minikube\" class=\"headerlink\" title=\"启动Minikube\"></a>启动Minikube</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">minikube start --driver=docker --image-mirror-country cn</span><br></pre></td></tr></table></figure>\n\n<p>这样就启动一个使用docker作为驱动的minikube，稍等一会就会启动成功，并且将<code>kubectl</code>设置为minikube<br>再次启动是只需要执行<code>minikube start</code>即可</p>\n<h4 id=\"多节点\"><a href=\"#多节点\" class=\"headerlink\" title=\"多节点\"></a>多节点</h4><ul>\n<li>添加</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">minikube node add</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">minikube node list</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">minikube delete &lt;名字&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><ul>\n<li><p>minikube start 启动集群</p>\n</li>\n<li><p>minikube stop 停止集群</p>\n</li>\n<li><p>minikube delete 删除集群</p>\n</li>\n<li><p>minikube dashboard 打开k8s报表</p>\n</li>\n<li><p>minikube status 查看minikube状态</p>\n</li>\n<li><p>minikube ssh 登录到minikube节点上</p>\n</li>\n</ul>\n","tags":["k8s","minikube"]},{"title":"nsenter命令使用","url":"/2021/04/26/nsenter%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/","content":"<p>nsenter在不同的命名空间中执行命令</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>namespace是linux中用于个隔离资源的特性，大名鼎鼎的docker就是基于此，而nsenter就是可以在不用<code>docker exec</code>的情况下进入别的namespace<br>常用的使用场景是很多容器都很精简，一些命令没有对于调试网络来说很麻烦，这个时候可以只进入改容器的网络命名空间，调试更加方便</p>\n</blockquote>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>一般linux发行版自带,位于util-linux包中</p>\n<h5 id=\"选项说明\"><a href=\"#选项说明\" class=\"headerlink\" title=\"选项说明\"></a>选项说明</h5><p>-t, –target pid：指定被进入命名空间的目标进程的pid<br>-m, –mount[&#x3D;file]：进入mount命令空间。如果指定了file，则进入file的命令空间<br>-u, –uts[&#x3D;file]：进入uts命令空间。如果指定了file，则进入file的命令空间<br>-i, –ipc[&#x3D;file]：进入ipc命令空间。如果指定了file，则进入file的命令空间<br>-n, –net[&#x3D;file]：进入net命令空间。如果指定了file，则进入file的命令空间<br>-p, –pid[&#x3D;file]：进入pid命令空间。如果指定了file，则进入file的命令空间<br>-U, –user[&#x3D;file]：进入user命令空间。如果指定了file，则进入file的命令空间<br>-G, –setgid gid：设置运行程序的gid<br>-S, –setuid uid：设置运行程序的uid<br>-r, –root[&#x3D;directory]：设置根目录<br>-w, –wd[&#x3D;directory]：设置工作目录</p>\n<h5 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取容器的pid</span></span><br><span class=\"line\">docker inspect alpine -f &#x27;&#123;&#123;.State.Pid&#125;&#125;&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入pid对应的namespace的ns命名空间，这时可以执行节点的ip addr命令查看对应pid的网络情况</span></span><br><span class=\"line\">sudo nsenter --target $PID --net</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">等同于 docker <span class=\"built_in\">exec</span></span></span><br><span class=\"line\">nsenter --target $PID --mount --uts --ipc --net --pid </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://man7.org/linux/man-pages/man1/nsenter.1.html\">https://man7.org/linux/man-pages/man1/nsenter.1.html</a><br><a href=\"https://staight.github.io/2019/09/23/nsenter%E5%91%BD%E4%BB%A4%E7%AE%80%E4%BB%8B/\">https://staight.github.io/2019/09/23/nsenter%E5%91%BD%E4%BB%A4%E7%AE%80%E4%BB%8B/</a></p>\n"},{"title":"osquery","url":"/2021/05/23/osquery/","content":"<p>osquery是一个由FaceBook开源用于对系统进行查询、监控以及分析的一款软件，其最意思的地方是使用sql来查询系统的一些信息</p>\n<span id=\"more\"></span>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><h5 id=\"macos\"><a href=\"#macos\" class=\"headerlink\" title=\"macos\"></a>macos</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install --cask osquery</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"ubuntu\"><a href=\"#ubuntu\" class=\"headerlink\" title=\"ubuntu\"></a>ubuntu</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export OSQUERY_KEY=1484120AC4E9F8A1A577AEEE97A80C63C9D8B80B</span><br><span class=\"line\">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $OSQUERY_KEY</span><br><span class=\"line\">sudo add-apt-repository &#x27;deb [arch=amd64] https://pkg.osquery.io/deb deb main&#x27;</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install osquery</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"centos\"><a href=\"#centos\" class=\"headerlink\" title=\"centos\"></a>centos</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L https://pkg.osquery.io/rpm/GPG | sudo tee /etc/pki/rpm-gpg/RPM-GPG-KEY-osquery</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://pkg.osquery.io/rpm/osquery-s3-rpm.repo</span><br><span class=\"line\">sudo yum-config-manager --enable osquery-s3-rpm-repo</span><br><span class=\"line\">sudo yum install osquer</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><blockquote>\n<p>osquery存在两种运行模式，分别是osqueryi(交互式模式类似sqllite)、osqueryd(后台进程模式)。</p>\n</blockquote>\n<h5 id=\"osqueryi\"><a href=\"#osqueryi\" class=\"headerlink\" title=\"osqueryi\"></a>osqueryi</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">进入交互模式</span></span><br><span class=\"line\">osqueryi</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查看所有的表</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">.<span class=\"keyword\">table</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查看dns这个图表的所有内容</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">.<span class=\"keyword\">all</span> dns_resolvers</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> dns_resolvers</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查看dns这个图表的所有内容</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">dns_resolvers</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查看表结构</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">.schema dns_resolvers</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>设置显示模式</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">.mod csv</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查看帮助</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">.help</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"常用sql\"><a href=\"#常用sql\" class=\"headerlink\" title=\"常用sql\"></a>常用sql</h5><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 负载</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">period</span>,average <span class=\"keyword\">from</span> load_average;</span><br><span class=\"line\"></span><br><span class=\"line\"># 内存</span><br><span class=\"line\"><span class=\"keyword\">select</span> memory_total,memory_free,swap_cached,active <span class=\"keyword\">from</span> memory_info;</span><br><span class=\"line\"></span><br><span class=\"line\"># 磁盘</span><br><span class=\"line\"><span class=\"keyword\">select</span> path,type,blocks,blocks_free <span class=\"keyword\">from</span> mounts <span class=\"keyword\">where</span> blocks<span class=\"operator\">!=</span><span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"># 查询监听<span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>的进程的名字，端口和pid</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">DISTINCT</span> processes.name, listening_ports.port, processes.pid</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> listening_ports <span class=\"keyword\">JOIN</span> processes <span class=\"keyword\">USING</span> (pid)</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> listening_ports.address <span class=\"operator\">=</span> <span class=\"string\">&#x27;0.0.0.0&#x27;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://osquery.io/\">https://osquery.io/</a></p>\n<p><a href=\"http://blog.spoock.com/2018/11/26/osquery-intro/\">Spoock’s Blog | osquery初识</a></p>\n"},{"title":"openvswitch","url":"/2021/08/24/openvswitch/","content":"<p>ovs是一个开源的虚拟交换机，具有强大的功能</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>ovs通过flow能实现很多策略和功能</p>\n</blockquote>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>apt</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install openvswitch-switch </span><br></pre></td></tr></table></figure>\n\n<p>yum</p>\n<p>官方未提供yum源需要编译安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装编译依赖</span></span><br><span class=\"line\">yum -y install </span><br><span class=\"line\">epel-release \\</span><br><span class=\"line\">rpm-build \\</span><br><span class=\"line\">rpmlint \\</span><br><span class=\"line\">yum-utils \\</span><br><span class=\"line\">rpmdevtools \\</span><br><span class=\"line\">gcc  \\</span><br><span class=\"line\">gcc-c++ \\</span><br><span class=\"line\">autoconf  \\</span><br><span class=\"line\">automake  \\</span><br><span class=\"line\">libtool \\</span><br><span class=\"line\">systemd-units  \\</span><br><span class=\"line\">openssl \\</span><br><span class=\"line\">openssl-devel \\</span><br><span class=\"line\">python3-devel \\</span><br><span class=\"line\">desktop-file-utils \\</span><br><span class=\"line\">groff  \\</span><br><span class=\"line\">graphviz \\</span><br><span class=\"line\">checkpolicy \\</span><br><span class=\"line\">selinux-policy-devel \\</span><br><span class=\"line\">python3-sphinx \\ # 需要epel源</span><br><span class=\"line\">procps-ng \\</span><br><span class=\"line\">libcap-ng \\</span><br><span class=\"line\">libcap-ng-devel \\</span><br><span class=\"line\">libpcap-devel  \\</span><br><span class=\"line\">numactl-devel \\</span><br><span class=\"line\">dpdk-devel \\</span><br><span class=\"line\">libbpf-devel \\</span><br><span class=\"line\">numactl-devel \\</span><br><span class=\"line\">unbound  \\</span><br><span class=\"line\">unbound-devel</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建并切换到ovs用户</span></span><br><span class=\"line\">useradd ovs &amp;&amp; su - ovs </span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建编译的文件夹</span></span><br><span class=\"line\">rpmdev-setuptree</span><br><span class=\"line\">wget https://www.openvswitch.org/releases/openvswitch-2.16.0.tar.gz</span><br><span class=\"line\">tar -C ~/rpmbuild/SOURCES/ -xzf  openvswitch-2.16.0.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">编译为rpm</span></span><br><span class=\"line\">rpmbuild -bb --nocheck ~/rpmbuild/SOURCES/openvswitch-2.16.0/rhel/openvswitch-fedora.spec</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装</span></span><br><span class=\"line\">yum -y install ~/rpmbuild/SOURCES/openvswitch-2.16.0-1.el7.x86_64.rpm</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动服务</span></span><br><span class=\"line\">systemctl start openvswitch</span><br><span class=\"line\">systemctl enable openvswitch</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"bridge\"><a href=\"#bridge\" class=\"headerlink\" title=\"bridge\"></a>bridge</h4><p>查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ovs-vsctl list-br</span><br></pre></td></tr></table></figure>\n\n<p>增加</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">增加一个网桥叫vbr0</span></span><br><span class=\"line\">ovs-vsctl add-br vbr0</span><br></pre></td></tr></table></figure>\n\n<p>删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ovs-vsctl del-br ovs-switch</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"port\"><a href=\"#port\" class=\"headerlink\" title=\"port\"></a>port</h4><p>查看所有ports</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ovs-vsctl list-ports BRIDGE</span><br></pre></td></tr></table></figure>\n\n<p>查看端口id</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ovs-vsctl list interface veth | grep &quot;ofport&quot;</span><br></pre></td></tr></table></figure>\n\n<p>增加</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ovs-vsctl  add-port BRIDGE PORT</span><br></pre></td></tr></table></figure>\n\n<p>删除</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ovs-vsctl del-port BRIDGE PORT</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"flow\"><a href=\"#flow\" class=\"headerlink\" title=\"flow\"></a>flow</h4><blockquote>\n<p>flow翻译为流表，其表示一些规则，能够控制数据包的转发</p>\n</blockquote>\n<p>显示 vbr0的 flow</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ovs-ofctl dump-flows vbr0</span><br><span class=\"line\"></span><br><span class=\"line\">cookie=0x0, duration=17.496s, table=0, n_packets=0, n_bytes=0, priority=0 actions=NORMAL</span><br></pre></td></tr></table></figure>\n\n<p>清除vbr0所有flows</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ovs-ofctl del-flows vbr0</span><br></pre></td></tr></table></figure>\n\n<p>显示vbr0的groups表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ovs-ofctl dump-groups vbr0</span><br></pre></td></tr></table></figure>\n\n<p>增加流表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ovs-ofctl add-flow vbr0 &quot;table=0, priority=0 actions=NORMAL&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"flow语法\"><a href=\"#flow语法\" class=\"headerlink\" title=\"flow语法\"></a>flow语法</h4><p>一般语法为: <code>基本 匹配规则 actions</code> 组成</p>\n<p>如：<code>&quot;table=0, priority=0 actions=NORMAL&quot;</code></p>\n<p>基本:</p>\n<ul>\n<li>duration_sec – 生效时间</li>\n<li>table_id – 所属表项，id越小匹配靠前</li>\n<li>priority – 优先级,数越大优先级越高</li>\n<li>n_packets – 处理数据包数量</li>\n<li>idle_timeout – 空闲超时时间（秒），超时则自动删除该表规则，0 表示该流规则永不过期。</li>\n</ul>\n<p>idle_timeout 不包含在 ovs-ofctl dump-flows br_name 的输出。</p>\n<p>匹配字段:</p>\n<p>in_port – vSwitch 的 INPUT Port 号<br>dl_src (Data Link layer) – 源 MAC 地址<br>dl_dst – 目的 MAC 地址<br>nw_src (Network layer) – 源 IP 地址<br>nw_dst – 目的 IP 地址<br>tp_src – TCP&#x2F;UDP 源端口号<br>tp_dst – TCP&#x2F;UDP 目的端口号<br>dl_type – 以太网协议类型，又称数据包（Packet）类型<br>ARP Packet – dl_type&#x3D;0x0806<br>IP Packet – dl_type&#x3D;0x0800<br>RARP Packet – dl_type&#x3D;0x8035<br>nw_proto – 网络层协议类型，与 dl_type 一起使用<br>ICMP Packet – dl_type&#x3D;0x0800,nw_proto&#x3D;1<br>TCP Packet – dl_type&#x3D;0x0800,nw_proto&#x3D;6<br>UDP Packet – dl_type&#x3D;0x0800,nw_proto&#x3D;17</p>\n<p>actions:</p>\n<ul>\n<li>NORMAL 和普通交换机一样正常转发</li>\n<li>OUTPUT 转发到某个端口</li>\n<li>GROUP 指定某个grup在处理</li>\n<li>DROP 丢弃</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">增加一条flows匹配端口<span class=\"built_in\">id</span>是1的端口，将他的数据转发到端口是2的接口上</span></span><br><span class=\"line\">ovs-ofctl add-flow vbr0 &quot;table=1,priority=1,in_port=1,actions=output:2&quot;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"group\"><a href=\"#group\" class=\"headerlink\" title=\"group\"></a>group</h5><p>查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ovs-ofctl dump-groups vbr0</span><br></pre></td></tr></table></figure>\n\n<p>全部删除</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ovs-ofctl del-groups vbr0</span><br></pre></td></tr></table></figure>\n\n<p>增加group表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ovs-ofctl add-group vbr0 &lt;group&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"group语法\"><a href=\"#group语法\" class=\"headerlink\" title=\"group语法\"></a>group语法</h5><p>组表需要在流表上跳转，一个group有很多bucket，很具类型选择执行</p>\n<p>group有很多类型(type)</p>\n<ul>\n<li><p>select 随机执行一个Bucket，一般用于负载均衡</p>\n</li>\n<li><p>all 所有的Bucket 都执行</p>\n</li>\n</ul>\n<p>group表有很多可以参考后面的地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将目标地址是192.168.1.66的流量跳转到group:1去</span></span><br><span class=\"line\">ovs-ofctl add-flow vbr0 &quot;table=0,priority=888,in_port=5,dl_type=0x0800,nw_dst:192.168.1.66/32,actions=group:1&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改ip地址为172.16.1.1或172.16.1.1者然后从vbr0发出</span></span><br><span class=\"line\">ovs-ofctl add-group vbr0 group_id=1,type=select,bucket=actions=mod_nw_dst:172.16.1.1,output:vbr0,bucket=actions=mod_nw_dst:172.16.1..2,output:vbr0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ovs-docker\"><a href=\"#ovs-docker\" class=\"headerlink\" title=\"ovs-docker\"></a>ovs-docker</h4><blockquote>\n<p>docker默认未集成ovs驱动，我们可以通过创建个无网络的容器通过<code>ovs-docker</code>这个工具配置网络</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启动一个无网络的容器</span></span><br><span class=\"line\">docker run --net=none --privileged=true -it ubuntu:14.04 bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在容器<span class=\"built_in\">id</span>为04c864c8ec59 中创建一个叫eth0的网卡并连接在vbr0,</span></span><br><span class=\"line\">ovs-docker add-port vbr0 eth0 04c864c8ec59 --ipaddress=&quot;192.168.1.2/24&quot; --gateway=192.168.1.1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://zhuanlan.zhihu.com/p/37408341\">https://zhuanlan.zhihu.com/p/37408341</a><br><a href=\"https://www.cnblogs.com/jmilkfan-fanguiju/p/11825081.html\">https://www.cnblogs.com/jmilkfan-fanguiju/p/11825081.html</a><br><a href=\"https://docs.openvswitch.org/en/latest\">https://docs.openvswitch.org/en/latest</a></p>\n","tags":["网络"]},{"title":"metallb","url":"/2023/08/18/metallb/","content":"<p><a href=\"https://github.com/metallb/metallb\">metallb</a>是一个开源的负载均衡器，主要解决裸金属情况下k8s使用lb类型的service的情况</p>\n<span id=\"more\"></span>\n\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.10/config/manifests/metallb-native.yaml</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"L2模式\"><a href=\"#L2模式\" class=\"headerlink\" title=\"L2模式\"></a>L2模式</h4><blockquote>\n<p>l2只能在同一个二层中使用，且只有容灾没有负载均衡功能，所有访问lb的流量都转发<code>选举</code>的主节点上在通过该节点转发到对应的pod</p>\n</blockquote>\n<p><img src=\"/../images/metallb-0.png\" alt=\"x\"></p>\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><ul>\n<li>获取minik的网段</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker network inspect minikube  |grep -i Subnet</span><br><span class=\"line\">                    &quot;Subnet&quot;: &quot;192.168.49.0/24&quot;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置lb地址范围</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">apiVersion: metallb.io/v1beta1</span><br><span class=\"line\">kind: IPAddressPool</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: first-pool</span><br><span class=\"line\">  namespace: metallb-system</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  addresses:</span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">- 192.168.10.0/24</span></span><br><span class=\"line\">  - 192.168.49.100-192.168.49.200 # docker的网络中拿去一分部给lb</span><br><span class=\"line\"><span class=\"meta prompt_\">  #</span><span class=\"language-bash\">- fc00:f853:0ccd:e799::/124</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置该地址范围的类型</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">metallb.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">L2Advertisement</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">example</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">metallb-system</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ipAddressPools:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">first-pool</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h5><ul>\n<li>部署一个服务器</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/NatureLR/net-echo/master/k8s.yaml</span><br><span class=\"line\">kubectl patch svc net-echo -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;type&quot;: &quot;LoadBalancer&quot;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">k get svc net-echo -o wide</span><br><span class=\"line\">NAME       TYPE           CLUSTER-IP       EXTERNAL-IP      PORT(S)        AGE   SELECTOR</span><br><span class=\"line\">net-echo   LoadBalancer   10.103.124.212   192.168.49.100   80:31495/TCP   54s   app=net-echo</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>我得测试环境为minikube,创建一个在同一个二层的pod</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定网络为minikube</span></span><br><span class=\"line\">docker run --net minikube -it  alpine sh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装curl</span></span><br><span class=\"line\">apk add curl</span><br><span class=\"line\"></span><br><span class=\"line\">curl 192.168.49.100</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">ClientAddr: 10.244.205.192:48450</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">ClientReqPath: /</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">ClientReqMeth: GET</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">ServerHostName: net-echo-7cccf56f57-8xtcw</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">ServerAddr: 10.244.205.194</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看arp表，192.168.49.100这个vip是<code>02:42:c0:a8:31:03</code>响应的</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">arp -n</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">? (192.168.49.3) at 02:42:c0:a8:31:03 [ether]  on eth0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">? (192.168.49.100) at 02:42:c0:a8:31:03 [ether]  on eth0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">? (192.168.49.1) at 02:42:56:00:61:a6 [ether]  on eth0</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>请求最终发送到了minikube-m02这个节点然后再到pod上</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">minikube ssh --node=&quot;minikube-m02&quot;</span><br><span class=\"line\">ip addr |grep 02:42:c0:a8:31:03</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">docker@minikube-m02:~$ ip addr |grep 02:42:c0:a8:31:03</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">   <span class=\"built_in\">link</span>/ether 02:42:c0:a8:31:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在起一个容器,会发现其实都是同一个节点在响应这也是二层的</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --net minikube -it  alpine sh</span><br><span class=\"line\">apk add curl</span><br><span class=\"line\"></span><br><span class=\"line\">curl 192.168.49.100</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/ <span class=\"comment\">#  curl 192.168.49.100</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ClientAddr: 10.244.205.192:61123</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ClientReqPath: /</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ClientReqMeth: GET</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ServerHostName: net-echo-7cccf56f57-8xtcw</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">ServerAddr: 10.244.205.194</span></span><br><span class=\"line\"></span><br><span class=\"line\">arp -n</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">/ <span class=\"comment\"># arp -n</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">? (192.168.49.1) at 02:42:56:00:61:a6 [ether]  on eth0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">? (192.168.49.100) at 02:42:c0:a8:31:03 [ether]  on eth0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">? (192.168.49.3) at 02:42:c0:a8:31:03 [ether]  on eth0</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以看到同一个二层的集群外的机器访问lb都是通过mac流向同一个node，从而通过kube-proxy流向pod</li>\n</ul>\n<h4 id=\"BGP模式\"><a href=\"#BGP模式\" class=\"headerlink\" title=\"BGP模式\"></a>BGP模式</h4><blockquote>\n<p>bgp模式通过向路由发布bgp路由从而实现vip功能，此功能需要路由器支持bgp协议故无法实验</p>\n</blockquote>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://metallb.universe.tf/\">https://metallb.universe.tf</a></p>\n","tags":["k8s","负载均衡","模版"]},{"title":"rpm包构建","url":"/2020/11/16/rpm%E5%8C%85%E6%9E%84%E5%BB%BA/","content":"<p>RPM（Redhat Package Manager）是Rhel，Centos，Fedora等系统的软件包管理格式</p>\n<span id=\"more\"></span>\n\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><blockquote>\n<p>在centos等使用rpm的系统中安装</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y rpm-build rpmlint yum-utils rpmdevtools</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"生成目录结构\"><a href=\"#生成目录结构\" class=\"headerlink\" title=\"生成目录结构\"></a>生成目录结构</h5><p>初始化目录结构：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpmdev-setuptree</span><br></pre></td></tr></table></figure>\n\n<p>在<code>home</code>目录下生成目录结构如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpmbuild</span><br><span class=\"line\">├── BUILD</span><br><span class=\"line\">├── BUILDROOT</span><br><span class=\"line\">├── RPMS</span><br><span class=\"line\">├── SOURCES</span><br><span class=\"line\">├── SPECS</span><br><span class=\"line\">└── SRPMS</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>目录位置</th>\n<th>宏代码</th>\n<th>说明</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BUILD</td>\n<td>%_builddir</td>\n<td>编译目录</td>\n<td><code>%build</code>阶段在此目录执行编译</td>\n</tr>\n<tr>\n<td>BUILDROOT</td>\n<td>%_buildrootdir</td>\n<td>安装虚拟目录</td>\n<td><code>%install</code>阶段在此目录执行安装脚本</td>\n</tr>\n<tr>\n<td>RPMS</td>\n<td>%_rpmdir</td>\n<td>rpm目录</td>\n<td>生成的rpm包所在目录</td>\n</tr>\n<tr>\n<td>SOURCES</td>\n<td>%_sourcedir</td>\n<td>源码目录</td>\n<td>源码包目录,<code>%prep</code>阶段从此目录找需要解压的包</td>\n</tr>\n<tr>\n<td>SRPMS</td>\n<td>%_srcrpmdir</td>\n<td>源码rpm目录</td>\n<td>生成的rpm源码包所在目录</td>\n</tr>\n<tr>\n<td>SPECS</td>\n<td>%_specdir</td>\n<td>Spec目录</td>\n<td>spec文件存放的目录</td>\n</tr>\n</tbody></table>\n<h5 id=\"编写spec文件\"><a href=\"#编写spec文件\" class=\"headerlink\" title=\"编写spec文件\"></a>编写spec文件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">%global debug_package %&#123;nil&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Name:           &#123;&#123;.project&#125;&#125;</span><br><span class=\"line\">Version:        %&#123;_version&#125;</span><br><span class=\"line\">Release:        1%&#123;?dist&#125;</span><br><span class=\"line\">Summary:        &#123;&#123;.ShortDescribe&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Group:          Application/WebServer</span><br><span class=\"line\">License:        Apache 2.0</span><br><span class=\"line\">URL:            http://www.baidu.com</span><br><span class=\"line\">Source0:        %&#123;name&#125;.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 构建依赖</span><br><span class=\"line\">BuildRequires:  git</span><br><span class=\"line\">BuildRequires:  make</span><br><span class=\"line\"></span><br><span class=\"line\"># 详细描述</span><br><span class=\"line\">%description</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123;.LongDescribe&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 构建之前执行的脚本，一般为解压缩将在source目录的压缩包解压到build目录</span><br><span class=\"line\">%prep</span><br><span class=\"line\"></span><br><span class=\"line\"># %setup 不加任何选项，仅将软件包打开。</span><br><span class=\"line\"># %setup -a 切换目录前，解压指定 Source 文件，例如 &quot;-a 0&quot; 表示解压 &quot;Source0&quot;</span><br><span class=\"line\"># %setup -n newdir 将软件包解压在newdir目录。</span><br><span class=\"line\"># %setup -c 解压缩之前先产生目录。</span><br><span class=\"line\"># %setup -b num 将第 num 个 source 文件解压缩。</span><br><span class=\"line\"># %setup -D 解压前不删除目录</span><br><span class=\"line\"># %setup -T 不使用default的解压缩操作。</span><br><span class=\"line\"># %setup -q 不显示解包过程</span><br><span class=\"line\"># %setup -T -b 0 将第 0 个源代码文件解压缩。</span><br><span class=\"line\"># %setup -c -n newdir 指定目录名称 newdir，并在此目录产生 rpm 套件。</span><br><span class=\"line\"># %setup -q 不打印解压日志</span><br><span class=\"line\"></span><br><span class=\"line\">%setup -q -c -n src -a 0</span><br><span class=\"line\"></span><br><span class=\"line\"># 编译脚本</span><br><span class=\"line\">%build</span><br><span class=\"line\"></span><br><span class=\"line\">cd &#123;&#123;.project&#125;&#125; &amp;&amp; make</span><br><span class=\"line\"></span><br><span class=\"line\"># 检查</span><br><span class=\"line\">%check</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#123;.project&#125;&#125;/bin/&#123;&#123;.project&#125;&#125; version</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装脚本,将build目录产生的可执行文件复制到buildroot虚拟目录中</span><br><span class=\"line\">%install</span><br><span class=\"line\"></span><br><span class=\"line\">install -D  -p  -m 0755 $&#123;RPM_BUILD_DIR&#125;/src/&#123;&#123;.project&#125;&#125;/bin/&#123;&#123;.project&#125;&#125; $&#123;RPM_BUILD_ROOT&#125;%&#123;_bindir&#125;/&#123;&#123;.project&#125;&#125;</span><br><span class=\"line\">install -D -m 0644 $&#123;RPM_BUILD_DIR&#125;/src/&#123;&#123;.project&#125;&#125;/&#123;&#123;.project&#125;&#125;.service $&#123;RPM_BUILD_ROOT&#125;%&#123;_unitdir&#125;/&#123;&#123;.project&#125;&#125;.service</span><br><span class=\"line\"></span><br><span class=\"line\"># 说明%&#123;buildroot&#125;中那些文件和目录需要打包到rpm中</span><br><span class=\"line\">%files</span><br><span class=\"line\"></span><br><span class=\"line\">%&#123;_bindir&#125;/&#123;&#123;.project&#125;&#125;</span><br><span class=\"line\">%&#123;_unitdir&#125;/&#123;&#123;.project&#125;&#125;.service</span><br><span class=\"line\"></span><br><span class=\"line\"># 变更记录</span><br><span class=\"line\">%changelog</span><br></pre></td></tr></table></figure>\n\n<p>将上面的文件保存到<code>rpmbuild/SPECS</code>目录</p>\n<h5 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h5><p>将上面的spec文件保存为test.spec到<code>~/rpmbuild/SPECS/</code>中执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpmbuild -ba ~/rpmbuild/SPECS/test.spec</span><br></pre></td></tr></table></figure>\n\n<p>脚本如果没有问题的话在<code>~/rpmbuild/RPMS</code>目录下生成rpm文件<code>~/rpmbuild/SRPMS</code>为rpm源码包</p>\n<h6 id=\"常用选项\"><a href=\"#常用选项\" class=\"headerlink\" title=\"常用选项\"></a>常用选项</h6><ul>\n<li>-ba 表示构建二进制包和源码包</li>\n<li>-bb 只构建二进制包</li>\n<li>–clean 构建完成后清理</li>\n<li>–define&#x3D;”k v” 定义spec中的变量</li>\n<li>–help 查看帮助</li>\n</ul>\n<h5 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h5><p><a href=\"https://www.cnblogs.com/michael-xiang/p/10480809.html\">https://www.cnblogs.com/michael-xiang/p/10480809.html</a><br><a href=\"https://www.cnblogs.com/jing99/p/9672295.html\">https://www.cnblogs.com/jing99/p/9672295.html</a></p>\n","tags":["rpm"]},{"title":"pve中使用arpl安装群晖.md","url":"/2023/11/05/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96/","content":"<p>群辉很强大，但是配置拉胯，且价格感人，使用pve虚拟化安装群辉</p>\n<span id=\"more\"></span>\n\n<p>使用开源的arpl固件安装</p>\n<h4 id=\"下载arpl固件\"><a href=\"#下载arpl固件\" class=\"headerlink\" title=\"下载arpl固件\"></a>下载arpl固件</h4><ul>\n<li><p>arpl有几个版本原版是巴西的<a href=\"https://github.com/fbelavenuto\">fbelavenuto</a>项目地址<a href=\"https://github.com/fbelavenuto/arpl/releases\">https://github.com/fbelavenuto/arpl/releases</a>但是fbelavenuto因为个人原因停更了</p>\n</li>\n<li><p>第二个是国内的<a href=\"https://github.com/wjz304\">wjz304</a>根据fbelavenuto汉化并加速了不过因为原作者停更也停更了,项目地址<a href=\"https://github.com/wjz304/arpl-zh_CN\">https://github.com/wjz304/arpl-zh_CN</a></p>\n</li>\n<li><p>第三个还是<a href=\"https://github.com/wjz304\">wjz304</a>的第二个则是因为原作者停更了不想破坏发布流程重新弄得一个项目<a href=\"https://github.com/wjz304/rr\">https://github.com/wjz304/rr</a>，此仓库因一些原因被被作者删除,qq群更新</p>\n</li>\n</ul>\n<p>pve则选择带img的</p>\n<h4 id=\"创建pve虚拟机\"><a href=\"#创建pve虚拟机\" class=\"headerlink\" title=\"创建pve虚拟机\"></a>创建pve虚拟机</h4><ul>\n<li>上传到pve</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-1.png\" alt=\"Alt text\"></p>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-2.png\" alt=\"Alt text\"></p>\n<ul>\n<li>创建虚机，起个名字</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-3.png\" alt=\"Alt text\"></p>\n<ul>\n<li>操作系统稍后安装这里选择不要操作系统</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-4.png\" alt=\"Alt text\"></p>\n<ul>\n<li>这里注意这个机型要选择q35</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-5.png\" alt=\"Alt text\"></p>\n<ul>\n<li><p>磁盘同样不要，稍后添加<br><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-6.png\" alt=\"Alt text\"></p>\n</li>\n<li><p>cpu根据宿主机情况选择</p>\n</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-7.png\" alt=\"Alt text\"></p>\n<ul>\n<li>内存编译的时候最好大于4g</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-8.png\" alt=\"Alt text\"></p>\n<ul>\n<li>网络默认即可</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-9.png\" alt=\"Alt text\"></p>\n<ul>\n<li>确认页</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-10.png\" alt=\"Alt text\"></p>\n<ul>\n<li>将最开始导入的img文件导入到创建的虚拟机中</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">qm importdisk 106 /var/lib/vz/template/iso/arpl_rr_4GB.img local-lvm</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-11.png\" alt=\"Alt text\"></p>\n<ul>\n<li>将手动导入的磁盘修改为sata类型的磁盘</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-12.png\" alt=\"Alt text\"></p>\n<ul>\n<li>双击 即可修改</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-13.png\" alt=\"Alt text\"></p>\n<ul>\n<li>再添加一个sata的磁盘作为系统盘</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-14.png\" alt=\"Alt text\"></p>\n<ul>\n<li>修改引导顺序为刚刚导入的第一个磁盘</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-15.png\" alt=\"Alt text\"></p>\n<ul>\n<li>启动虚拟机则看到此界面则启动成功，浏览器打开提示的地址</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-16.png\" alt=\"Alt text\"></p>\n<h4 id=\"构建固件\"><a href=\"#构建固件\" class=\"headerlink\" title=\"构建固件\"></a>构建固件</h4><ul>\n<li>打开之后则进入构建界面</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-17.png\" alt=\"Alt text\"></p>\n<ul>\n<li>我这个版本是有中文版本的选择修改语言</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-18.png\" alt=\"Alt text\"></p>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-19.png\" alt=\"Alt text\"> </p>\n<ul>\n<li>改完语言后选择选择型号</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-20.png\" alt=\"Alt text\"> </p>\n<ul>\n<li>我这里选择ds923+</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-21.png\" alt=\"Alt text\"></p>\n<ul>\n<li>然后选择版本</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-22.png\" alt=\"Alt text\"></p>\n<ul>\n<li>这里选择7.2版本了</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-23.png\" alt=\"Alt text\"></p>\n<ul>\n<li>然后开始编译引导，稍等片刻</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-24.png\" alt=\"Alt text\"></p>\n<ul>\n<li>编译完成后有个启动</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-25.png\" alt=\"Alt text\"></p>\n<ul>\n<li>等待一会后则进入提示的地址,就进入了群辉安装引导界面了,按提示选择安装大概十分钟左</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-26.png\" alt=\"Alt text\"></p>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-27.png\" alt=\"Alt text\"></p>\n<ul>\n<li>稍等则进入dsm系统</li>\n</ul>\n<p><img src=\"/../images/pve%E4%B8%AD%E4%BD%BF%E7%94%A8arpl%E5%AE%89%E8%A3%85%E7%BE%A4%E6%99%96-28.png\" alt=\"Alt text\"></p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.cnblogs.com/mokou/p/17042705.html\">https://www.cnblogs.com/mokou/p/17042705.html</a></p>\n","tags":["虚拟化","pve"]},{"title":"rsync使用","url":"/2023/06/07/rsync%E4%BD%BF%E7%94%A8/","content":"<p>rsync是一个用于文件同步和传输的实用工具。它可以在本地或远程系统之间进行文件传输，并提供许多功能，例如增量复制、备份、远程同步等。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ul>\n<li>centos</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum install rsync</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>debian</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install rsync</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>macos自带但是版本比较老，可以用homebrew更新</li>\n</ul>\n<h4 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h4><ul>\n<li>基本使用</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -r $src $dest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>同步元信息比如创建时间</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -a $src $dest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>显示进度-v</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -av $src $dest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>压缩传输-z</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -avz $src $dest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>src末尾带<code>/</code>在目标上不创建目录,既带<code>/</code>意思是将目录下的文件传输到目标，不带则便是将<code>文件夹</code>传输到目标</li>\n</ul>\n<h4 id=\"SSH远程同步\"><a href=\"#SSH远程同步\" class=\"headerlink\" title=\"SSH远程同步\"></a>SSH远程同步</h4><ul>\n<li>一般只需要在目标前加上用户名和ip和冒号即可</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -rv -e ssh $src root@0.0.0.0:$dest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上传,<code>-e ssh</code>可以省略</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -rv $src root@0.0.0.0:$dest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -rv root@0.0.0.0:$src $dest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>指定ssh端口</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -rv -e &quot;ssh -p2222&quot; $src root@0.0.0.0:$dest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"rsync协议同步\"><a href=\"#rsync协议同步\" class=\"headerlink\" title=\"rsync协议同步\"></a>rsync协议同步</h4><h5 id=\"服务端部署\"><a href=\"#服务端部署\" class=\"headerlink\" title=\"服务端部署\"></a>服务端部署</h5><h6 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; EOF &gt; rsyncd.conf</span><br><span class=\"line\">uid = root</span><br><span class=\"line\">gid = root</span><br><span class=\"line\">port = 873</span><br><span class=\"line\">fake super = yes</span><br><span class=\"line\">use chroot = yes</span><br><span class=\"line\">max connections = 200</span><br><span class=\"line\">timeout = 600</span><br><span class=\"line\">ignore errors</span><br><span class=\"line\">read only = no</span><br><span class=\"line\">list = yes</span><br><span class=\"line\">auth users = rsync</span><br><span class=\"line\">secrets file = /root/rsync/rsyncd.passwd</span><br><span class=\"line\">log file = /root/rsync/rsyncd.log</span><br><span class=\"line\">pid file = /root/rsync/rsyncd.pid</span><br><span class=\"line\">lock  file = /root/rsync/rsyncd.lock</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\">####################################</span></span></span><br><span class=\"line\">[rsync]</span><br><span class=\"line\">comment = rsync</span><br><span class=\"line\">path = /root/rsync/data/</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参数说明</li>\n</ul>\n<p>参阅 <a href=\"https://docs.rockylinux.org/books/learning_rsync/04_rsync_configure/\">https://docs.rockylinux.org/books/learning_rsync/04_rsync_configure/</a></p>\n<table>\n<thead>\n<tr>\n<th>项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>address &#x3D; 192.168.100.4</td>\n<td>rsync默认监听的IP地址</td>\n</tr>\n<tr>\n<td>port &#x3D; 873</td>\n<td>rsync默认监听的端口</td>\n</tr>\n<tr>\n<td>pid file &#x3D; &#x2F;var&#x2F;run&#x2F;rsyncd.pid</td>\n<td>进程pid的文件位置</td>\n</tr>\n<tr>\n<td>log file &#x3D; &#x2F;var&#x2F;log&#x2F;rsyncd.log</td>\n<td>日志的文件位置</td>\n</tr>\n<tr>\n<td>[share]</td>\n<td>共享名称</td>\n</tr>\n<tr>\n<td>comment &#x3D; rsync</td>\n<td>备注或者描述信息</td>\n</tr>\n<tr>\n<td>path &#x3D; &#x2F;rsync&#x2F;</td>\n<td>所在的系统路径位置</td>\n</tr>\n<tr>\n<td>read only &#x3D; yes</td>\n<td>yes表示只读，no表示可读可写</td>\n</tr>\n<tr>\n<td>list &#x3D; yes</td>\n<td>yes表示可以看到共享名字</td>\n</tr>\n<tr>\n<td>dont compress &#x3D; *.gz *.gz2 *.zip</td>\n<td>哪些文件类型不对它进行压缩</td>\n</tr>\n<tr>\n<td>auth users &#x3D; rsync</td>\n<td>启用虚拟用户，定义个虚拟用户叫什么。 需要自行创建</td>\n</tr>\n<tr>\n<td>secrets file &#x3D; &#x2F;etc&#x2F;rsyncd_users.db</td>\n<td>用来指定虚拟用户的密码文件位置，必须以.db结尾。 文件的内容格式是”用户名:密码”，一行一个</td>\n</tr>\n<tr>\n<td>fake super  &#x3D; yes</td>\n<td>yes表示不需要daemon以root运行，就可以存储文件的完整属性。</td>\n</tr>\n<tr>\n<td>uid &#x3D;</td>\n<td></td>\n</tr>\n<tr>\n<td>gid &#x3D;</td>\n<td>两个参数用来指定当以root身份运行rsync守护进程时，指定传输文件所使用的用户和组，默认都是nobody 默认是nobody</td>\n</tr>\n<tr>\n<td>use chroot  &#x3D;  yes</td>\n<td>传输前是否需要进行根目录的锁定，yes是，no否。 rsync为了增加安全性，默认值为yes。</td>\n</tr>\n<tr>\n<td>max  connections  &#x3D;  4</td>\n<td>允许最大的连接数，默认值为0，表示不做限制</td>\n</tr>\n<tr>\n<td>lock file &#x3D; &#x2F;var&#x2F;run&#x2F;rsyncd.lock</td>\n<td>指定的锁文件，和“max  connections ”参数关联</td>\n</tr>\n<tr>\n<td>exclude  &#x3D;  lost+found&#x2F;</td>\n<td>排除不需要传输的目录</td>\n</tr>\n<tr>\n<td>transfer logging  &#x3D;  yes</td>\n<td>是否启用类似ftp的日志格式来记录rsync的上传和下载</td>\n</tr>\n<tr>\n<td>timeout &#x3D;  900</td>\n<td>指定超时时间。 指定超时的时间，如果在指定时间内没有数据被传输，则rsync将直接退出。 单位为秒，默认值为0表示永不超时</td>\n</tr>\n<tr>\n<td>ignore nonreadable &#x3D; yes</td>\n<td>是否忽略用户没有访问权限的文件</td>\n</tr>\n<tr>\n<td>motd file &#x3D; &#x2F;etc&#x2F;rsyncd&#x2F;rsyncd.motd</td>\n<td>用于指定消息文件的路径。 默认情况下，是没有 motd 文件的。 这个消息就是当用户登录以后显示的欢迎信息。</td>\n</tr>\n<tr>\n<td>hosts allow &#x3D; 10.1.1.1&#x2F;24</td>\n<td>用于指定哪些IP或者网段的客户端允许访问。 可填写ip、网段、主机名、域下面的主机，多个用空格隔开。 默认允许所有人访问</td>\n</tr>\n<tr>\n<td>hosts deny &#x3D;  10.1.1.20</td>\n<td>用户指定哪些ip或者网段的客户端不允许访问。 如果hosts allow和hosts deny有相同的匹配结果，则该客户端最终不能访问。 如果客户端的地址即不在hosts allow中，也不在hosts deny中，则该客户端允许访问。 默认情况下，没有该参数</td>\n</tr>\n<tr>\n<td>auth  users &#x3D; li</td>\n<td>启用虚拟用户，多个用户用英语状态的逗号进行隔开</td>\n</tr>\n<tr>\n<td>syslog facility  &#x3D; daemon</td>\n<td>定义系统日志的级别， 有这些值可填：auth、authpriv、cron、daemon、ftp、kern、lpr、mail、news、 security、syslog、user、uucp、 local0、local1、local2、local3、local4、local5、local6和local7。 默认值是daemon</td>\n</tr>\n</tbody></table>\n<h5 id=\"创建密码文件\"><a href=\"#创建密码文件\" class=\"headerlink\" title=\"创建密码文件\"></a>创建密码文件</h5><ul>\n<li>这个要和配置文件对应一致</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">账户名:密码</span></span><br><span class=\"line\">echo &quot;rsync:123456&quot; &gt; rsyncd.passwd</span><br><span class=\"line\">chmod 600 rsyncd.passwd</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"管理脚本\"><a href=\"#管理脚本\" class=\"headerlink\" title=\"管理脚本\"></a>管理脚本</h5><blockquote>\n<p>管理脚本有很多种可以自己创建一个systemd管理，这里我就简单点使用脚本管理</p>\n</blockquote>\n<ul>\n<li>启动脚本</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt; start.sh</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">! /bin/bash</span></span><br><span class=\"line\">rsync --daemon --config=./rsyncd.conf</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>停止脚本</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt; EOF &gt; stop.sh</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">! /bin/bash</span></span><br><span class=\"line\">kill -15 $(cat rsyncd.pid)</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"目录总览\"><a href=\"#目录总览\" class=\"headerlink\" title=\"目录总览\"></a>目录总览</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── data</span><br><span class=\"line\">├── rsyncd.conf</span><br><span class=\"line\">├── rsyncd.lock</span><br><span class=\"line\">├── rsyncd.log</span><br><span class=\"line\">├── rsyncd.passwd</span><br><span class=\"line\">├── start.sh</span><br><span class=\"line\">└── stop.sh</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"rsync客户端访问\"><a href=\"#rsync客户端访问\" class=\"headerlink\" title=\"rsync客户端访问\"></a>rsync客户端访问</h5><ul>\n<li>在前面加了个<code>rsync://</code>或者<code>::</code>指定协议</li>\n<li>module是rsync守护进程指定的</li>\n<li>默认交互式输入名</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这个用户名是rsync配置文件里的虚拟用户</span></span><br><span class=\"line\">rsync -rvP $src/ $user@$ip::/$module/$dest </span><br><span class=\"line\">rsync -rvP $src/ rsync://$user@$ip/$module/$dest</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">例子</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">rsync -rvp src/ rsync@192.168.1.1::rsync</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">rsync -rvp src/ rsync://rsync@192.168.1.1/rsync</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>显示所有模块</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -rvP $src/ rsync://$user@$ip/</span><br><span class=\"line\">rsync -rvP $src/ $user@$ip::</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">例子</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">rsync -rvp src/ rsync://rsync@10.69.202.146/</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">rsync -rvp src/ rsync@10.69.202.146::</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用变量的方式传入密码</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">RSYNC_PASSWORD=$passwd rsync -rvP $src/ $user@$ip::$module</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">例子</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">RSYNC_PASSWORD=123456 rsync -rvp src/ rsync@192.168.1.1::rsync</span>   </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>使用文件传入密码</p>\n</li>\n<li><p>创建密码文件,权限需要600,这个文件的格式和服务端的不一致</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &quot;123456&quot; &gt; rsync.passwd</span><br><span class=\"line\">chown 600 rsync.passwd</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>格式</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -rvp $src/ $user@$addr::$module --password-file=$paaswdfile</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">例子</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">rsync -rvp src/ rsync@192.168.1.1::rsync --password-file=rsync.passwd</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"断点续传\"><a href=\"#断点续传\" class=\"headerlink\" title=\"断点续传\"></a>断点续传</h4><ul>\n<li>–partial传输中断不删除</li>\n<li>–progress显示进度</li>\n<li>-P 是<code>--progress</code>和<code>--partial</code>这两个参数的结合</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -avP $src $dest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"镜像同步\"><a href=\"#镜像同步\" class=\"headerlink\" title=\"镜像同步\"></a>镜像同步</h4><ul>\n<li>–delete镜像同步，目标目录和源目录一致,目标目录多余的会被删除</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -av --delete $src $dest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>–existing 只传输目标有的的</p>\n</li>\n<li><p>–ignore-existing 只传输目标没有的</p>\n</li>\n</ul>\n<h4 id=\"设置带宽\"><a href=\"#设置带宽\" class=\"headerlink\" title=\"设置带宽\"></a>设置带宽</h4><ul>\n<li>–bwlimit 设置带宽,单位是KB&#x2F;s</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -rv --bwlimit=1000  $src $dest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件过滤\"><a href=\"#文件过滤\" class=\"headerlink\" title=\"文件过滤\"></a>文件过滤</h4><ul>\n<li>–include指定同步的文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">排除日志文件</span></span><br><span class=\"line\">rsync -rv --include=&quot;*.dat&quot; $src $dest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>–exclude排除同步的文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">排除日志文件</span></span><br><span class=\"line\">rsync -rv --exclude=&quot;*.log&quot; $src $dest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"增量备份\"><a href=\"#增量备份\" class=\"headerlink\" title=\"增量备份\"></a>增量备份</h4><ul>\n<li>–link-dest&#x3D;$DIR 和基准目录不一样的文件创建链接,注意这个目录需要时<code>绝对路径</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rsync -a -v --link-dest=$base $src $dest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.ruanyifeng.com/blog/2020/08/rsync.html\">https://www.ruanyifeng.com/blog/2020/08/rsync.html</a></p>\n","tags":["rsync"]},{"title":"ssh隧道","url":"/2020/11/12/ssh%E9%9A%A7%E9%81%93/","content":"<p>通过ssh端口转发，穿透内网或绕过防火墙，以及tcp流量加密保护</p>\n<span id=\"more\"></span>\n<h4 id=\"SSH隧道\"><a href=\"#SSH隧道\" class=\"headerlink\" title=\"SSH隧道\"></a>SSH隧道</h4><p>端口转发默认是开启如果没开启则需要<code>AllowTcpForwarding=yes</code></p>\n<h5 id=\"本地端口转发\"><a href=\"#本地端口转发\" class=\"headerlink\" title=\"本地端口转发\"></a>本地端口转发</h5><p><img src=\"/../images/pasted-8.png\" alt=\"upload successful\"></p>\n<blockquote>\n<p>在192.168.1.1上执行下面的命令<br>通过192.168.1.2的22号端口将本地的3306端口代理到192.168.1.1的3306端口</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -g -f -N -L 3306:192.168.1.2:3306 root@172.16.1.2 -p 22</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"远程端口转发\"><a href=\"#远程端口转发\" class=\"headerlink\" title=\"远程端口转发\"></a>远程端口转发</h5><p><img src=\"/../images/pasted-9.png\" alt=\"upload successful\"></p>\n<blockquote>\n<p>在192.168.1.1上执行下面的命令<br>则表示将192.168.1.2的3306端口转发到1.1.1.1的3306端口上，这样1.1.1.1就能访问192.168.1.2上3306端口的服务了</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh -f -N -R 3306:192.168.1.2:3306 root@1.1.1.1 -p 22</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"本地转发和远程转发\"><a href=\"#本地转发和远程转发\" class=\"headerlink\" title=\"本地转发和远程转发\"></a>本地转发和远程转发</h5><p><code>ssh -f -N -&lt;L|R&gt; &lt;映射IP&gt;:&lt;映射端口&gt;:&lt;转发IP&gt;:&lt;转发端口&gt; &lt;服务账号&gt;@&lt;服务IP&gt; -p &lt;服务端口&gt;</code></p>\n<ul>\n<li>不管是本地转发和转成转都是转发端口</li>\n<li>远程和本地是相对于执行ssh隧道命令的位置来说的</li>\n<li>本地转发将映射端口映射到ssh客户端，也就是上面命令中的映射IP和映射端口在本地，映射IP可以省略默认为localhost且映射IP只能写本地拥有的IP，-g选项可以将绑定变为0.0.0.0,转发IP和转发端口则是服务端需要转发的地址和端口</li>\n<li>远程转发则将映射端口映射到ssh服务端，也就是将映射IP和映射端口放在了ssh服务端,转发ip和转发端口是通过ssh客户端执行的</li>\n</ul>\n<h5 id=\"选项解释\"><a href=\"#选项解释\" class=\"headerlink\" title=\"选项解释\"></a>选项解释</h5><ul>\n<li>“-L选项”：表示使用本地端口转发创建ssh隧道</li>\n<li>“-R选项”：表示使用远程端口转发创建ssh隧道</li>\n<li>“-N选项”：表示创建隧道以后不连接到sshServer端，通常与”-f”选项连用</li>\n<li>“-f选项”：表示在后台运行ssh隧道，通常与”-N”选项连用</li>\n<li>“-g选项”：表示ssh隧道对应的转发端口将监听在主机的所有IP中，不使用”-g选项”时，转发端口默认只监听在主机的本地回环地址中，”-g”表示开启网关模式，远程端口转发中，无法开启网关功能</li>\n</ul>\n","tags":["ssh","内网穿透"]},{"title":"pod管理","url":"/2020/01/17/pod%E7%AE%A1%E7%90%86/","content":"<p>k8s pod常见操作</p>\n<span id=\"more\"></span>\n\n<h6 id=\"一键删除pod状态为Terminating的POD\"><a href=\"#一键删除pod状态为Terminating的POD\" class=\"headerlink\" title=\"一键删除pod状态为Terminating的POD\"></a>一键删除pod状态为Terminating的POD</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get pods |grep Terminating |awk -F &quot; &quot; &#x27;&#123;print$1&#125;&#x27;|xargs -n 1 kubectl delete pods --force --grace-period 0</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"横向扩容\"><a href=\"#横向扩容\" class=\"headerlink\" title=\"横向扩容\"></a>横向扩容</h6><p>横向扩容有两种方式，使用命令或yaml文件</p>\n<h6 id=\"手动扩容\"><a href=\"#手动扩容\" class=\"headerlink\" title=\"手动扩容\"></a>手动扩容</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl scale &lt;资源类型&gt; &lt;资源名字&gt; --replicas &lt;副本数量&gt; 将pod的副本书保持到指定数量</span><br></pre></td></tr></table></figure>\n\n<p>例子：kubectl scale deployment webhook –replicas 2 将test的副本数扩容到2  </p>\n<p>自动横向扩容（HPA）</p>\n<h6 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl autoscale &lt;资源类型&gt; &lt;资源名字&gt; --min=&lt;最小副本&gt; --max=&lt;最大副本&gt; --cpu-percent=&lt;CPU阈值&gt; -n &lt;namespace&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get hpa</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl describe hpa &lt;hpa名字&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl deleted hpa &lt;hpa名字&gt;  删除hpa</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"配置文件形式\"><a href=\"#配置文件形式\" class=\"headerlink\" title=\"配置文件形式\"></a>配置文件形式</h6><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">autoscaling/v2beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">HorizontalPodAutoscaler</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">productpage-v1</span> <span class=\"comment\"># hpa名字</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">scaleTargetRef:</span></span><br><span class=\"line\">    <span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1beta1</span></span><br><span class=\"line\">    <span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">productpage-v1</span></span><br><span class=\"line\">  <span class=\"attr\">minReplicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">maxReplicas:</span> <span class=\"number\">8</span></span><br><span class=\"line\">  <span class=\"attr\">metrics:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">Resource</span></span><br><span class=\"line\">    <span class=\"attr\">resource:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">memory</span></span><br><span class=\"line\">      <span class=\"attr\">targetAverageUtilization:</span> <span class=\"number\">50</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">Resource</span></span><br><span class=\"line\">    <span class=\"attr\">resource:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">cpu</span></span><br><span class=\"line\">      <span class=\"attr\">targetAverageUtilization:</span> <span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n","tags":["k8s"]},{"title":"为ssh配置双因素认证","url":"/2022/12/30/%E4%B8%BAssh%E9%85%8D%E7%BD%AE%E5%8F%8C%E5%9B%A0%E7%B4%A0%E8%AE%A4%E8%AF%81/","content":"<p>双因素认证使用totp算法来生成动态的验证码来验证</p>\n<span id=\"more\"></span>\n\n<h4 id=\"安装google-authenticator\"><a href=\"#安装google-authenticator\" class=\"headerlink\" title=\"安装google-authenticator\"></a>安装google-authenticator</h4><ul>\n<li>安装epel源，国内也可以使用阿里的</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y google-authenticator</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置google-authenticator\"><a href=\"#配置google-authenticator\" class=\"headerlink\" title=\"配置google-authenticator\"></a>配置google-authenticator</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &quot;auth required pam_google_authenticator.so&quot; &gt;&gt;/etc/pam.d/sshd</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;ChallengeResponseAuthentication yes&quot; &gt;&gt; /etc/ssh/sshd_config</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用google-authenticator\"><a href=\"#使用google-authenticator\" class=\"headerlink\" title=\"使用google-authenticator\"></a>使用google-authenticator</h4><ul>\n<li><p>会问你几个问题，一路y即可，之后会有个二维码拿手机支持totp的软件扫码即可</p>\n</li>\n<li><p>同时会在当前用户的家目录下生产一个<code>.google_authenticator</code>文件</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">google-authenticator</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置秘钥登录也使用双因数认证\"><a href=\"#配置秘钥登录也使用双因数认证\" class=\"headerlink\" title=\"配置秘钥登录也使用双因数认证\"></a>配置秘钥登录也使用双因数认证</h4><ul>\n<li>默认情况下只有使用密码才会验证双因素</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &quot;AuthenticationMethods publickey,password publickey,keyboard-interactive&quot; &gt;&gt; /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>在&#x2F;etc&#x2F;pam.d&#x2F;sshd中将 <code>auth  substack  password-auth</code>注释掉</p>\n</li>\n<li><p>重启sshd服务</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://blog.csdn.net/m0_37886429/article/details/103609673\">https://blog.csdn.net/m0_37886429/article/details/103609673</a></p>\n","tags":["安全"]},{"title":"tcpdump","url":"/2021/08/10/tcpdump/","content":"<p>tcpdump是linux下的一个网络抓包工具</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>tcpdump非常强大且复杂命令，是我们平常排查网络相关问题的得力助手</p>\n</blockquote>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>一般linux发行版自带基本无需安装</p>\n<h4 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h4><p>抓取有192.168.1.1的包,来源或目的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump host 192.168.1.1</span><br></pre></td></tr></table></figure>\n\n<p>在所有网卡中抓取有192.168.1.1的包,来源或目的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i any host 192.168.1.1 </span><br></pre></td></tr></table></figure>\n\n<p>抓取主机是192.168.1.1 或 192.168.1.2</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i any host 192.168.1.1 or 192.168.1.2</span><br></pre></td></tr></table></figure>\n\n<p>抓取除了192.168.1.1的包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i any host ! 192.168.1.1</span><br></pre></td></tr></table></figure>\n\n<p>抓取所有的流量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -nS</span><br></pre></td></tr></table></figure>\n\n<p>指定端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i any port 22</span><br></pre></td></tr></table></figure>\n\n<p>抓取192.168.1.1到192.168.1.2的80端口</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump  -i any  src host  192.168.1.1 and dst host 192.168.1.2 and dst port 80</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth0 icmp</span><br><span class=\"line\">tcpdump -i eth0 ip</span><br><span class=\"line\">tcpdump -i eth0 tcp</span><br><span class=\"line\">tcpdump -i eth0 udp</span><br><span class=\"line\">tcpdump -i eth0 arp</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"显示参数\"><a href=\"#显示参数\" class=\"headerlink\" title=\"显示参数\"></a>显示参数</h4><ul>\n<li>-n 不解析主机名</li>\n<li>-nn 不解析主机名以及协议</li>\n<li>-v 打印详情</li>\n<li>-e 显示二层信息</li>\n<li>-s 抓取全部数据0为全部，默认96</li>\n<li>-c 抓包次数</li>\n</ul>\n<h4 id=\"http协议\"><a href=\"#http协议\" class=\"headerlink\" title=\"http协议\"></a>http协议</h4><p>所有的get请求</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth0 -s 0 -A &#x27;tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x47455420&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>POST 请求</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i any -s 0 -A &#x27;tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x504F5354&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>抓取80端口的http协议get请求的流量,只需要指定下<code>tcp dst port 80</code>指定下端口号,post同理</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i any -s 0 -A &#x27;tcp dst port 80 and tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x47455420&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>抓取192.168.1.1的80端口中get和post请求的http流量的请求和响应</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i any -s 0 -A &#x27;tcp dst port 80 and tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x47455420 or tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x504F5354 or tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x48545450 or tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x3C21444F and host 192.168.1.1&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>监控所有的get和post的主机和地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i any  -s 0 -v -n -l | egrep -i &quot;POST /|GET /|Host:&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导出文件\"><a href=\"#导出文件\" class=\"headerlink\" title=\"导出文件\"></a>导出文件</h4><p>-w 表示把数据报文输出到文件<br>-r 表示读取数据报文</p>\n<p>抓取所有的包保存到tcpdump.pcap</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i any -s 0 -X -w tcpdump.pcap</span><br></pre></td></tr></table></figure>\n\n<p>读取pcap文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -A -r tcpdump.pcap</span><br></pre></td></tr></table></figure>\n\n<p>保存文件的时候切分文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i any host -G 60 -C 150M -w test_%Y%m%d%H%M.pcap</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/\">https://www.middlewareinventory.com/blog/tcpdump-capture-http-get-post-requests-apache-weblogic-websphere/</a><br><a href=\"https://www.cnblogs.com/bakari/p/10748721.html\">https://www.cnblogs.com/bakari/p/10748721.html</a></p>\n","tags":["网络"]},{"title":"使用buildx编译多平台镜像","url":"/2023/06/16/%E4%BD%BF%E7%94%A8buildx%E7%BC%96%E8%AF%91%E5%A4%9A%E5%B9%B3%E5%8F%B0%E9%95%9C%E5%83%8F/","content":"<p>目前大部分使用docker的场景中不单单只是amd64平台了有时我们需要再arm和adm64上都能运行</p>\n<span id=\"more\"></span>\n\n<p>新版本的docker默认自带</p>\n<h4 id=\"创建buildx\"><a href=\"#创建buildx\" class=\"headerlink\" title=\"创建buildx\"></a>创建buildx</h4><ul>\n<li>查看当前buildx实例</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker buildx ls</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NAME/NODE DRIVER/ENDPOINT STATUS  BUILDKIT PLATFORMS</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default * docker</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  default default         running 23.0.5   linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>默认会有个实例叫default，default实例下有一个default的node，一个实例下可以有多个node,星号是默认使用的实例,node有很多种类型</p>\n</blockquote>\n<ul>\n<li>创建buildx</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker buildx create --name main --node local --driver docker-container --platform linux/amd64,linux/arm64,linux/arm/v8 --use</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">main</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看下</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker buildx ls</span><br><span class=\"line\">NAME/NODE DRIVER/ENDPOINT             STATUS   BUILDKIT PLATFORMS</span><br><span class=\"line\">main *    docker-container</span><br><span class=\"line\">  local   unix:///var/run/docker.sock inactive          linux/amd64*, linux/arm64*, linux/arm/v8*</span><br><span class=\"line\">default   docker</span><br><span class=\"line\">  default default                     running  23.0.5   linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–name</td>\n<td>实例名字</td>\n</tr>\n<tr>\n<td>–drive</td>\n<td>使用的驱动:docker,docker-contran,k8s,remote</td>\n</tr>\n<tr>\n<td>–driver-op</td>\n<td>设置各个驱动的参数，比如docker-contran的镜像，k8s驱动的副本数等</td>\n</tr>\n<tr>\n<td>–platform</td>\n<td>编译的平台</td>\n</tr>\n<tr>\n<td>–user</td>\n<td>默认使用这个实例，等同于docker buildx use</td>\n</tr>\n</tbody></table>\n<ul>\n<li>使用这个实例</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker buildx use main</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当我们执行编译的时候会先下载buildx镜像并运行起来，然后使用这个容器运行的buildx来编译镜像</li>\n</ul>\n<h4 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h4><ul>\n<li>–platform执行要编译的平台，其他的参数和普通的build差不多</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">直接上传到仓库</span></span><br><span class=\"line\">docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t naturelingran/m3u8-downloader -o type=registry .</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>输出本地</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t naturelingran/m3u8-downloader -o type=local,dest=./output .</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tar包</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t naturelingran/m3u8-downloader --output type=tar,dest=./output.tar .</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>直接导入到本地docker中，只支持单平台架构</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker buildx build --platform linux/arm64 -t naturelingran/m3u8-downloader --load . </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://docs.docker.com/engine/reference/commandline/buildx_create\">https://docs.docker.com/engine/reference/commandline/buildx_create</a></p>\n","tags":["docker"]},{"title":"ventoy","url":"/2022/03/16/ventoy/","content":"<p>ventoy是一个国人开发的使用usb安装系统的工具</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>我们一般安装操作系统使用以下三种方式</p>\n</blockquote>\n<ul>\n<li><p>使用软碟通将官方操作系统刻录到u盘里，这种原生无污染且没有第三方插件和广告等，但是比较麻烦换个操作系统就需要重新烧写且win7以下需要手动打补丁</p>\n</li>\n<li><p>而用别人制作pe则是先进入pe系统然后在用pe的工具安装系统，这种这种需要看pe是否干净</p>\n</li>\n<li><p>之前比较流行的ghosts等一件安装的系统则比较简单快捷，但是容易内置第三方应用</p>\n</li>\n</ul>\n<p>而ventoy则可以在将自己写入到u盘中，将操作系统放入执行的文件夹在启动的时可以选择指定的操作系统，不需要烧写。配合winpe则可以完成日常常用操作，更厉害的时候他支持linux</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>在<a href=\"https://www.ventoy.net/cn/download.html\">https://www.ventoy.net/cn/download.html</a>界面下载GitHub的国内比较慢，推荐镜像网站</p>\n<h4 id=\"写到U盘\"><a href=\"#写到U盘\" class=\"headerlink\" title=\"写到U盘\"></a>写到U盘</h4><div class=\"note warning\"><p>安装的时候会格式化磁盘</p>\n</div>\n\n<p><img src=\"/../images/ventoy-1.png\" alt=\"upload successful\"></p>\n<h4 id=\"安装系统\"><a href=\"#安装系统\" class=\"headerlink\" title=\"安装系统\"></a>安装系统</h4><ol>\n<li>将iso文件放到u盘里面</li>\n<li>设置启动方式为u盘启动，就可以看到下面的界面使用使用上下键选择要启动的系统回车键安装，则可以进入系统的安装界面</li>\n</ol>\n<p><img src=\"/../images/ventoy-2.png\" alt=\"upload successful\"></p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.ventoy.net/cn/index.html\">https://www.ventoy.net/cn/index.html</a></p>\n","tags":["重装系统"]},{"title":"syslog","url":"/2020/12/08/syslog/","content":"<p>syslog是linux系统中常见得日志系统配合systemd-Journal使用</p>\n<span id=\"more\"></span>\n<p>rsyslogd是syslog的改进版本，可以将日志通过<code>syslog</code>协议发送到日志服务器</p>\n<h4 id=\"查看log\"><a href=\"#查看log\" class=\"headerlink\" title=\"查看log\"></a>查看log</h4><blockquote>\n<p><code>/var/log/</code>下各个文件,根据配置文件设置使用<code>grep</code>查找 <br>某些路径可以通过配置文件修改</p>\n</blockquote>\n<ul>\n<li>boot.log 系统启动日志</li>\n<li>message 包含整个系统的信息，mail, cron, daemon, kern, auth等相关的日志信息</li>\n<li>dmesg 开机启动内核缓冲日志，可以使用<code>dmesg</code>命令直接查看</li>\n<li>maillog mail.log 邮件服务日志</li>\n<li>yum.log yum安装的日志</li>\n<li>dnf.log centos8中使用dnf来代替yum</li>\n<li>cron crontab定时任务的日志</li>\n<li>btmp 尝试登录失败的信息，也可以使用<code>last -f /var/log/btmp</code></li>\n<li>wtmp 登录信息，使用<code>last -f /var/log/wtmp</code>查看</li>\n<li>lastlog 最近用户登录信息，不是文本文件使用命令<code>lastlog</code>直接查看</li>\n<li>spooler linux 新闻群组方面的日志，内容一般是空的</li>\n<li>sssd 系统守护进程安全日志</li>\n<li>tuned 系统调优工具tuned的日志</li>\n<li>anaconda.log 存储安装相关的信息</li>\n<li>journal systemd-journal日志，使用journalctl查看</li>\n</ul>\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><blockquote>\n<p>syslog的配置目录在<code>/etc/rsyslog.conf</code>和<code>/etc/rsyslog.d/</code>之中，<code>/etc/rsyslog.conf</code>是默认配置的文件<br>下面以<code>centos8</code>为例解释</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#### MODULES ####                                                                                      # 模块设置</span><br><span class=\"line\"></span><br><span class=\"line\">module(load=&quot;imuxsock&quot; # provides support for local system logging (e.g. via logger command)           # 提供对本地命令支持如：logger</span><br><span class=\"line\">       SysSock.Use=&quot;off&quot;) # Turn off message reception via local log socket;                           # 关闭本地套接字接受</span><br><span class=\"line\"># local messages are retrieved through imjournal now.                                                  # 从systemd-journal获取消息</span><br><span class=\"line\">module(load=&quot;imjournal&quot; # provides access to the systemd journal                                       </span><br><span class=\"line\">       StateFile=&quot;imjournal.state&quot;) # File to store the position in the journal                        #</span><br><span class=\"line\">#module(load=&quot;imklog&quot;) # reads kernel messages (the same are read from journald)                       # 读取内核消息，有一些来自journald</span><br><span class=\"line\">#module(load=&quot;immark&quot;) # provides --MARK-- message capability                                          # MARK消息</span><br><span class=\"line\"></span><br><span class=\"line\"># Provides UDP syslog reception                                                                        # 接受udp syslog消息</span><br><span class=\"line\"># for parameters see http://www.rsyslog.com/doc/imudp.html</span><br><span class=\"line\">#module(load=&quot;imudp&quot;) # needs to be done just once                                                     # 只需要做一次</span><br><span class=\"line\">#input(type=&quot;imudp&quot; port=&quot;514&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Provides TCP syslog reception                                                                        # 接受tpc syslog消息</span><br><span class=\"line\"># for parameters see http://www.rsyslog.com/doc/imtcp.html</span><br><span class=\"line\">#module(load=&quot;imtcp&quot;) # needs to be done just once</span><br><span class=\"line\">#input(type=&quot;imtcp&quot; port=&quot;514&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#### GLOBAL DIRECTIVES ####                                                                            # 全局目录设置</span><br><span class=\"line\"></span><br><span class=\"line\"># Where to place auxiliary files                                                                       # 在那放辅助文件</span><br><span class=\"line\">global(workDirectory=&quot;/var/lib/rsyslog&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Use default timestamp format                                                                         # 使用默认的时间戳格式</span><br><span class=\"line\">module(load=&quot;builtin:omfile&quot; Template=&quot;RSYSLOG_TraditionalFileFormat&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Include all config files in /etc/rsyslog.d/                                                          # 导入目录下的所有文件</span><br><span class=\"line\">include(file=&quot;/etc/rsyslog.d/*.conf&quot; mode=&quot;optional&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">#### RULES ####                                                                                        # 规则文件</span><br><span class=\"line\"></span><br><span class=\"line\"># Log all kernel messages to the console.                                                              # 收集内核日志到控制台</span><br><span class=\"line\"># Logging much else clutters up the screen.                                                            # 日志太多会把屏幕弄乱</span><br><span class=\"line\">#kern.*                                                 /dev/console</span><br><span class=\"line\"></span><br><span class=\"line\"># Log anything (except mail) of level info or higher.                                                  # 记录任何除了邮件的日志</span><br><span class=\"line\"># Don&#x27;t log private authentication messages!                                                           # 不要记录认真消息</span><br><span class=\"line\">*.info;mail.none;authpriv.none;cron.none                /var/log/messages</span><br><span class=\"line\"></span><br><span class=\"line\"># The authpriv file has restricted access.                                                             # 认证相关的消息存放的路径</span><br><span class=\"line\">authpriv.*                                              /var/log/secure</span><br><span class=\"line\"></span><br><span class=\"line\"># Log all the mail messages in one place.                                                              # 所有的右键消息存放位置，- 表示异步因为数据库比较多</span><br><span class=\"line\">mail.*                                                  -/var/log/maillog</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># Log cron stuff                                                                                       # 定时任务的日志</span><br><span class=\"line\">cron.*                                                  /var/log/cron</span><br><span class=\"line\"></span><br><span class=\"line\"># Everybody gets emergency messages                                                                    # 记录所有的大于等于emerg级别信息, 以wall方式发送给每个登录到系统的人</span><br><span class=\"line\">*.emerg                                                 :omusrmsg:*</span><br><span class=\"line\"></span><br><span class=\"line\"># Save news errors of level crit and higher in a special file.                                         # 记录uucp,news.crit等存放在/var/log/spooler</span><br><span class=\"line\">uucp,news.crit                                          /var/log/spooler</span><br><span class=\"line\"></span><br><span class=\"line\"># Save boot messages also to boot.log                                                                  # 启动相关的消息</span><br><span class=\"line\">local7.*                                                /var/log/boot.log</span><br><span class=\"line\"></span><br><span class=\"line\"># ### sample forwarding rule ###                                                                       # 转发规则</span><br><span class=\"line\">#action(type=&quot;omfwd&quot;  </span><br><span class=\"line\"># An on-disk queue is created for this action. If the remote host is                                   # 为此操作创建一个磁盘队列。 如果远程主机是down掉，消息被假脱机到磁盘，并在重新启动时发送。</span><br><span class=\"line\"># down, messages are spooled to disk and sent when it is up again.</span><br><span class=\"line\">#queue.filename=&quot;fwdRule1&quot;       # unique name prefix for spool files                                  # 假脱机文件的唯一名称前缀</span><br><span class=\"line\">#queue.maxdiskspace=&quot;1g&quot;         # 1gb space limit (use as much as possible)                           # 最多1gb的空间(尽可能多的使用)</span><br><span class=\"line\">#queue.saveonshutdown=&quot;on&quot;       # save messages to disk on shutdown                                   # 关机是保存消息到磁盘</span><br><span class=\"line\">#queue.type=&quot;LinkedList&quot;         # run asynchronously                                                  # 使用链接列表模式</span><br><span class=\"line\">#action.resumeRetryCount=&quot;-1&quot;    # infinite retries if host is down                                    # 主机关机则无限重试</span><br><span class=\"line\"># Remote Logging (we use TCP for reliable delivery)                                                    # 远程日志，（使用可靠的tcp）</span><br><span class=\"line\"># remote_host is: name/ip, e.g. 192.168.0.1, port optional e.g. 10514                                  # 远程机器是名字/ip</span><br><span class=\"line\">#Target=&quot;remote_host&quot; Port=&quot;XXX&quot; Protocol=&quot;tcp&quot;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常见操作\"><a href=\"#常见操作\" class=\"headerlink\" title=\"常见操作\"></a>常见操作</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看状态</span></span><br><span class=\"line\">systemctl status rsyslog</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启</span></span><br><span class=\"line\">systemctl restart rsyslog</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">停止</span></span><br><span class=\"line\">systemctl stop rsyslog</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.debugger.wiki/article/html/1563278670670182\">https://www.debugger.wiki/article/html/1563278670670182</a><br><a href=\"https://www.cnblogs.com/bonelee/p/9477544.html\">https://www.cnblogs.com/bonelee/p/9477544.html</a></p>\n","tags":["日志"]},{"title":"使用minio-operator部署minio","url":"/2022/12/12/%E4%BD%BF%E7%94%A8minio-operator%E9%83%A8%E7%BD%B2minio/","content":"<p>minio是一个对象存储服务,兼容s3协议</p>\n<span id=\"more\"></span>\n\n<p>使用minio-operator部署minio时可以图形化方便的部署</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ul>\n<li>kubectl安装minio插件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl krew update</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl krew install minio</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装minio-operator到集群</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl minio init </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"部署minio\"><a href=\"#部署minio\" class=\"headerlink\" title=\"部署minio\"></a>部署minio</h4><ul>\n<li>打开minio-operator的ui,该命令会打印出token,填写到</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl minio proxy -n minio-operator</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>浏览器打开localhost:9090即可打开ui，输入上面的token</li>\n</ul>\n<p><img src=\"/../images/minio-1.png\" alt=\"minio\"></p>\n<ul>\n<li>创建minio namespace,具体ns名字可以自己选择</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create namespace minio</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>点击部署界面</li>\n</ul>\n<p><img src=\"/../images/minio-2.png\" alt=\"minio\"></p>\n<ul>\n<li>填写基本配置</li>\n</ul>\n<p><img src=\"/../images/minio-3.png\" alt=\"minio\"></p>\n<ul>\n<li>配置是否使用https,默认使用https，</li>\n</ul>\n<p><img src=\"/../images/minio-4.png\" alt=\"minio\"></p>\n<ul>\n<li>配置是否对外暴露控制台等服务，其实这个就是配置minio的svc的类型，默认是lb的</li>\n</ul>\n<p><img src=\"/../images/minio-5.png\" alt=\"minio\"></p>\n<ul>\n<li><p>剩下的还有一些监控和审计日志的配置默认即可</p>\n</li>\n<li><p>点击创建</p>\n</li>\n</ul>\n<p><img src=\"/../images/minio-6.png\" alt=\"minio\"></p>\n<ul>\n<li>稍等片刻即部署成功</li>\n</ul>\n<p><img src=\"/../images/minio-7.png\" alt=\"minio\"></p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://min.io/docs/minio/kubernetes/upstream/\">https://min.io/docs/minio/kubernetes/upstream/</a></p>\n","tags":["k8s","存储"]},{"title":"使用kubespray部署k8s集群","url":"/2023/05/25/%E4%BD%BF%E7%94%A8kubespray%E9%83%A8%E7%BD%B2k8s%E9%9B%86%E7%BE%A4/","content":"<p><a href=\"https://github.com/kubernetes-sigs/kubespray.git\">kubespray</a>是k8s兴趣小组开发的一个使用ansible的部署脚本,和kubeadm需要再每个节点上操作是去中心化的,这样会很麻烦</p>\n<span id=\"more\"></span>\n\n<p>而kubespray则sh你在kubeadm上是用ansible将部署自动化,kubeadm不关注除了k8s组件之外的东西，然而现实是我们在部署的时候需要安装一些组件以及一些设置比如关闭swap等</p>\n<h4 id=\"部署集群\"><a href=\"#部署集群\" class=\"headerlink\" title=\"部署集群\"></a>部署集群</h4><div class=\"note warning\"><p>默认是在线模式,需要访问外网</p>\n</div>\n\n<ul>\n<li>Python版本等问题很麻烦这里使用docker镜像</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull quay.io/kubespray/kubespray:v2.22.1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动,这里将本地的inventory文件夹和key映射到容器中供kubespray使用</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --rm -it -v $(pwd)/inventory:/inventory -v &quot;$&#123;HOME&#125;&quot;/.ssh/id_rsa:/root/.ssh/id_rsa quay.io/kubespray/kubespray:v2.22.1 bash</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拷贝模本文件到自己的inventory下</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp -rfp inventory/sample /inventory/mycluster</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过脚本自动生成hosts文件,也可以自己写hosts文件,且配置集群</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">declare -a IPS=(10.7.19.47 10.7.170.8 10.7.36.194)</span><br><span class=\"line\">CONFIG_FILE=/inventory/mycluster/hosts.yaml python3 contrib/inventory_builder/inventory.py $&#123;IPS[@]&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>部署集群</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible-playbook -i /inventory/mycluster/hosts.yaml --private-key /root/.ssh/id_rsa cluster.yml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>稍等片可以就部署一个集群</li>\n</ul>\n<h4 id=\"节点伸缩\"><a href=\"#节点伸缩\" class=\"headerlink\" title=\"节点伸缩\"></a>节点伸缩</h4><h5 id=\"添加节点\"><a href=\"#添加节点\" class=\"headerlink\" title=\"添加节点\"></a>添加节点</h5><ul>\n<li>在ansible清单中添加新节点相关信息，然后执行<code>scale.yml</code>指定新的节点名字</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible-playbook -i /inventory/mycluster/hosts.yaml --private-key /root/.ssh/id_rsa scale.yml --limit $new_node</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h5><ul>\n<li>执行<code>remove-node.yml</code>这个ploybook,并且添加-e node变量来指定节点</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible-playbook -i /inventory/mycluster/hosts.yaml --private-key /root/.ssh/id_rsa remove-node.yml -e node=$node </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>节点不在线删除</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible-playbook -i /inventory/mycluster/hosts.yaml --private-key /root/.ssh/id_rsa remove-node.yml -e node=$node -e reset_nodes=false -e allow_ungraceful_removal=true</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>最后在清单中删除已经清理的节点</li>\n</ul>\n<h4 id=\"清理安装\"><a href=\"#清理安装\" class=\"headerlink\" title=\"清理安装\"></a>清理安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ansible-playbook -i /inventory/mycluster/hosts.yaml --private-key /root/.ssh/id_rsa reset.yml --limit $node</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"http://blog.naturelr.cc/\">http://blog.naturelr.cc</a></p>\n","tags":["k8s"]},{"title":"使用netbird异地组网","url":"/2024/01/12/%E4%BD%BF%E7%94%A8netbird%E5%BC%82%E5%9C%B0%E7%BB%84%E7%BD%91/","content":"<p>netbird是一个基于wireguard的异地组网程序,他可以做到所有的设备通过一个虚拟网络通讯</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/../images/netbird-1.png\" alt=\"Alt text\"></p>\n<h4 id=\"自建服务端安装\"><a href=\"#自建服务端安装\" class=\"headerlink\" title=\"自建服务端安装\"></a>自建服务端安装</h4><ul>\n<li><p>防火墙需要放行tcp的80,443;UDP的3478, 49152-65535</p>\n</li>\n<li><p>执行以下脚本安装</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir netbird &amp;&amp; cd netbird</span><br><span class=\"line\">export NETBIRD_DOMAIN=&lt;域名&gt;; curl -fsSL https://github.com/netbirdio/netbird/releases/latest/download/getting-started-with-zitadel.sh | bash</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设置外网IP\"><a href=\"#设置外网IP\" class=\"headerlink\" title=\"设置外网IP\"></a>设置外网IP</h5><ul>\n<li>由于云服务商的eip是基于nat的导致coturn不知道外网ip所以我们需要告诉他,如果不设置会导致移动端连接失败该问题在v0.25.4中修复相关<a href=\"https://github.com/netbirdio/netbird/pull/1439\">PR</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &quot;external-ip=&lt;eip&gt;&quot; &gt;&gt;turnserver.conf</span><br><span class=\"line\"></span><br><span class=\"line\">docker compose up -d --force-recreate coturn</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加客户端\"><a href=\"#添加客户端\" class=\"headerlink\" title=\"添加客户端\"></a>添加客户端</h4><ul>\n<li>在ui中点击add peer有各个系统的对应添加客户端的详细说明</li>\n</ul>\n<h4 id=\"配置路由\"><a href=\"#配置路由\" class=\"headerlink\" title=\"配置路由\"></a>配置路由</h4><ul>\n<li><p>比如家里的网络是192.168.1.0&#x2F;24 部署在家里的netbird客户端名字叫home</p>\n</li>\n<li><p>点击network router-&gt;add route–&gt;Network Range中填写192.168.1.0&#x2F;24,route peer选择home(部署在家中的)–&gt;add roure 完成添加</p>\n</li>\n<li><p>添加完成之后则可以访问家中的设备</p>\n</li>\n</ul>\n<p><img src=\"/../images/netbird-2.png\" alt=\"Alt text\"></p>\n<h4 id=\"配置DNS\"><a href=\"#配置DNS\" class=\"headerlink\" title=\"配置DNS\"></a>配置DNS</h4><ul>\n<li><p>当家里有自己的dns时则可以用家里的dns解析</p>\n</li>\n<li><p>dns–&gt; add nameserver–&gt;选择 add custom nameserver–&gt; name随便你写,Nameservers选择你的dns地址，Match domains则选择那些域名解析到这个dns，Distribution groups选择那些gruop生效</p>\n</li>\n</ul>\n<p><img src=\"/../images/netbird-3.png\" alt=\"Alt text\"></p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://docs.netbird.io/\">https://docs.netbird.io/</a><br><a href=\"https://docs.netbird.io/how-to/getting-started#running-net-bird-with-a-setup-key\">https://docs.netbird.io/how-to/getting-started#running-net-bird-with-a-setup-key</a></p>\n","tags":["网络"]},{"title":"使用skopeo同步docker镜像","url":"/2022/12/19/%E4%BD%BF%E7%94%A8skopeo%E5%90%8C%E6%AD%A5docker%E9%95%9C%E5%83%8F/","content":"<p>在大部分场景下我们内部都会有一个镜像仓库来保证k8s活着cicd在拉镜像下的体验,以往我们需要使用docker pull</p>\n<span id=\"more\"></span>\n\n<p>下载下镜像然后使用docker push上传到内部仓库这个过程很繁琐,skopeo就是为了解决这个问题而诞生</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><blockquote>\n<p>centos7的rpm很老，建议使用容器运行</p>\n</blockquote>\n<ul>\n<li>macos</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install skopeo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看镜像情况\"><a href=\"#查看镜像情况\" class=\"headerlink\" title=\"查看镜像情况\"></a>查看镜像情况</h4><ul>\n<li>查看镜像详情</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">skopeo inspect docker://docker.io/alpine:latest --override-os linux</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">skopeo list-tags docker://docker.io/alpine --override-os linux</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">skopeo login -u &lt;用户名&gt; &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"复制镜像\"><a href=\"#复制镜像\" class=\"headerlink\" title=\"复制镜像\"></a>复制镜像</h4><ul>\n<li>从本地复制到仓库</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">skopeo copy docker-daemon:alpine:latest docker://uhub.service.ucloud.cn/naturelr/test-zxz/alpine:latest</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从一个仓库复制到另一个仓库</li>\n</ul>\n<blockquote>\n<p>–override-os linux 是因为本地是m1的mac而改镜像没有改os的所以要加上这个参数,同时还有–override-arch只不过这个是arch<br>–override-arch amd64 同样是因为我本地m1是arm的但是我们需要amd64的<br>如果仓库不是https的使用–dest-tls-verify&#x3D;false  </p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">skopeo copy docker://docker.io/busybox:latest docker://uhub.service.ucloud.cn/naturelr/test-zxz/busybox:latest --override-os linux --override-arch amd64</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建保存的目录,直接mkdir貌似有问题</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">install -d images</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>普通复制</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">skopeo copy docker://docker.io/busybox:latest dir:images</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>保存oci格式</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">skopeo copy docker://docker.io/busybox:latest oci:images</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"同步镜像\"><a href=\"#同步镜像\" class=\"headerlink\" title=\"同步镜像\"></a>同步镜像</h4><blockquote>\n<p>同步是指将一个镜像所有的tag全部复制到另一个地方</p>\n</blockquote>\n<ul>\n<li>从一个仓库同步到本地目录</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">skopeo sync --src docker --dest dir uhub.service.ucloud.cn/naturelr/busybox:latest images</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从一个仓库同步到另一个仓库</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">skopeo sync --src docker --dest docker docker.io/redis uhub.service.ucloud.cn/naturelr/test-zxz/redis</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>文件同步</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">registry.example.com:</span></span><br><span class=\"line\">    <span class=\"attr\">images:</span></span><br><span class=\"line\">        <span class=\"attr\">busybox:</span> []</span><br><span class=\"line\">        <span class=\"attr\">redis:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;1.0&quot;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;2.0&quot;</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">&quot;sha256:0000000000000000000000000000000011111111111111111111111111111111&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">images-by-tag-regex:</span></span><br><span class=\"line\">        <span class=\"attr\">nginx:</span> <span class=\"string\">^1\\.13\\.[12]-alpine-perl$</span></span><br><span class=\"line\">    <span class=\"attr\">credentials:</span></span><br><span class=\"line\">        <span class=\"attr\">username:</span> <span class=\"string\">john</span></span><br><span class=\"line\">        <span class=\"attr\">password:</span> <span class=\"string\">this</span> <span class=\"string\">is</span> <span class=\"string\">a</span> <span class=\"string\">secret</span></span><br><span class=\"line\">    <span class=\"attr\">tls-verify:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">cert-dir:</span> <span class=\"string\">/home/john/certs</span></span><br><span class=\"line\"><span class=\"attr\">quay.io:</span></span><br><span class=\"line\">    <span class=\"attr\">tls-verify:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">images:</span></span><br><span class=\"line\">        <span class=\"attr\">coreos/etcd:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">latest</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">skopeo sync --src yaml --dest docker sync.yml my-registry.local.lan/repo/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">skopeo delete docker://harbor.fumai.com/library/alpine:latest</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://mp.weixin.qq.com/s/WVE6Iz6AuXH0Hu_ayBfzRw\">https://mp.weixin.qq.com/s/WVE6Iz6AuXH0Hu_ayBfzRw</a></p>\n","tags":["镜像"]},{"title":"使用multus-cni为pod创建多个网卡","url":"/2023/06/16/%E4%BD%BF%E7%94%A8multus-cni%E4%B8%BApod%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AA%E7%BD%91%E5%8D%A1/","content":"<p>k8s的cni一般只创建一个网卡，有些时候我需要多个网卡，<code>multus-cni</code></p>\n<span id=\"more\"></span>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/k8snetworkplumbingwg/multus-cni/master/deployments/multus-daemonset-thick.yml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可能会出现oom,官方默认给的内存太小根据需要可以大点</li>\n</ul>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><ul>\n<li>编写cni配置文件，根据实际情况编写</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF | kubectl create -f -</span><br><span class=\"line\">apiVersion: &quot;k8s.cni.cncf.io/v1&quot;</span><br><span class=\"line\">kind: NetworkAttachmentDefinition</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: macvlan-conf</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  config: &#x27;&#123;</span><br><span class=\"line\">      &quot;cniVersion&quot;: &quot;0.3.0&quot;,</span><br><span class=\"line\">      &quot;type&quot;: &quot;macvlan&quot;,</span><br><span class=\"line\">      &quot;master&quot;: &quot;eth0&quot;,</span><br><span class=\"line\">      &quot;mode&quot;: &quot;bridge&quot;,</span><br><span class=\"line\">      &quot;ipam&quot;: &#123;</span><br><span class=\"line\">        &quot;type&quot;: &quot;host-local&quot;,</span><br><span class=\"line\">        &quot;subnet&quot;: &quot;192.168.58.0/24&quot;,</span><br><span class=\"line\">        &quot;rangeStart&quot;: &quot;192.168.58.100&quot;,</span><br><span class=\"line\">        &quot;rangeEnd&quot;: &quot;192.168.58.200&quot;,</span><br><span class=\"line\">        &quot;routes&quot;: [</span><br><span class=\"line\">          &#123; &quot;dst&quot;: &quot;0.0.0.0/0&quot; &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;gateway&quot;: &quot;192.168.58.1&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;&#x27;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在pod的注解上添加上面创建的cm的名字</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s.v1.cni.cncf.io/networks:</span> <span class=\"string\">macvlan-conf</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>进入pod会发现多一个网卡</p>\n</li>\n<li><p>如果多个则用逗号隔开,类似</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">k8s.v1.cni.cncf.io/networks:</span> <span class=\"string\">macvlan-conf,macvlan-conf</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">k <span class=\"built_in\">exec</span> -it cdebug-79585bd577-ptltw -- ip addr</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    inet 127.0.0.1/8 scope host lo</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">       valid_lft forever preferred_lft forever</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/ipip 0.0.0.0 brd 0.0.0.0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3: ip6tnl0@NONE: &lt;NOARP&gt; mtu 1452 qdisc noop state DOWN group default qlen 1000</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/tunnel6 :: brd :: permaddr bec6:214:eb31::</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5: eth0@if27: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 65515 qdisc noqueue state UP group default</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/ether 9a:8c:bd:86:e4:11 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    inet 10.244.120.104/32 scope global eth0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">       valid_lft forever preferred_lft forever</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">6: net1@if9: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 65535 qdisc noqueue state UP group default  第二个网卡</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/ether 8a:9d:50:21:27:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    inet 192.168.58.103/24 brd 192.168.58.255 scope global net1</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">       valid_lft forever preferred_lft forever</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://github.com/k8snetworkplumbingwg/multus-cni/blob/master/docs/thick-plugin.md\">https://github.com/k8snetworkplumbingwg/multus-cni/blob/master/docs/thick-plugin.md</a></p>\n","tags":["cni","网络"]},{"title":"初试kubevirt","url":"/2022/07/17/%E5%88%9D%E8%AF%95kubevirt/","content":"<p>kubevirt是一个可以在k8s上管理虚拟机的应用</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>可以通过cr的方式创建虚拟机，是k8s具备提供虚拟化服务</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<p>安装资源发布在官方<a href=\"https://github.com/kubevirt/kubevirt/releases\">仓库</a>,这里提供快捷安装方法</p>\n</blockquote>\n<h3 id=\"kubevirt\"><a href=\"#kubevirt\" class=\"headerlink\" title=\"kubevirt\"></a>kubevirt</h3><blockquote>\n<p>更新也是一样的</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 定义版本</span><br><span class=\"line\">export RELEASE=v0.51.0</span><br><span class=\"line\"></span><br><span class=\"line\"># 部署operator</span><br><span class=\"line\">kubectl apply -f https://github.com/kubevirt/kubevirt/releases/download/$RELEASE/kubevirt-operator.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"># 部署kubevirt的cr</span><br><span class=\"line\">kubectl apply -f https://github.com/kubevirt/kubevirt/releases/download/$RELEASE/kubevirt-cr.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看状态</span><br><span class=\"line\">kubectl -n kubevirt wait kv kubevirt --for condition=Available</span><br></pre></td></tr></table></figure>\n\n<p>下面的yaml增加了热迁移特性且调整副本数为1</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class=\"line\">apiVersion: kubevirt.io/v1</span><br><span class=\"line\">kind: KubeVirt</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: kubevirt</span><br><span class=\"line\">  namespace: kubevirt</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  certificateRotateStrategy: &#123;&#125;</span><br><span class=\"line\">  configuration:</span><br><span class=\"line\">    developerConfiguration:</span><br><span class=\"line\">      featureGates: </span><br><span class=\"line\">      - LiveMigration # 热迁移特性</span><br><span class=\"line\">  customizeComponents: &#123;&#125;</span><br><span class=\"line\">  imagePullPolicy: IfNotPresent</span><br><span class=\"line\">  infra:</span><br><span class=\"line\">    replicas: 1 # api副本数调整为1，使用默认的2</span><br><span class=\"line\">  workloadUpdateStrategy: &#123;&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果是在虚拟机中需要打开嵌套虚拟化,如果没法打开就使用软件仿真</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create configmap kubevirt-config -n kubevirt --from-literal debug.useEmulation=true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"kubectl插件\"><a href=\"#kubectl插件\" class=\"headerlink\" title=\"kubectl插件\"></a>kubectl插件</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl krew install virt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"virtctl命令行工具\"><a href=\"#virtctl命令行工具\" class=\"headerlink\" title=\"virtctl命令行工具\"></a>virtctl命令行工具</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export VERSION=$(curl -s https://api.github.com/repos/kubevirt/kubevirt/releases | grep tag_name | grep -v -- &#x27;-rc&#x27; | sort -r | head -1 | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27; | sed &#x27;s/,//&#x27; | xargs)</span><br><span class=\"line\">export ARCH=$(uname -s | tr A-Z a-z)-$(uname -m | sed &#x27;s/x86_64/amd64/&#x27;) || windows-amd64.exe</span><br><span class=\"line\">echo $&#123;ARCH&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">curl -L -o virtctl https://github.com/kubevirt/kubevirt/releases/download/$&#123;VERSION&#125;/virtctl-$&#123;VERSION&#125;-$&#123;ARCH&#125;</span><br><span class=\"line\">chmod +x virtctl</span><br><span class=\"line\">sudo install virtctl /usr/local/bin</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><div class=\"note warning\"><p>卸载有顺序先删除自动以资源,再删除oper，强制删除ns会导致ns处于Terminating状态</p>\n</div>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export RELEASE=v0.54.0</span><br><span class=\"line\">kubectl delete -n kubevirt kubevirt kubevirt --wait=true # --wait=true should anyway be default</span><br><span class=\"line\">kubectl delete apiservices v1alpha3.subresources.kubevirt.io # this needs to be deleted to avoid stuck terminating namespaces</span><br><span class=\"line\">kubectl delete mutatingwebhookconfigurations virt-api-mutator # not blocking but would be left over</span><br><span class=\"line\">kubectl delete validatingwebhookconfigurations virt-api-validator # not blocking but would be left over</span><br><span class=\"line\">kubectl delete -f https://github.com/kubevirt/kubevirt/releases/download/$&#123;RELEASE&#125;/kubevirt-operator.yaml --wait=false</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"管理虚拟机\"><a href=\"#管理虚拟机\" class=\"headerlink\" title=\"管理虚拟机\"></a>管理虚拟机</h3><ul>\n<li>创建虚拟机</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://kubevirt.io/labs/manifests/vm.yaml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看虚拟机状态</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">k get vms                                                  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NAME     AGE   STATUS    READY</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">testvm   7s    Stopped   False</span></span><br><span class=\"line\"></span><br><span class=\"line\">k get vmi</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">NAME     AGE     PHASE     IP            NODENAME         READY</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">testvm   6h16m   Running   10.244.1.44   192.168.32.133   True</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动虚拟机</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">virtctl start testvm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>停止虚拟机</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">virtctl stop testvm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>登录虚拟机</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">virtctl console testvm</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除虚拟机</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl delete vm testvm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cdi\"><a href=\"#cdi\" class=\"headerlink\" title=\"cdi\"></a>cdi</h2><blockquote>\n<p>导入镜像创建虚拟机，使用pvc提供虚拟机磁盘</p>\n</blockquote>\n<p>CDI 支持 qemu 支持的raw和qcow2 ISO 可以使用gz或xz格式压缩图像</p>\n<h3 id=\"安装cdi\"><a href=\"#安装cdi\" class=\"headerlink\" title=\"安装cdi\"></a>安装cdi</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export VERSION=$(curl -s https://github.com/kubevirt/containerized-data-importer/releases/latest | grep -o &quot;v[0-9]\\.[0-9]*\\.[0-9]*&quot;)</span><br><span class=\"line\">kubectl apply -f https://github.com/kubevirt/containerized-data-importer/releases/download/$VERSION/cdi-operator.yaml</span><br><span class=\"line\">kubectl apply -f https://github.com/kubevirt/containerized-data-importer/releases/download/$VERSION/cdi-cr.yaml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建磁盘持久卷-dv\"><a href=\"#创建磁盘持久卷-dv\" class=\"headerlink\" title=\"创建磁盘持久卷(dv)\"></a>创建磁盘持久卷(dv)</h3><p>dv datavolumes缩写，实际上是经过cdi处理之后的放在pvc的.img文件</p>\n<ul>\n<li>pvc自动获取，从连接下载自动解压到指定的pvc中</li>\n<li>手动上传，使用<code>virtctl</code>工具上传到pvc中</li>\n</ul>\n<h4 id=\"pvc自动拉取\"><a href=\"#pvc自动拉取\" class=\"headerlink\" title=\"pvc自动拉取\"></a>pvc自动拉取</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt; pvc_fedora.yml</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: PersistentVolumeClaim</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: &quot;fedora&quot;</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    app: containerized-data-importer</span><br><span class=\"line\">  annotations:</span><br><span class=\"line\">    cdi.kubevirt.io/storage.import.endpoint: &quot;https://download.fedoraproject.org/pub/fedora/linux/releases/33/Cloud/x86_64/images/Fedora-Cloud-Base-33-1.2.x86_64.raw.xz&quot; # 这个国内很慢建议且有时候会404,建议手动下载下来放到本地web服务上</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  accessModes:</span><br><span class=\"line\">  - ReadWriteOnce</span><br><span class=\"line\">  resources:</span><br><span class=\"line\">    requests:</span><br><span class=\"line\">      storage: 5Gi</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f pvc_fedora.yaml</span><br></pre></td></tr></table></figure>\n\n<p>这个时候会有创建导入到pvc的pod</p>\n<h4 id=\"手动上传镜像\"><a href=\"#手动上传镜像\" class=\"headerlink\" title=\"手动上传镜像\"></a>手动上传镜像</h4><div class=\"note warning\"><p>192.168.32.132:31937替换为实际的nodeport地址</p>\n</div>\n\n<h5 id=\"访问cdi-uploadproxy\"><a href=\"#访问cdi-uploadproxy\" class=\"headerlink\" title=\"访问cdi-uploadproxy\"></a>访问cdi-uploadproxy</h5><p>这里使用nodeport</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class=\"line\">apiVersion: v1</span><br><span class=\"line\">kind: Service</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: cdi-uploadproxy-nodeport</span><br><span class=\"line\">  namespace: cdi</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">  - port: 443</span><br><span class=\"line\">    protocol: TCP</span><br><span class=\"line\">    targetPort: 8443</span><br><span class=\"line\">  selector:</span><br><span class=\"line\">    cdi.kubevirt.io: cdi-uploadproxy</span><br><span class=\"line\">  sessionAffinity: None</span><br><span class=\"line\">  type: NodePort</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h5><p>由于证书的问题会导致上传失败，有2种方法来解决证书问题</p>\n<h6 id=\"使用hosts\"><a href=\"#使用hosts\" class=\"headerlink\" title=\"使用hosts\"></a>使用hosts</h6><ul>\n<li>获取信任域名</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo | openssl s_client -showcerts -connect  192.168.32.132:31937 2&gt;/dev/null \\</span><br><span class=\"line\">     | openssl x509 -inform pem -noout -text \\</span><br><span class=\"line\">     | sed -n -e &#x27;/Subject.*CN/p&#x27; -e &#x27;/Subject Alternative/&#123;N;p&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">Subject: CN=cdi-uploadproxy</span><br><span class=\"line\">    X509v3 Subject Alternative Name:</span><br><span class=\"line\">        DNS:cdi-uploadproxy, DNS:cdi-uploadproxy.cdi, DNS:cdi-uploadproxy.cdi.svc</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>Subject</code>就是讲作为认证的域名</p>\n<ul>\n<li>组合成hosts条目</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &quot;192.168.32.132  cdi-uploadproxy&quot; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上传</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">virtctl image-upload dv dv-test</span><br><span class=\"line\">    --size=5Gi \\</span><br><span class=\"line\">    --image-path=./Fedora-Cloud-Base-33-1.2.x86_64.raw.xz \\</span><br><span class=\"line\">    --uploadproxy-url=https://cdi-uploadproxy:31937 \\</span><br><span class=\"line\">    --insecure # 忽略证书错误</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"信任证书\"><a href=\"#信任证书\" class=\"headerlink\" title=\"信任证书\"></a>信任证书</h6><ul>\n<li>导出证书</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get secret -n cdi cdi-uploadproxy-server-cert \\</span><br><span class=\"line\">  -o jsonpath=&quot;&#123;.data[&#x27;tls\\.crt&#x27;]&#125;&quot; \\</span><br><span class=\"line\">  | base64 -d &gt; cdi-uploadproxy-server-cert.crt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装证书</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装证书</span></span><br><span class=\"line\">sudo cp cdi-uploadproxy-server-cert.crt /etc/pki/ca-trust/source/anchors</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">刷新证书</span></span><br><span class=\"line\">sudo update-ca-trust</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上传</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">virtctl image-upload dv dv-test</span><br><span class=\"line\">    --size=5Gi \\</span><br><span class=\"line\">    --image-path=./Fedora-Cloud-Base-33-1.2.x86_64.raw.xz \\</span><br><span class=\"line\">    --uploadproxy-url=https://cdi-uploadproxy:31937 </span><br><span class=\"line\">    #--insecure # 不需要此参数</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置默认上传地址\"><a href=\"#设置默认上传地址\" class=\"headerlink\" title=\"设置默认上传地址\"></a>设置默认上传地址</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl patch cdi cdi \\</span><br><span class=\"line\">  --type merge \\</span><br><span class=\"line\">  --patch &#x27;&#123;&quot;spec&quot;:&#123;&quot;config&quot;:&#123;&quot;uploadProxyURLOverride&quot;:&quot;https://cdi-uploadproxy:31937&quot;&#125;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>上传的时候就不需要带<code>--uploadproxy-url</code>参数了</p>\n<h3 id=\"使用pvc的作为vm系统盘\"><a href=\"#使用pvc的作为vm系统盘\" class=\"headerlink\" title=\"使用pvc的作为vm系统盘\"></a>使用pvc的作为vm系统盘</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt; vm1.yaml</span><br><span class=\"line\">apiVersion: kubevirt.io/v1</span><br><span class=\"line\">kind: VirtualMachine</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  generation: 1</span><br><span class=\"line\">  labels:</span><br><span class=\"line\">    kubevirt.io/os: linux</span><br><span class=\"line\">  name: vm1</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  running: true</span><br><span class=\"line\">  template:</span><br><span class=\"line\">      labels:</span><br><span class=\"line\">        kubevirt.io/domain: vm1</span><br><span class=\"line\">    spec:</span><br><span class=\"line\">      domain:</span><br><span class=\"line\">        cpu:</span><br><span class=\"line\">          cores: 1</span><br><span class=\"line\">        devices:</span><br><span class=\"line\">          disks:</span><br><span class=\"line\">          - disk:</span><br><span class=\"line\">              bus: virtio</span><br><span class=\"line\">            name: disk0</span><br><span class=\"line\">          - cdrom:</span><br><span class=\"line\">              bus: sata</span><br><span class=\"line\">              readonly: true</span><br><span class=\"line\">            name: cloudinitdisk</span><br><span class=\"line\">        machine:</span><br><span class=\"line\">          type: q35</span><br><span class=\"line\">        resources:</span><br><span class=\"line\">          requests:</span><br><span class=\"line\">            memory: 512M</span><br><span class=\"line\">      volumes:</span><br><span class=\"line\">      - name: disk0</span><br><span class=\"line\">        persistentVolumeClaim:</span><br><span class=\"line\">          claimName: fedora</span><br><span class=\"line\">      - cloudInitNoCloud:</span><br><span class=\"line\">          userData: |</span><br><span class=\"line\">            #cloud-config</span><br><span class=\"line\">            hostname: vm1</span><br><span class=\"line\">            ssh_pwauth: True</span><br><span class=\"line\">            disable_root: false</span><br><span class=\"line\">            ssh_authorized_keys:</span><br><span class=\"line\">            - ssh-rsa &lt;公钥&gt; </span><br><span class=\"line\">        name: cloudinitdisk</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f vm1.yaml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>直接创建vmi</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class=\"line\">apiVersion: kubevirt.io/v1alpha3</span><br><span class=\"line\">kind: VirtualMachineInstance</span><br><span class=\"line\">metadata:</span><br><span class=\"line\">  name: dv-test</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  domain:</span><br><span class=\"line\">    devices:</span><br><span class=\"line\">      disks:</span><br><span class=\"line\">      - disk:</span><br><span class=\"line\">          bus: virtio</span><br><span class=\"line\">        name: dvdisk</span><br><span class=\"line\">    machine:</span><br><span class=\"line\">      type: &quot;&quot;</span><br><span class=\"line\">    resources:</span><br><span class=\"line\">      requests:</span><br><span class=\"line\">        memory: 64M</span><br><span class=\"line\">  terminationGracePeriodSeconds: 0</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">  - name: dvdisk</span><br><span class=\"line\">    dataVolume:</span><br><span class=\"line\">      name: dv-test</span><br><span class=\"line\">status: &#123;&#125;</span><br><span class=\"line\">EOF</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用vm</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">kubevirt.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">VirtualMachine</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">kubevirt.io/os:</span> <span class=\"string\">linux</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">dv-test</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">running:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">kubevirt.io/domain:</span> <span class=\"string\">dv-test</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">domain:</span></span><br><span class=\"line\">        <span class=\"attr\">cpu:</span></span><br><span class=\"line\">          <span class=\"attr\">cores:</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"attr\">devices:</span></span><br><span class=\"line\">          <span class=\"attr\">disks:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"attr\">disk:</span></span><br><span class=\"line\">              <span class=\"attr\">bus:</span> <span class=\"string\">virtio</span></span><br><span class=\"line\">            <span class=\"attr\">name:</span> <span class=\"string\">disk0</span></span><br><span class=\"line\">        <span class=\"attr\">machine:</span></span><br><span class=\"line\">          <span class=\"attr\">type:</span> <span class=\"string\">q35</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">512M</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">disk0</span></span><br><span class=\"line\">        <span class=\"attr\">dataVolume:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">dv-test</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://kubevirt.io/user-guide/\">https://kubevirt.io/user-guide/</a></p>\n","tags":["k8s","虚拟化"]},{"title":"使用velero备份k8s集群","url":"/2022/12/12/%E4%BD%BF%E7%94%A8velero%E5%A4%87%E4%BB%BDk8s%E9%9B%86%E7%BE%A4/","content":"<p>velero是k8s的备份还原工具，他不同于etcd的数据库级备份是一个应用级的备份</p>\n<span id=\"more\"></span>\n\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p><img src=\"/../images/velero-1.png\" alt=\"x\"></p>\n<h4 id=\"客户端安装\"><a href=\"#客户端安装\" class=\"headerlink\" title=\"客户端安装\"></a>客户端安装</h4><ul>\n<li>macos</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install velero</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<a href=\"https://github.com/vmware-tanzu/velero/releases\">https://github.com/vmware-tanzu/velero/releases</a>中下载对应系统的二进制文件</li>\n</ul>\n<h4 id=\"服务端安装\"><a href=\"#服务端安装\" class=\"headerlink\" title=\"服务端安装\"></a>服务端安装</h4><p>verero使用可以使用s3协议作为存储后端</p>\n<ul>\n<li>创建s3认证文件</li>\n</ul>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">[default]</span><br><span class=\"line\">aws_access_key_id=&lt;公钥&gt;</span><br><span class=\"line\">aws_secret_access_key=&lt;私钥&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装服务端</li>\n</ul>\n<blockquote>\n<p>plugins的版本根据verero可以选择对应的版本,这里使用了minio作为后端</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">velero install \\</span><br><span class=\"line\">    --provider aws \\</span><br><span class=\"line\">    --plugins velero/velero-plugin-for-aws:v1.6.0 \\</span><br><span class=\"line\">    --bucket velero \\</span><br><span class=\"line\">    --secret-file ./cert \\</span><br><span class=\"line\">    --use-volume-snapshots=false \\</span><br><span class=\"line\">    --use-node-agent \\</span><br><span class=\"line\">    --backup-location-config region=minio,s3ForcePathStyle=&quot;true&quot;,s3Url=http://minio.minio.svc.cluster.local:80</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h4><ul>\n<li>备份指定命名空间,可以多个ns，<code>*</code>为所有的命名空间,默认备份所有命名空间</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-w(–wait)</td>\n<td>可以实时查看备份进度</td>\n</tr>\n<tr>\n<td>–ttl</td>\n<td>备份回收的时间</td>\n</tr>\n<tr>\n<td>-l(–selector)</td>\n<td>使用标签来选择备份资源</td>\n</tr>\n<tr>\n<td>–include-namespaces</td>\n<td>包含的ns</td>\n</tr>\n<tr>\n<td>–exclude-namespaces</td>\n<td>不包含的ns</td>\n</tr>\n<tr>\n<td>–storage-location</td>\n<td>备份的位置</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">velero backup create &lt;备份的名字&gt; --include-namespaces &lt;指定命名空间&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看备份</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">velero backup get</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看备份详情</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">velero backup describe &lt;备份的名字&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看备份日志</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">velero backup logs &lt;备份的名字&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除备份</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">velero backup delete &lt;备份的名字&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"还原\"><a href=\"#还原\" class=\"headerlink\" title=\"还原\"></a>还原</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">velero restore create --from-backup &lt;备份的名字&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看还原</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">velero restore get</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看还原详细信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">velero restore describe &lt;还原的名字&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看还原的日志</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">velero restore logs &lt;还原的名字&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定时备份\"><a href=\"#定时备份\" class=\"headerlink\" title=\"定时备份\"></a>定时备份</h4><p>定时备份和手动备份差不多只不过添加了一个类似cron的参数</p>\n<ul>\n<li>每天备份指定命名空间</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">velero schedule create &lt;备份的名字&gt; --schedule=&quot;@daily&quot; --include-namespaces &lt;指定命名空间&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用cron语法来定时备份</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">velero schedule create &lt;备份的名字&gt; --schedule=&quot;0 1 * * *&quot; --include-namespaces &lt;指定命名空间&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"备份位置\"><a href=\"#备份位置\" class=\"headerlink\" title=\"备份位置\"></a>备份位置</h4><p>velero可也设置备份多个位置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">velero backup-location get</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">velero uninstall</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pvc备份\"><a href=\"#pvc备份\" class=\"headerlink\" title=\"pvc备份\"></a>pvc备份</h4><div class=\"note warning\"><p>hostpath无法备份</p>\n</div>\n\n<ul>\n<li><p>pvc备份需要2个条件一个是安装的时候需要有<code>--use-node-agent</code>参数,将会部署一个ds</p>\n</li>\n<li><p>pod上需要有下面的注释</p>\n</li>\n<li><p>具体是先使用<code>Restic</code>或<code>Kopia</code></p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">backup.velero.io/backup-volumes: &#x27;&lt;卷名字1,卷名字2...&gt;&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"集群迁移\"><a href=\"#集群迁移\" class=\"headerlink\" title=\"集群迁移\"></a>集群迁移</h4><ul>\n<li>使用备份还原迁移集群时2个使用同一个后端存储，最好安装的命令和参数一致</li>\n<li>集群的pvc等也要一致，如a集群备份使用的是<code>nfs</code>,那么b集群也要有nfs这个存储类否则还原会失败</li>\n</ul>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://velero.io/docs/\">https://velero.io/docs/</a></p>\n","tags":["k8s","备份"]},{"title":"在k8s中calico部署和使用","url":"/2023/05/10/%E5%9C%A8k8s%E4%B8%ADcalico%E9%83%A8%E7%BD%B2%E5%92%8C%E4%BD%BF%E7%94%A8/","content":"<p><a href=\"https://github.com/projectcalico/calico\">calico</a>是k8s中常见的网络插件,非常灵活,支持ipip,vxlan隧道bgp路由以及ebpf,虚机k8s均可使用</p>\n<span id=\"more\"></span>\n\n<h4 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h4><p><img src=\"/../images/calico.svg\" alt=\"calico\"></p>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>felix</td>\n<td>状态报告，路由规划，接口管理，acl</td>\n</tr>\n<tr>\n<td>bird</td>\n<td>负责路由宣告，以及路由反射</td>\n</tr>\n<tr>\n<td>confd</td>\n<td>监控bgp变更，配置和更新bird的配置</td>\n</tr>\n<tr>\n<td>储存插件</td>\n<td>存储配置,有etcd和k8s两种选择</td>\n</tr>\n<tr>\n<td>CNI插件</td>\n<td>为pod配置网络</td>\n</tr>\n<tr>\n<td>typha</td>\n<td>为confd和felix和后端存储之间提供缓存等增加性能服务</td>\n</tr>\n<tr>\n<td>calicoctl</td>\n<td>命令行工具</td>\n</tr>\n<tr>\n<td>dikastes</td>\n<td>配合istio</td>\n</tr>\n</tbody></table>\n<h5 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h5><h6 id=\"ippool\"><a href=\"#ippool\" class=\"headerlink\" title=\"ippool\"></a>ippool</h6><ul>\n<li>ip池子,默认calico将会从池子中分配给podip</li>\n</ul>\n<h6 id=\"ipamblocks\"><a href=\"#ipamblocks\" class=\"headerlink\" title=\"ipamblocks\"></a>ipamblocks</h6><ul>\n<li>从ippool里分割出来的ip段，为了减少路由数量，calico宣告路由时是以块为单位在pod所在的节点进行宣告的</li>\n</ul>\n<h4 id=\"部署calico-cni\"><a href=\"#部署calico-cni\" class=\"headerlink\" title=\"部署calico cni\"></a>部署calico cni</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/calico.yaml -O</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装calicoctl\"><a href=\"#安装calicoctl\" class=\"headerlink\" title=\"安装calicoctl\"></a>安装calicoctl</h4><ul>\n<li>calicoctl使用calic的命令行客户端攻击可以用来查看一些信息，有三种安装方法选一种即可</li>\n</ul>\n<h5 id=\"用容器的方式运行calicoctl\"><a href=\"#用容器的方式运行calicoctl\" class=\"headerlink\" title=\"用容器的方式运行calicoctl\"></a>用容器的方式运行calicoctl</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl https://raw.githubusercontent.com/projectcalico/calico/v3.25.1/manifests/calicoctl.yaml -o calicoctl.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f calicoctl.yaml</span><br><span class=\"line\"></span><br><span class=\"line\">echo alias calicoctl=&quot;kubectl exec -i -n kube-system calicoctl -- /calicoctl&quot;</span><br></pre></td></tr></table></figure>\n\n<p>使用方法:<code>calicoctl version</code></p>\n<h5 id=\"二进制文件\"><a href=\"#二进制文件\" class=\"headerlink\" title=\"二进制文件\"></a>二进制文件</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/projectcalico/calico/releases/latest/download/calicoctl-linux-amd64 -o calicoctl</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x calicoctl</span><br><span class=\"line\">mv calicoctl /usr/local/bin/</span><br></pre></td></tr></table></figure>\n\n<p>使用方法:<code>calicoctl version</code></p>\n<h5 id=\"kubectl插件\"><a href=\"#kubectl插件\" class=\"headerlink\" title=\"kubectl插件\"></a>kubectl插件</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -L https://github.com/projectcalico/calico/releases/latest/download/calicoctl-linux-amd64 -o kubectl-calico</span><br><span class=\"line\">chmod +x kubectl-calico</span><br><span class=\"line\">mv kubectl-calico /usr/local/bin/</span><br></pre></td></tr></table></figure>\n\n<p>使用方法: <code>kubectl calico version</code></p>\n<h5 id=\"calicoctl常用命令\"><a href=\"#calicoctl常用命令\" class=\"headerlink\" title=\"calicoctl常用命令\"></a>calicoctl常用命令</h5><ul>\n<li>查看ipam分配情况</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">calicoctl ipam show</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">+----------+---------------+-----------+------------+--------------+</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">| GROUPING |     CIDR      | IPS TOTAL | IPS IN USE |   IPS FREE   |</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">+----------+---------------+-----------+------------+--------------+</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">| IP Pool  | 10.244.0.0/16 |     65536 | 10 (0%)    | 65526 (100%) |</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">+----------+---------------+-----------+------------+--------------+</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看blocks分配情况</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">calicoctl ipam show --show-blocks</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">+----------+-------------------+-----------+------------+--------------+</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">| GROUPING |       CIDR        | IPS TOTAL | IPS IN USE |   IPS FREE   |</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">+----------+-------------------+-----------+------------+--------------+</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">| IP Pool  | 10.244.0.0/16     |     65536 | 10 (0%)    | 65526 (100%) |</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">| Block    | 10.244.120.64/26  |        64 | 5 (8%)     | 59 (92%)     |</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">| Block    | 10.244.205.192/26 |        64 | 5 (8%)     | 59 (92%)     |</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">+----------+-------------------+-----------+------------+--------------+</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看ippool</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">calicoctl get ippool -o wide</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NAME                  CIDR            NAT    IPIPMODE   VXLANMODE   DISABLED   DISABLEBGPEXPORT   SELECTOR</span>   </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default-ipv4-ippool   10.244.0.0/16   <span class=\"literal\">true</span>   Always     Never       <span class=\"literal\">false</span>      <span class=\"literal\">false</span>              all()</span> </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"IPIP模式\"><a href=\"#IPIP模式\" class=\"headerlink\" title=\"IPIP模式\"></a>IPIP模式</h4><p>calico的网络模式<code>默认</code>是IPIP模式</p>\n<ul>\n<li>通过calicoctl查看ippool的<code>IPIPMODE</code>字段，如下</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">calicoctl get ippool -o wide</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NAME                  CIDR               NAT     IPIPMODE   VXLANMODE   DISABLED   DISABLEBGPEXPORT   SELECTOR</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default-ipv4-ippool   10.244.0.0/16      <span class=\"literal\">true</span>    Always      Never       <span class=\"literal\">false</span>      <span class=\"literal\">false</span>              all()</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动ipipmode分为两种，一种是<code>Always</code>，还有一种<code>CrossSubnet</code><ul>\n<li>always，无论是否跨子网都通过ipip来通讯</li>\n<li>CrossSubnet，只有在跨子网时使用ipip模式</li>\n<li>Never,关闭从不使用ipip模式</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"ipip路径分析\"><a href=\"#ipip路径分析\" class=\"headerlink\" title=\"ipip路径分析\"></a>ipip路径分析</h5><ul>\n<li>部署一个nginx</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">k get po -l app=nginx -o wide          </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NAME                     READY   STATUS    RESTARTS   AGE     IP               NODE           NOMINATED NODE   READINESS GATES</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nginx-7fc57c59f7-4nxhh   1/1     Running   0          6m30s   10.244.120.68    minikube       &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nginx-7fc57c59f7-hf2g6   1/1     Running   0          6m43s   10.244.205.195   minikube-m02   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">nginx-7fc57c59f7-rcdtw   1/1     Running   0          6m30s   10.244.205.196   minikube-m02   &lt;none&gt;           &lt;none&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>进入一个nginx的pod去ping另一个容器</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl exec -it nginx-7fc57c59f7-4nxhh -- ping 10.244.205.195</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ipip-pod到pod所在的node\"><a href=\"#ipip-pod到pod所在的node\" class=\"headerlink\" title=\"ipip-pod到pod所在的node\"></a>ipip-pod到pod所在的node</h6><ul>\n<li>查看容器的网卡和路由信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl exec -it nginx-7fc57c59f7-4nxhh -- sh -c &quot;ip addr;ip r&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    inet 127.0.0.1/8 scope host lo</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">       valid_lft forever preferred_lft forever</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2: tunl0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN qlen 1000</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/ipip 0.0.0.0 brd 0.0.0.0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3: ip6tnl0@NONE: &lt;NOARP&gt; mtu 1452 qdisc noop state DOWN qlen 1000</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/tunnel6 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00 brd 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5: eth0@if10: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 65515 qdisc noqueue state UP</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/ether fe:bb:51:af:03:a8 brd ff:ff:ff:ff:ff:ff</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    inet 10.244.120.68/32 scope global eth0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">       valid_lft forever preferred_lft forever</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default via 169.254.1.1 dev eth0</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">169.254.1.1 dev eth0 scope <span class=\"built_in\">link</span></span> </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>从上面的信息比较难以理解的是路由的网关是169.254.1.1，169.254.0.0&#x2F;16为保留地址一般用于dhcp获取，而calico则将容器的默认路由设置为此,当容器发现目标地址不是本ip段时，会将流量发送给网关，这时需要知道网关的mac地址<br>这里calico将网关设置为169.254.1.1而没有任何一个网卡是169.254.1.1,其实是因为开了arp_proxy代答,具体使用了pod的veth的外面的网卡,这样流量就通过二层到达主机<br>官方的<a href=\"https://docs.tigera.io/calico/latest/reference/faq#why-cant-i-see-the-16925411-address-mentioned-above-on-my-host\">FAQ</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i cali1143a22bb0c host 10.244.120.68 -ennnvv</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">...</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">09:21:15.764922 fe:bb:51:af:03:a8 &gt; ee:ee:ee:ee:ee:ee, ethertype ARP (0x0806), length 42: Ethernet (len 6), IPv4 (len 4), Request who-has 169.254.1.1 tell 10.244.120.68, length 28</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">09:21:15.764944 ee:ee:ee:ee:ee:ee &gt; fe:bb:51:af:03:a8, ethertype ARP (0x0806), length 42: Ethernet (len 6), IPv4 (len 4), Reply 169.254.1.1 is-at ee:ee:ee:ee:ee:ee, length 28</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\">cat /proc/sys/net/ipv4/conf/cali1143a22bb0c/proxy_arp</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>veth抓包</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"> tcpdump -i cali1143a22bb0c  host 10.244.120.68 -ennnvv</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">tcpdump: listening on cali1143a22bb0c, link-type EN10MB (Ethernet), capture size 262144 bytes</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">09:39:53.417261 fe:bb:51:af:03:a8 &gt; ee:ee:ee:ee:ee:ee, ethertype IPv4 (0x0800), length 98: (tos 0x0, ttl 64, <span class=\"built_in\">id</span> 37455, offset 0, flags [DF], proto ICMP (1), length 84)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    10.244.120.68 &gt; 10.244.205.195: ICMP <span class=\"built_in\">echo</span> request, <span class=\"built_in\">id</span> 15617, <span class=\"built_in\">seq</span> 12, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">09:39:53.417585 ee:ee:ee:ee:ee:ee &gt; fe:bb:51:af:03:a8, ethertype IPv4 (0x0800), length 98: (tos 0x0, ttl 62, <span class=\"built_in\">id</span> 24660, offset 0, flags [none], proto ICMP (1), length 84)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    10.244.205.195 &gt; 10.244.120.68: ICMP <span class=\"built_in\">echo</span> reply, <span class=\"built_in\">id</span> 15617, <span class=\"built_in\">seq</span> 12, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">09:39:54.417872 fe:bb:51:af:03:a8 &gt; ee:ee:ee:ee:ee:ee, ethertype IPv4 (0x0800), length 98: (tos 0x0, ttl 64, <span class=\"built_in\">id</span> 38148, offset 0, flags [DF], proto ICMP (1), length 84)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    10.244.120.68 &gt; 10.244.205.195: ICMP <span class=\"built_in\">echo</span> request, <span class=\"built_in\">id</span> 15617, <span class=\"built_in\">seq</span> 13, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">09:39:54.418089 ee:ee:ee:ee:ee:ee &gt; fe:bb:51:af:03:a8, ethertype IPv4 (0x0800), length 98: (tos 0x0, ttl 62, <span class=\"built_in\">id</span> 24786, offset 0, flags [none], proto ICMP (1), length 84)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    10.244.205.195 &gt; 10.244.120.68: ICMP <span class=\"built_in\">echo</span> reply, <span class=\"built_in\">id</span> 15617, <span class=\"built_in\">seq</span> 13, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">...</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"ipip-pod所在的node到目标所在的node的pod\"><a href=\"#ipip-pod所在的node到目标所在的node的pod\" class=\"headerlink\" title=\"ipip-pod所在的node到目标所在的node的pod\"></a>ipip-pod所在的node到目标所在的node的pod</h6><ul>\n<li>查看minikube上的路由</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip r</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default via 192.168.49.1 dev eth0</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">blackhole 10.244.120.64/26 proto bird</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.120.65 dev califc4f8273134 scope <span class=\"built_in\">link</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.120.66 dev cali54e305c20b5 scope <span class=\"built_in\">link</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.120.67 dev cali00c313c8253 scope <span class=\"built_in\">link</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.120.68 dev cali1143a22bb0c scope <span class=\"built_in\">link</span>  <span class=\"comment\"># 这个就是我们进行ping的pod的路由</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.205.192/26 via 192.168.49.3 dev tunl0 proto bird onlink  <span class=\"comment\"># 这个是minikube-m02这个节点上的路由，如果要访问minikube-m02上的pod则经过本路由</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">172.17.0.0/16 dev docker0 proto kernel scope <span class=\"built_in\">link</span> src 172.17.0.1 linkdown</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">192.168.49.0/24 dev eth0 proto kernel scope <span class=\"built_in\">link</span> src 192.168.49.2</span> </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>隧道抓包</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i tunl0 host 10.244.120.68 -ennnvv</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">tcpdump: listening on tunl0, link-type RAW (Raw IP), capture size 262144 bytes</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">09:40:55.459832 ip: (tos 0x0, ttl 63, <span class=\"built_in\">id</span> 114, offset 0, flags [DF], proto ICMP (1), length 84) 10.244.120.68 &gt; 10.244.205.195: ICMP <span class=\"built_in\">echo</span> request, <span class=\"built_in\">id</span> 15617, <span class=\"built_in\">seq</span> 74, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">09:40:55.460009 ip: (tos 0x0, ttl 63, <span class=\"built_in\">id</span> 58352, offset 0, flags [none], proto ICMP (1), length 84) 10.244.205.195 &gt; 10.244.120.68: ICMP <span class=\"built_in\">echo</span> reply, <span class=\"built_in\">id</span> 15617, <span class=\"built_in\">seq</span> 74, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">09:40:56.460530 ip: (tos 0x0, ttl 63, <span class=\"built_in\">id</span> 495, offset 0, flags [DF], proto ICMP (1), length 84) 10.244.120.68 &gt; 10.244.205.195: ICMP <span class=\"built_in\">echo</span> request, <span class=\"built_in\">id</span> 15617, <span class=\"built_in\">seq</span> 75, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">09:40:56.460780 ip: (tos 0x0, ttl 63, <span class=\"built_in\">id</span> 59235, offset 0, flags [none], proto ICMP (1), length 84) 10.244.205.195 &gt; 10.244.120.68: ICMP <span class=\"built_in\">echo</span> reply, <span class=\"built_in\">id</span> 15617, <span class=\"built_in\">seq</span> 75, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">09:40:57.461367 ip: (tos 0x0, ttl 63, <span class=\"built_in\">id</span> 979, offset 0, flags [DF], proto ICMP (1), length 84) 10.244.120.68 &gt; 10.244.205.195: ICMP <span class=\"built_in\">echo</span> request, <span class=\"built_in\">id</span> 15617, <span class=\"built_in\">seq</span> 76, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">09:40:57.461510 ip: (tos 0x0, ttl 63, <span class=\"built_in\">id</span> 59858, offset 0, flags [none], proto ICMP (1), length 84) 10.244.205.195 &gt; 10.244.120.68: ICMP <span class=\"built_in\">echo</span> reply, <span class=\"built_in\">id</span> 15617, <span class=\"built_in\">seq</span> 76, length 64</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>到此pod的流量通过ipip封装发送到目标pod所在的node上,目标node将ipip包解封包，然后查找路由表发送到目标pod的veth网卡中</p>\n</li>\n<li><p>登录另一个node</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">minikube ssh --node=&quot;minikube-m02&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Last login: Tue May 16 10:37:54 2023 from 192.168.49.1</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker@minikube-m02:~$</span> </span><br><span class=\"line\">sudo su</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过ip找到对应的网卡</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip r |grep 10.244.205.195</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.205.195 dev cali614e1c7b24e scope <span class=\"built_in\">link</span></span> </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>抓包对应的网卡</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i cali614e1c7b24e </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">tcpdump: verbose output suppressed, use -v or -vv <span class=\"keyword\">for</span> full protocol decode</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">listening on cali614e1c7b24e, link-type EN10MB (Ethernet), capture size 262144 bytes</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10:50:48.678597 IP 10.244.120.68 &gt; 10.244.205.195: ICMP <span class=\"built_in\">echo</span> request, <span class=\"built_in\">id</span> 21761, <span class=\"built_in\">seq</span> 88, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10:50:48.678615 IP 10.244.205.195 &gt; 10.244.120.68: ICMP <span class=\"built_in\">echo</span> reply, <span class=\"built_in\">id</span> 21761, <span class=\"built_in\">seq</span> 88, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10:50:49.678987 IP 10.244.120.68 &gt; 10.244.205.195: ICMP <span class=\"built_in\">echo</span> request, <span class=\"built_in\">id</span> 21761, <span class=\"built_in\">seq</span> 89, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10:50:49.679010 IP 10.244.205.195 &gt; 10.244.120.68: ICMP <span class=\"built_in\">echo</span> reply, <span class=\"built_in\">id</span> 21761, <span class=\"built_in\">seq</span> 89, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10:50:50.680533 IP 10.244.120.68 &gt; 10.244.205.195: ICMP <span class=\"built_in\">echo</span> request, <span class=\"built_in\">id</span> 21761, <span class=\"built_in\">seq</span> 90, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10:50:50.680595 IP 10.244.205.195 &gt; 10.244.120.68: ICMP <span class=\"built_in\">echo</span> reply, <span class=\"built_in\">id</span> 21761, <span class=\"built_in\">seq</span> 90, length 64</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>抓包ipip隧道网卡</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i tunl0 </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">tcpdump: verbose output suppressed, use -v or -vv <span class=\"keyword\">for</span> full protocol decode</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">listening on tunl0, link-type RAW (Raw IP), capture size 262144 bytes</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10:51:06.694392 IP 10.244.120.68 &gt; 10.244.205.195: ICMP <span class=\"built_in\">echo</span> request, <span class=\"built_in\">id</span> 21761, <span class=\"built_in\">seq</span> 106, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10:51:06.694504 IP 10.244.205.195 &gt; 10.244.120.68: ICMP <span class=\"built_in\">echo</span> reply, <span class=\"built_in\">id</span> 21761, <span class=\"built_in\">seq</span> 106, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10:51:07.695538 IP 10.244.120.68 &gt; 10.244.205.195: ICMP <span class=\"built_in\">echo</span> request, <span class=\"built_in\">id</span> 21761, <span class=\"built_in\">seq</span> 107, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">...</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过以上抓包可以确定流量的路径</li>\n</ul>\n<h6 id=\"2个pod在同一个node上\"><a href=\"#2个pod在同一个node上\" class=\"headerlink\" title=\"2个pod在同一个node上\"></a>2个pod在同一个node上</h6><ul>\n<li><p>当目标pod和源pod在同一个node上执行通过node上的路由到对应的veth网卡,不经过隧道</p>\n</li>\n<li><p>这次ping一个在相同node上的pod的ip</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get po whoami-7c88bd4c6f-7tc5b -o wide                   </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NAME                      READY   STATUS    RESTARTS   AGE     IP              NODE       NOMINATED NODE   READINESS GATES</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">whoami-7c88bd4c6f-7tc5b   1/1     Running   0          3h18m   10.244.120.67   minikube   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl exec -it nginx-7fc57c59f7-4nxhh -- ping 10.244.120.67</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">PING 10.244.120.67 (10.244.120.67): 56 data bytes</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">PING 10.244.120.67 (10.244.120.67): 56 data bytes</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">64 bytes from 10.244.120.67: <span class=\"built_in\">seq</span>=0 ttl=63 time=1.777 ms</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">64 bytes from 10.244.120.67: <span class=\"built_in\">seq</span>=1 ttl=63 time=0.542 ms</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">64 bytes from 10.244.120.67: <span class=\"built_in\">seq</span>=2 ttl=63 time=0.132 ms</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">...</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>直接抓包隧道发现没有流量</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">minikube ssh </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Last login: Tue May 16 10:41:40 2023 from 192.168.49.1</span></span><br><span class=\"line\">sudo su</span><br><span class=\"line\">tcpdump -i tunl0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">tcpdump: verbose output suppressed, use -v or -vv <span class=\"keyword\">for</span> full protocol decode</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">listening on tunl0, link-type RAW (Raw IP), capture size 262144 bytes</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过路由表找到对应的网卡</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip r |grep 10.244.120.67</span><br><span class=\"line\">10.244.120.67 dev cali00c313c8253 scope link </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>抓包目标的网卡</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i cali00c313c8253</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">tcpdump: verbose output suppressed, use -v or -vv <span class=\"keyword\">for</span> full protocol decode</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">listening on cali00c313c8253, link-type EN10MB (Ethernet), capture size 262144 bytes</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10:47:39.884507 IP 10.244.120.68 &gt; 10.244.120.67: ICMP <span class=\"built_in\">echo</span> request, <span class=\"built_in\">id</span> 19969, <span class=\"built_in\">seq</span> 141, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10:47:39.884649 IP 10.244.120.67 &gt; 10.244.120.68: ICMP <span class=\"built_in\">echo</span> reply, <span class=\"built_in\">id</span> 19969, <span class=\"built_in\">seq</span> 141, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10:47:40.885829 IP 10.244.120.68 &gt; 10.244.120.67: ICMP <span class=\"built_in\">echo</span> request, <span class=\"built_in\">id</span> 19969, <span class=\"built_in\">seq</span> 142, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">...</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过以上抓包可以发现并没有经过隧道，而是直接路由到了目标的网卡</li>\n</ul>\n<h6 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h6><p><img src=\"/../images/calico-ipip-1.png\" alt=\"calico-ipip\"></p>\n<h4 id=\"VXLAN模式\"><a href=\"#VXLAN模式\" class=\"headerlink\" title=\"VXLAN模式\"></a>VXLAN模式</h4><h5 id=\"开启vxlan模式\"><a href=\"#开启vxlan模式\" class=\"headerlink\" title=\"开启vxlan模式\"></a>开启vxlan模式</h5><ul>\n<li><p>修改ippool中<code>VXLANMODE</code>字段为<code>Always</code>,<code>IPIPMODE</code>改为<code>Never</code>,其中<code>VXLANMODE</code>中的也有<code>CrossSubnet</code>只在跨子网时使用</p>\n</li>\n<li><p>修改calico-node的环境变量</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改环境变量</span></span><br><span class=\"line\">kubectl -n kube-system set env ds/calico-node -c calico-node CALICO_IPV4POOL_IPIP=Never</span><br><span class=\"line\">kubectl -n kube-system set env ds/calico-node -c calico-node CALICO_IPV4POOL_VXLAN=Always</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭关闭bird</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将calico_backend修改为vxlan</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">calico_backend: vxlan</span></span><br><span class=\"line\">kubectl edit cm -nkube-system calico-config</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭bird的健康检查</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl -n kube-system edit ds calico-node</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">  <span class=\"attr\">exec:</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">/bin/calico-node</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">-felix-live</span></span><br><span class=\"line\">   <span class=\"comment\"># - -bird-live</span></span><br><span class=\"line\"><span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">  <span class=\"attr\">exec:</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">/bin/calico-node</span></span><br><span class=\"line\">    <span class=\"comment\"># - -bird-ready</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">-felix-ready</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"vxlan路径分析\"><a href=\"#vxlan路径分析\" class=\"headerlink\" title=\"vxlan路径分析\"></a>vxlan路径分析</h5><ul>\n<li><p>依然使用之前的nginx来做测试</p>\n</li>\n<li><p>节点路由</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip r</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default via 192.168.49.1 dev eth0</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.0.192/26 via 10.244.0.192 dev vxlan.calico onlink</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">blackhole 10.244.120.64/26 proto 80</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.120.65 dev califc4f8273134 scope <span class=\"built_in\">link</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.120.66 dev cali54e305c20b5 scope <span class=\"built_in\">link</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.120.68 dev cali1143a22bb0c scope <span class=\"built_in\">link</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.205.192/26 via 10.244.0.192 dev vxlan.calico onlink  之前是ipip的tunl0网卡变更为vxlan的网卡</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">172.17.0.0/16 dev docker0 proto kernel scope <span class=\"built_in\">link</span> src 172.17.0.1 linkdown</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">192.168.49.0/24 dev eth0 proto kernel scope <span class=\"built_in\">link</span> src 192.168.49.2</span> </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看vxlan.calico网卡信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip -s  addr show vxlan.calico</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">863: vxlan.calico: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 65485 qdisc noqueue state UNKNOWN group default</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">   <span class=\"built_in\">link</span>/ether 66:66:b0:7b:5c:e1 brd ff:ff:ff:ff:ff:ff</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">   inet 10.244.120.70/32 scope global vxlan.calico</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">      valid_lft forever preferred_lft forever</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">   RX: bytes  packets  errors  dropped overrun mcast</span>   </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">   23094      267      0       0       0       0</span>       </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">   TX: bytes  packets  errors  dropped carrier collsns</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">   22374      268      0       0       0       0</span>       </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>搜下这个ip发现他作用为vxlan的网卡ip</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">calicoctl ipam show --ip=10.244.120.70</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">IP 10.244.120.70 is <span class=\"keyword\">in</span> use</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Attributes:</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> node: minikube</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"> <span class=\"built_in\">type</span>: vxlanTunnelAddress</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"vxlan-pod到node\"><a href=\"#vxlan-pod到node\" class=\"headerlink\" title=\"vxlan-pod到node\"></a>vxlan-pod到node</h6><ul>\n<li>从上面的网卡和路由信息可以看到calico只是修改了到其他节点pod的通讯方式，从ipip隧道改为vlxan隧道然后修改路由</li>\n<li>所以后pod到node的方式其实没有变化和<a href=\"#ipip-pod%E5%88%B0pod%E6%89%80%E5%9C%A8%E7%9A%84node\">ipip</a>模式是一样的</li>\n</ul>\n<h6 id=\"vxlan-pod到另一个node的pod\"><a href=\"#vxlan-pod到另一个node的pod\" class=\"headerlink\" title=\"vxlan-pod到另一个node的pod\"></a>vxlan-pod到另一个node的pod</h6><ul>\n<li><p>依然开始长ping</p>\n</li>\n<li><p>抓包vxlan网卡</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcpdump -i vxlan.calico -eenn</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">tcpdump: verbose output suppressed, use -v or -vv <span class=\"keyword\">for</span> full protocol decode</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">listening on vxlan.calico, link-type EN10MB (Ethernet), capture size 262144 bytes</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">09:22:33.108257 66:66:b0:7b:5c:e1 &gt; 66:9f:82:63:75:c1, ethertype IPv4 (0x0800), length 98: 10.244.120.68 &gt; 10.244.205.196: ICMP <span class=\"built_in\">echo</span> request, <span class=\"built_in\">id</span> 30721, <span class=\"built_in\">seq</span> 33, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">09:22:33.108388 66:9f:82:63:75:c1 &gt; 66:66:b0:7b:5c:e1, ethertype IPv4 (0x0800), length 98: 10.244.205.196 &gt; 10.244.120.68: ICMP <span class=\"built_in\">echo</span> reply, <span class=\"built_in\">id</span> 30721, <span class=\"built_in\">seq</span> 33, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">09:22:34.109579 66:66:b0:7b:5c:e1 &gt; 66:9f:82:63:75:c1, ethertype IPv4 (0x0800), length 98: 10.244.120.68 &gt; 10.244.205.196: ICMP <span class=\"built_in\">echo</span> request, <span class=\"built_in\">id</span> 30721, <span class=\"built_in\">seq</span> 34, length 64</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">...</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以看到到vxlan网卡有我们长ping的数据包，可以确定不同node上的pod是通过vxlan来通讯</li>\n<li><code>66:66:b0:7b:5c:e1</code>为源头pod所在node的vxlan网卡mac</li>\n<li><code>66:9f:82:63:75:c1</code>为目标pod所在node的vxlan网卡mac</li>\n</ul>\n<h5 id=\"vxlan-小结\"><a href=\"#vxlan-小结\" class=\"headerlink\" title=\"vxlan-小结\"></a>vxlan-小结</h5><ul>\n<li>vxlan模式下知识变换了从一个node到另一个node的方式，从之前的ipip变为vxlan</li>\n<li>pod到node没有变化</li>\n</ul>\n<p><img src=\"/../images/calico-vxlan-1.png\" alt=\"calico-ipip\"></p>\n<h4 id=\"BGP模式-full-mesh\"><a href=\"#BGP模式-full-mesh\" class=\"headerlink\" title=\"BGP模式(full mesh)\"></a>BGP模式(full mesh)</h4><blockquote>\n<p>BGP是一个使用广泛的路由协议，分为2种一种是不同as号的ebgp已经同as号的ibgp，这里使用的是ibgp</p>\n</blockquote>\n<div class=\"note warning\"><p>注意此模式节点只能在同一个子网中进行，如果节点不在同一个子网请参与<a href=\"#%E8%B7%A8\"></a></p>\n</div>\n\n<h5 id=\"开启BGP模式\"><a href=\"#开启BGP模式\" class=\"headerlink\" title=\"开启BGP模式\"></a>开启BGP模式</h5><blockquote>\n<p>开启bgp模式基本思路就是将<code>ipip</code>和<code>vxlan</code>模式都给关闭了</p>\n</blockquote>\n<ul>\n<li><p>修改ippool中<code>VXLANMODE</code>字段为<code>Never</code>,<code>IPIPMODE</code>改为<code>Never</code></p>\n</li>\n<li><p>修改calico-node的环境变量</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改环境变量</span></span><br><span class=\"line\">kubectl -n kube-system set env ds/calico-node -c calico-node CALICO_IPV4POOL_IPIP=Never</span><br><span class=\"line\">kubectl -n kube-system set env ds/calico-node -c calico-node CALICO_IPV4POOL_VXLAN=Never</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果关闭bird需要开启bird</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将calico_backend修改为bird</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">calico_backend: bird</span></span><br><span class=\"line\">kubectl edit cm -nkube-system calico-config</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果关闭了bird的健康检查则需要开启bird的健康检查</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl -n kube-system edit ds calico-node</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">livenessProbe:</span></span><br><span class=\"line\">  <span class=\"attr\">exec:</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">/bin/calico-node</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">-felix-live</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">-bird-live</span> <span class=\"comment\"># 打开</span></span><br><span class=\"line\"><span class=\"attr\">readinessProbe:</span></span><br><span class=\"line\">  <span class=\"attr\">exec:</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">/bin/calico-node</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">-felix-ready</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">-bird-ready</span> <span class=\"comment\"># 打开</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"BGP模式路径分析\"><a href=\"#BGP模式路径分析\" class=\"headerlink\" title=\"BGP模式路径分析\"></a>BGP模式路径分析</h5><ul>\n<li>查看路由,可以发现跨节点通讯使用路由</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip r </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default via 192.168.49.1 dev eth0</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.0.192/26 via 192.168.49.3 dev eth0 proto bird</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">blackhole 10.244.120.64/26 proto bird</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.120.65 dev califc4f8273134 scope <span class=\"built_in\">link</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.120.66 dev cali54e305c20b5 scope <span class=\"built_in\">link</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.120.68 dev cali1143a22bb0c scope <span class=\"built_in\">link</span></span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.205.192/26 via 192.168.49.3 dev eth0 proto bird <span class=\"comment\"># 这里已经变成了bird了</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">172.17.0.0/16 dev docker0 proto kernel scope <span class=\"built_in\">link</span> src 172.17.0.1 linkdown</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">192.168.49.0/24 dev eth0 proto kernel scope <span class=\"built_in\">link</span> src 192.168.49.2</span> </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看网卡,可以发现没有vxlan的网卡</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip addr</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    inet 127.0.0.1/8 scope host lo</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">       valid_lft forever preferred_lft forever</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2: tunl0@NONE: &lt;NOARP,UP,LOWER_UP&gt; mtu 65515 qdisc noqueue state UNKNOWN group default qlen 1000</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/ipip 0.0.0.0 brd 0.0.0.0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3: ip6tnl0@NONE: &lt;NOARP&gt; mtu 1452 qdisc noop state DOWN group default qlen 1000</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/tunnel6 :: brd ::</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/ether 02:42:7a:58:36:29 brd ff:ff:ff:ff:ff:ff</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">       valid_lft forever preferred_lft forever</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5: califc4f8273134@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid 1</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">6: cali54e305c20b5@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid 2</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10: cali1143a22bb0c@if5: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 65515 qdisc noqueue state UP group default</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff link-netnsid 4</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">16: eth0@if17: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 65535 qdisc noqueue state UP group default</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/ether 02:42:c0:a8:31:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    inet 192.168.49.2/24 brd 192.168.49.255 scope global eth0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">       valid_lft forever preferred_lft forever</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过birdcl查看路由表</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl -n kube-system exec -it calico-node-9pwnj -c calico-node -- /bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">birdcl</span><br><span class=\"line\">show route</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">bird&gt; show route</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">0.0.0.0/0          via 192.168.49.1 on eth0 [kernel1 07:27:41] * (10)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.205.192/26  via 192.168.49.3 on eth0 [Mesh_192_168_49_3 07:27:41] * (100/0) [i]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">192.168.49.0/24    dev eth0 [direct1 07:27:40] * (240)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.120.64/26   blackhole [static1 07:27:40] * (200)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.120.65/32   dev califc4f8273134 [kernel1 07:27:41] * (10)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.120.66/32   dev cali54e305c20b5 [kernel1 07:27:41] * (10)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.120.68/32   dev cali1143a22bb0c [kernel1 07:27:41] * (10)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.0.192/26    via 192.168.49.3 on eth0 [Mesh_192_168_49_3 07:27:41] * (100/0) [i]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">172.17.0.0/16      dev docker0 [direct1 07:27:40] * (240)</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">bird&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过birdcl查bgp邻居状态</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">birdcl show protocols</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">root@minikube /]<span class=\"comment\"># birdcl  show protocols</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">BIRD v0.3.3+birdv1.6.8 ready.</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">name     proto    table    state  since       info</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">static1  Static   master   up     07:27:40</span>    </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">kernel1  Kernel   master   up     07:27:40</span>    </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">device1  Device   master   up     07:27:40</span>    </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">direct1  Direct   master   up     07:27:40</span>    </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Mesh_192_168_49_3 BGP      master   up     07:27:53    Established  bgp邻居状态</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看bgp详细信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">birdcl show protocols all Mesh_192_168_49_2</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">root@minikube-m02 /]<span class=\"comment\"># birdcl show protocols all Mesh_192_168_49_2</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">BIRD v0.3.3+birdv1.6.8 ready.</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">name     proto    table    state  since       info</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Mesh_192_168_49_2 BGP      master   up     07:27:53    Established</span>   </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  Description:    Connection to BGP peer</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  Preference:     100</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  Input filter:   ACCEPT</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  Output filter:  calico_export_to_bgp_peers</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  Routes:         1 imported, 2 exported, 1 preferred</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  Route change stats:     received   rejected   filtered    ignored   accepted</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    Import updates:              4          0          0          0          4</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    Import withdraws:            3          0        ---          0          3</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    Export updates:             17          4          8        ---          5</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    Export withdraws:            8        ---        ---        ---          3</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">  BGP state:          Established</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    Neighbor address: 192.168.49.2</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    Neighbor AS:      64512</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    Neighbor ID:      192.168.49.2</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    Neighbor caps:    refresh enhanced-refresh restart-able llgr-aware AS4 add-path-rx add-path-tx</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    Session:          internal multihop AS4 add-path-rx add-path-tx</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    Source address:   192.168.49.3</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    Hold timer:       157/240</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    Keepalive timer:  67/80</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>总体而言比较简单，直接通过路由到目标pod对应的节点</li>\n</ul>\n<h5 id=\"bgp小结\"><a href=\"#bgp小结\" class=\"headerlink\" title=\"bgp小结\"></a>bgp小结</h5><ul>\n<li>每个节点之间通过bgp宣告路由</li>\n</ul>\n<p><img src=\"/../images/calico-bgp-1.png\" alt=\"calico-bgp\"></p>\n<p><img src=\"/../images/calico-bgp-2.png\" alt=\"calico-bgp\"></p>\n<h4 id=\"BGP-RR模式-Route-reflectors\"><a href=\"#BGP-RR模式-Route-reflectors\" class=\"headerlink\" title=\"BGP-RR模式(Route reflectors)\"></a>BGP-RR模式(Route reflectors)</h4><p><img src=\"/../images/calico-bgp-4.png\" alt=\"calico-bgp\"></p>\n<ul>\n<li>从节点中选取一部分节点作为bgp路由反射器以减少bgp对等体数量</li>\n</ul>\n<h5 id=\"路由反射部署方案\"><a href=\"#路由反射部署方案\" class=\"headerlink\" title=\"路由反射部署方案\"></a>路由反射部署方案</h5><blockquote>\n<p>测试环境为4个节点的minikube集群</p>\n</blockquote>\n<ul>\n<li><p>部署路由反射器有很多方法:</p>\n<ul>\n<li><ol>\n<li>在集群外的机器中部署bird</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>在k8s中选择专门的节点</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>部署专门的calico-node容器作为反射器</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>很显然直接在集群中部署专门的节点作为反射器比较方便且容易管理</p>\n</li>\n<li><p>选择2个节点作为反射器，这里我选择后2个</p>\n</li>\n</ul>\n<h5 id=\"确认现在的为bgp的mesh模式\"><a href=\"#确认现在的为bgp的mesh模式\" class=\"headerlink\" title=\"确认现在的为bgp的mesh模式\"></a>确认现在的为bgp的mesh模式</h5><div class=\"note warning\"><p>需要注意<code>calicoctl node status</code>这个需要再部署calico的节点上执行。。。。有点唐突</p>\n</div>\n\n<ul>\n<li>查看当前bgp邻居,可以发现已经与另外三个节点建立了邻居关系</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">calicoctl node status</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">root@minikube:~<span class=\"comment\"># calicoctl node status</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Calico process is running.</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"comment\"># IPv4 BGP status</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">+--------------+-------------------+-------+----------+-------------+</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">| PEER ADDRESS |     PEER TYPE     | STATE |  SINCE   |    INFO     |</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">+--------------+-------------------+-------+----------+-------------+</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">| 192.168.49.3 | node-to-node mesh | up    | 18:13:08 | Established |</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">| 192.168.49.4 | node-to-node mesh | up    | 19:37:12 | Established |</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">| 192.168.49.5 | node-to-node mesh | up    | 02:27:27 | Established |</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">+--------------+-------------------+-------+----------+-------------+</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">calicoctl get nodes -o wide </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NAME           ASN       IPV4              IPV6</span>   </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">minikube       (64512)   192.168.49.2/24</span>          </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">minikube-m02   (64512)   192.168.49.3/24</span>          </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">minikube-m03   (64512)   192.168.49.4/24   <span class=\"comment\"># 作为反射器</span></span>       </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">minikube-m04   (64512)   192.168.49.5/24   <span class=\"comment\"># 作为反射器</span></span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"指定节点作为反射器\"><a href=\"#指定节点作为反射器\" class=\"headerlink\" title=\"指定节点作为反射器\"></a>指定节点作为反射器</h5><ul>\n<li>导出<code>calico/node</code>资源</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">calicoctl get nodes minikube-m03 -o yaml &gt; minikube-m03.yaml</span><br><span class=\"line\">calicoctl get nodes minikube-m04 -o yaml &gt; minikube-m04.yaml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在导出的文件中添加下面的字段</li>\n</ul>\n<blockquote>\n<p>routeReflectorClusterID应该是为了防止路由环路</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">  <span class=\"attr\">bgp:</span></span><br><span class=\"line\">    <span class=\"attr\">ipv4Address:</span> <span class=\"number\">192.168</span><span class=\"number\">.49</span><span class=\"number\">.4</span><span class=\"string\">/24</span></span><br><span class=\"line\">    <span class=\"attr\">routeReflectorClusterID:</span> <span class=\"number\">1.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>应用修改</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">calicoctl replace -f minikube-m03.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Successfully replaced 1 <span class=\"string\">&#x27;Node&#x27;</span> resource(s)</span></span><br><span class=\"line\">calicoctl replace -f minikube-m04.yaml</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Successfully replaced 1 <span class=\"string\">&#x27;Node&#x27;</span> resource(s)</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在指定的节点打上标签</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl label node minikube-m04 minikube-m03 route-reflector=true</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置bgp对等体\"><a href=\"#配置bgp对等体\" class=\"headerlink\" title=\"配置bgp对等体\"></a>配置bgp对等体</h5><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">BGPPeer</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">crd.projectcalico.org/v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">node-rr</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">nodeSelector:</span> <span class=\"string\">all()</span></span><br><span class=\"line\">  <span class=\"attr\">peerSelector:</span> <span class=\"string\">route-reflector</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;true&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改bgp配置，关闭mesh模式</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">projectcalico.org/v3</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">BGPConfiguration</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">logSeverityScreen:</span> <span class=\"string\">Info</span></span><br><span class=\"line\">  <span class=\"attr\">nodeToNodeMeshEnabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">asNumber:</span> <span class=\"number\">63400</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查看节点bgp状态\"><a href=\"#查看节点bgp状态\" class=\"headerlink\" title=\"查看节点bgp状态\"></a>查看节点bgp状态</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">rr模式的节点上</span></span><br><span class=\"line\">root@minikube-m03:~# calicoctl node status</span><br><span class=\"line\">Calico process is running.</span><br><span class=\"line\"></span><br><span class=\"line\">IPv4 BGP status</span><br><span class=\"line\">+--------------+---------------+-------+----------+-------------+</span><br><span class=\"line\">| PEER ADDRESS |   PEER TYPE   | STATE |  SINCE   |    INFO     |</span><br><span class=\"line\">+--------------+---------------+-------+----------+-------------+</span><br><span class=\"line\">| 192.168.49.2 | node specific | up    | 03:17:41 | Established |</span><br><span class=\"line\">| 192.168.49.3 | node specific | up    | 03:17:41 | Established |</span><br><span class=\"line\">| 192.168.49.5 | node specific | up    | 03:17:41 | Established |</span><br><span class=\"line\">+--------------+---------------+-------+----------+-------------+</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">普通节点</span></span><br><span class=\"line\">root@minikube:~# calicoctl node status </span><br><span class=\"line\">Calico process is running.</span><br><span class=\"line\"></span><br><span class=\"line\">IPv4 BGP status</span><br><span class=\"line\">+--------------+---------------+-------+----------+-------------+</span><br><span class=\"line\">| PEER ADDRESS |   PEER TYPE   | STATE |  SINCE   |    INFO     |</span><br><span class=\"line\">+--------------+---------------+-------+----------+-------------+</span><br><span class=\"line\">| 192.168.49.4 | node specific | up    | 03:17:41 | Established |</span><br><span class=\"line\">| 192.168.49.5 | node specific | up    | 03:17:43 | Established |</span><br><span class=\"line\">+--------------+---------------+-------+----------+-------------+</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"BGP-TOR路由\"><a href=\"#BGP-TOR路由\" class=\"headerlink\" title=\"BGP-TOR路由\"></a>BGP-TOR路由</h4><p><code>Top of Rack</code>机架上面的交换机</p>\n<p><img src=\"/../images/calico-bgp-5.png\" alt=\"calico-bgp\"></p>\n<ul>\n<li>这个方案中所有的节点将bgp信息宣告给tor交换机由交换机负责bgp宣告</li>\n<li>需要硬件交换机和路由器中整体部署bgp网络，然后宣告给这个网络</li>\n</ul>\n<h4 id=\"IPIP-VXLAN跨子网模式\"><a href=\"#IPIP-VXLAN跨子网模式\" class=\"headerlink\" title=\"IPIP&#x2F;VXLAN跨子网模式\"></a>IPIP&#x2F;VXLAN跨子网模式</h4><ul>\n<li>当跨子网时使用<code>ipip/vxlan</code>来进行通讯</li>\n<li>将ippool中的<code>IPIPMODE</code>或<code>VXLANMODE</code>修改为<code>CrossSubnet</code>即可</li>\n</ul>\n<h5 id=\"环境说明\"><a href=\"#环境说明\" class=\"headerlink\" title=\"环境说明\"></a>环境说明</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl get no</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">[root@10-72-164-144 ~]<span class=\"comment\"># kubectl get no</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NAME            STATUS   ROLES           AGE   VERSION</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10-72-137-177   Ready    control-plane   14d   v1.27.1</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10-72-164-144   Ready    control-plane   14d   v1.27.1</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10-72-164-145   Ready    control-plane   14d   v1.27.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">kubectl get po -o wide</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">[root@10-72-164-144 ~]<span class=\"comment\"># kubectl get po -o wide</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NAME             READY   STATUS    RESTARTS   AGE   IP              NODE            NOMINATED NODE   READINESS GATES</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">net-test-5g2hg   1/1     Running   0          14d   10.244.90.196   10-72-164-145   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">net-test-5j2kw   1/1     Running   0          14d   10.244.77.194   10-72-164-144   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">net-test-dzhhs   1/1     Running   0          14d   10.244.90.132   10-72-137-177   &lt;none&gt;           &lt;none&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>10.72.137.177</code>为一个子网，<code>10.72.164.144,10.72.164.145</code>为同一个子网</li>\n</ul>\n<h5 id=\"IPIP\"><a href=\"#IPIP\" class=\"headerlink\" title=\"IPIP\"></a>IPIP</h5><ul>\n<li>修改ipip为<code>CrossSubnet</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">关闭vxlan如果开启了</span></span><br><span class=\"line\">calicoctl patch ippool default-ipv4-ippool  -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;vxlanMode&quot;: &quot;Never&quot;&#125;&#125;&#x27;</span><br><span class=\"line\">calicoctl patch ippool default-ipv4-ippool  -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;ipipMode&quot;: &quot;CrossSubnet&quot;&#125;&#125;&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">确认修改</span></span><br><span class=\"line\">calicoctl get ippool default-ipv4-ippool -o wide</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">[root@10-72-164-144 ~]<span class=\"comment\"># calicoctl get ippool default-ipv4-ippool -o wide</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NAME                  CIDR            NAT    IPIPMODE      VXLANMODE   DISABLED   DISABLEBGPEXPORT   SELECTOR</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default-ipv4-ippool   10.244.0.0/16   <span class=\"literal\">true</span>   CrossSubnet   Never       <span class=\"literal\">false</span>      <span class=\"literal\">false</span>              all()</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看路由</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip r</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">[root@10-72-164-144 ~]<span class=\"comment\"># ip r</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default via 10.72.164.1 dev eth0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.72.164.0/24 dev eth0 proto kernel scope <span class=\"built_in\">link</span> src 10.72.164.144</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">blackhole 10.244.77.192/26 proto bird</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.77.194 dev cali97faa6acd6c scope <span class=\"built_in\">link</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.77.195 dev cali8192f92cc2f scope <span class=\"built_in\">link</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.90.128/26 via 10.72.137.177 dev tunl0 proto bird onlink 跨子网使用了tunlo这个网卡</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.90.192/26 via 10.72.164.145 dev eth0 proto bird</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>确认是ipip网卡</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip addr show  tunl0</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">[root@10-72-164-144 ~]<span class=\"comment\"># ip addr show  tunl0</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">9: tunl0@NONE: &lt;NOARP,UP,LOWER_UP&gt; mtu 1480 qdisc noqueue state UNKNOWN qlen 1000</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/ipip 0.0.0.0 brd 0.0.0.0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    inet 10.244.77.199/32 scope global tunl0</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/calico-ipip-2.png\" alt=\"calico-ipip\"></p>\n<ul>\n<li>通过路由可以看到ipip在CrossSubnet下同子网直接通过bgp(bird)获取的路由发送出去,跨子网则使用了ipip隧道</li>\n</ul>\n<h5 id=\"VXLAN\"><a href=\"#VXLAN\" class=\"headerlink\" title=\"VXLAN\"></a>VXLAN</h5><ul>\n<li>修改VXLANMODE为CrossSubnet</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">calicoctl patch ippool default-ipv4-ippool  -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;ipipMode&quot;: &quot;Never&quot;&#125;&#125;&#x27;</span><br><span class=\"line\">calicoctl patch ippool default-ipv4-ippool  -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;vxlanMode&quot;: &quot;CrossSubnet&quot;&#125;&#125;&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">确认下</span></span><br><span class=\"line\">calicoctl get ippool default-ipv4-ippool -o wide</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">[root@10-72-164-144 ~]<span class=\"comment\"># calicoctl get ippool default-ipv4-ippool -o wide</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NAME                  CIDR            NAT    IPIPMODE   VXLANMODE     DISABLED   DISABLEBGPEXPORT   SELECTOR</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default-ipv4-ippool   10.244.0.0/16   <span class=\"literal\">true</span>   Never      CrossSubnet   <span class=\"literal\">false</span>      <span class=\"literal\">false</span>              all()</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看路由</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip r</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">[root@10-72-164-144 ~]<span class=\"comment\"># ip r</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default via 10.72.164.1 dev eth0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.72.164.0/24 dev eth0 proto kernel scope <span class=\"built_in\">link</span> src 10.72.164.144</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.0.192/26 via 10.72.164.145 dev eth0 proto 80 onlink</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">blackhole 10.244.77.192/26 proto 80</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.77.194 dev cali97faa6acd6c scope <span class=\"built_in\">link</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.77.195 dev cali8192f92cc2f scope <span class=\"built_in\">link</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.90.128/26 via 10.244.90.135 dev vxlan.calico onlink 跨子网使用了vxlan</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.90.192/26 via 10.72.164.145 dev eth0 proto 80 onlink 同子网其他节点</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看vxlan网卡</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ip addr show vxlan.calico</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">[root@10-72-164-144 ~]<span class=\"comment\"># ip addr show vxlan.calico</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">43: vxlan.calico: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UNKNOWN</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    <span class=\"built_in\">link</span>/ether 66:80:c0:e8:b1:d7 brd ff:ff:ff:ff:ff:ff</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    inet 10.244.77.200/32 scope global vxlan.calico</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">       valid_lft forever preferred_lft forever</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">    inet6 fe80::6480:c0ff:fee8:b1d7/64 scope <span class=\"built_in\">link</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">       valid_lft forever preferred_lft forever</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/calico-vxlan-2.png\" alt=\"calico-vxlan\"></p>\n<ul>\n<li>结论通过路由可以看到vxlan在CrossSubnet下同子网直接通过eth0发送出去,跨子网则使用了vxlan</li>\n</ul>\n<h5 id=\"跨子网bgp-full-mesh模式下路由\"><a href=\"#跨子网bgp-full-mesh模式下路由\" class=\"headerlink\" title=\"跨子网bgp full mesh模式下路由\"></a>跨子网bgp full mesh模式下路由</h5><ul>\n<li>查看路由</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">[root@10-72-164-144 ~]<span class=\"comment\"># calicoctl get ippool default-ipv4-ippool -o wide</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NAME                  CIDR            NAT    IPIPMODE   VXLANMODE   DISABLED   DISABLEBGPEXPORT   SELECTOR</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default-ipv4-ippool   10.244.0.0/16   <span class=\"literal\">true</span>   Never      Never       <span class=\"literal\">false</span>      <span class=\"literal\">false</span>              all()</span></span><br><span class=\"line\"></span><br><span class=\"line\">ip r</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">[root@10-72-164-144 ~]<span class=\"comment\"># ip r</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">default via 10.72.164.1 dev eth0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.72.164.0/24 dev eth0 proto kernel scope <span class=\"built_in\">link</span> src 10.72.164.144</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">blackhole 10.244.77.192/26 proto bird</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.77.194 dev cali97faa6acd6c scope <span class=\"built_in\">link</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.77.195 dev cali8192f92cc2f scope <span class=\"built_in\">link</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.90.128/26 via 10.72.164.1 dev eth0 proto bird</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">10.244.90.192/26 via 10.72.164.145 dev eth0 proto bird</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以看到在跨子网时,路由指向了当前节点的网关，但我们的网关却不知道10.244.90.128&#x2F;26路由到哪里，所以10.244.90.128&#x2F;26的地址不通</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">k get po -o wide</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">[root@10-72-164-144 ~]<span class=\"comment\"># k get po -o wide</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NAME             READY   STATUS    RESTARTS   AGE   IP              NODE            NOMINATED NODE   READINESS GATES</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">net-test-5g2hg   1/1     Running   0          14d   10.244.90.196   10-72-164-145   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">net-test-5j2kw   1/1     Running   0          14d   10.244.77.194   10-72-164-144   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">net-test-dzhhs   1/1     Running   0          14d   10.244.90.132   10-72-137-177   &lt;none&gt;           &lt;none&gt;</span></span><br><span class=\"line\">k exec -it net-test-5g2hg -- ping 10.244.90.132</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">[root@10-72-164-144 ~]<span class=\"comment\"># k exec -it net-test-5g2hg -- ping 10.244.90.132</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">PING 10.244.90.132 (10.244.90.132): 56 data bytes</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>符合预期</li>\n</ul>\n<h5 id=\"将ipip和vxlan全部设置为CrossSubnet\"><a href=\"#将ipip和vxlan全部设置为CrossSubnet\" class=\"headerlink\" title=\"将ipip和vxlan全部设置为CrossSubnet\"></a>将ipip和vxlan全部设置为CrossSubnet</h5><ul>\n<li>不行</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@10-72-164-144 ~]# calicoctl patch ippool default-ipv4-ippool  -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;vxlanMode&quot;: &quot;CrossSubnet&quot;&#125;&#125;&#x27;</span><br><span class=\"line\">Successfully patched 1 &#x27;IPPool&#x27; resource</span><br><span class=\"line\">[root@10-72-164-144 ~]# calicoctl patch ippool default-ipv4-ippool  -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;ipipMode&quot;: &quot;CrossSubnet&quot;&#125;&#125;&#x27;</span><br><span class=\"line\">Hit error: updating existing resource: error with field IPPool.Spec.VXLANMode = &#x27;CrossSubnet&#x27; (Cannot enable both VXLAN and IPIP on the same IPPool)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"EBPF\"><a href=\"#EBPF\" class=\"headerlink\" title=\"EBPF\"></a>EBPF</h4><blockquote>\n<p>epbf是一个内核虚拟机</p>\n</blockquote>\n<h5 id=\"EBPF部署\"><a href=\"#EBPF部署\" class=\"headerlink\" title=\"EBPF部署\"></a>EBPF部署</h5><h6 id=\"环境验证\"><a href=\"#环境验证\" class=\"headerlink\" title=\"环境验证\"></a>环境验证</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">uname -rv</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker@minikube:~$ <span class=\"built_in\">uname</span> -rv</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">5.15.49-linuxkit <span class=\"comment\">#1 SMP PREEMPT Tue Sep 13 07:51:32 UTC 2022</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ebpf对内核版本要求比较高，内核版本最高5.0往上，红帽4.8往上也行</li>\n</ul>\n<h6 id=\"修改api-server地址\"><a href=\"#修改api-server地址\" class=\"headerlink\" title=\"修改api-server地址\"></a>修改api-server地址</h6><ul>\n<li>calico默认使用的是kube-proxy提供的api-server的svc地址需要改为api-server负载均衡的地址</li>\n<li>可以通过<code>kubelet</code>的配置文件来查看，</li>\n<li>创建配置文件</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kubernetes-services-endpoint</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">KUBERNETES_SERVICE_HOST:</span> <span class=\"string\">&quot;192.168.49.2&quot;</span> <span class=\"comment\"># &lt;API server host&gt;</span></span><br><span class=\"line\">  <span class=\"attr\">KUBERNETES_SERVICE_PORT:</span> <span class=\"string\">&quot;8443&quot;</span>         <span class=\"comment\"># &lt;API server port&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启calico组件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl -n kube-system rollout restart deployment calico-kube-controllers</span><br><span class=\"line\">kubectl -n kube-system rollout restart ds calico-node</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"开启ebpf\"><a href=\"#开启ebpf\" class=\"headerlink\" title=\"开启ebpf\"></a>开启ebpf</h6><ul>\n<li>配置kube-proxy</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl patch ds -n kube-system kube-proxy -p &#x27;&#123;&quot;spec&quot;:&#123;&quot;template&quot;:&#123;&quot;spec&quot;:&#123;&quot;nodeSelector&quot;:&#123;&quot;non-calico&quot;: &quot;true&quot;&#125;&#125;&#125;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>开启ebpf</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">calicoctl patch felixconfiguration default --patch=&#x27;&#123;&quot;spec&quot;: &#123;&quot;bpfEnabled&quot;: true&#125;&#125;&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Successfully patched 1 <span class=\"string\">&#x27;FelixConfiguration&#x27;</span> resource</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"开启dsr\"><a href=\"#开启dsr\" class=\"headerlink\" title=\"开启dsr\"></a>开启dsr</h6><blockquote>\n<p>dsr可以保留客户端ip</p>\n</blockquote>\n<ul>\n<li><p>主要是修改<code>BPFExternalServiceMode</code>这个变量</p>\n</li>\n<li><p>开启dsr</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">calicoctl patch felixconfiguration default --patch=&#x27;&#123;&quot;spec&quot;: &#123;&quot;bpfExternalServiceMode&quot;: &quot;DSR&quot;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>回滚</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">calicoctl patch felixconfiguration default --patch=&#x27;&#123;&quot;spec&quot;: &#123;&quot;bpfExternalServiceMode&quot;: &quot;Tunnel&quot;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"IP地址管理\"><a href=\"#IP地址管理\" class=\"headerlink\" title=\"IP地址管理\"></a>IP地址管理</h4><h5 id=\"静态ip\"><a href=\"#静态ip\" class=\"headerlink\" title=\"静态ip\"></a>静态ip</h5><ul>\n<li><p>一般来说pod不需要pod的ip是静态的，而是已通过service来访问，但是在安全等领域可能需要pod的ip是静态或者一小段范围</p>\n</li>\n<li><p>使用ipam里面的ip</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">annotations:</span></span><br><span class=\"line\">  <span class=\"attr\">&#x27;cni.projectcalico.org/ipAddrs&#x27;:</span> <span class=\"string\">&#x27;[&quot;192.168.0.1&quot;]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"不使用ipam里面的ip\"><a href=\"#不使用ipam里面的ip\" class=\"headerlink\" title=\"不使用ipam里面的ip\"></a>不使用ipam里面的ip</h6><blockquote>\n<p>此功能需要cni开启特性才行</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl -n kube-system edit cm calico-config</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;any_name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;cniVersion&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;calico&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ipam&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;calico-ipam&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;feature_control&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;ip_addrs_no_ipam&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后重启calico的agent</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl -n kube-system rollout restart ds calico-node</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在pod上添加下面的注释</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">annotations:</span></span><br><span class=\"line\">  <span class=\"attr\">&#x27;cni.projectcalico.org/ipAddrsNoIpam&#x27;:</span> <span class=\"string\">&#x27;[&quot;10.0.0.1&quot;]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>此时pod的ip则会设置为<code>10.0.0.1</code>,但是这个ip只能在你在pod所在的node上ping通过，路由等需要自己手动处理</li>\n</ul>\n<h5 id=\"Floating-IP-浮动ip\"><a href=\"#Floating-IP-浮动ip\" class=\"headerlink\" title=\"Floating IP(浮动ip)\"></a>Floating IP(浮动ip)</h5><blockquote>\n<p>Floating IP（浮动IP）是一种IP地址分配技术，它能够将一个IP地址从一台主机转移到另一台主机。 浮动IP通常用于云计算环境中，因为在这种环境下，虚拟资源（如虚拟机）可能随时在不同的物理主机之间移动。</p>\n</blockquote>\n<div class=\"note warning\"><p>只能在BGP模式下使用</p>\n</div>\n\n<ul>\n<li>也需要打开特性和上面noipam的类似方法不做赘述</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;any_name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;cniVersion&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;calico&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ipam&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;calico-ipam&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;feature_control&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;floating_ips&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">annotations:</span></span><br><span class=\"line\">  <span class=\"attr\">&#x27;cni.projectcalico.org/floatingIPs&#x27;:</span> <span class=\"string\">&#x27;[&quot;10.0.0.1&quot;]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"IP预留\"><a href=\"#IP预留\" class=\"headerlink\" title=\"IP预留\"></a>IP预留</h5><ul>\n<li>顾名思义保留的ip不会分配给pod</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">crd.projectcalico.org/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">IPReservation</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-ipreservation-1</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">reservedCIDRs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">192.168</span><span class=\"number\">.2</span><span class=\"number\">.3</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">10.0</span><span class=\"number\">.2</span><span class=\"number\">.3</span><span class=\"string\">/32</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cafe:f00d::/123</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h5><p>pod的注释&gt;pod所在的ns的注释&gt;ippool</p>\n<h4 id=\"带宽限制\"><a href=\"#带宽限制\" class=\"headerlink\" title=\"带宽限制\"></a>带宽限制</h4><ul>\n<li>cni配置文件需要设置如下参数</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;bandwidth&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;capabilities&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;bandwidth&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在pod上配置带宽</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">annotations:</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/ingress-bandwidth:</span> <span class=\"string\">1M</span> <span class=\"comment\"># 进入</span></span><br><span class=\"line\">    <span class=\"attr\">kubernetes.io/egress-bandwidth:</span> <span class=\"string\">1M</span>  <span class=\"comment\"># 出口</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>实际是调用了<code>bandwidth</code>这个cni插件</li>\n</ul>\n<h4 id=\"指定MAC地址\"><a href=\"#指定MAC地址\" class=\"headerlink\" title=\"指定MAC地址\"></a>指定MAC地址</h4><figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">annotations:</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;cni.projectcalico.org/hwAddr&quot;:</span> <span class=\"string\">&quot;1c:0c:0a:c0:ff:ee&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启pod生效</li>\n</ul>\n<h4 id=\"开启ipv6支持\"><a href=\"#开启ipv6支持\" class=\"headerlink\" title=\"开启ipv6支持\"></a>开启ipv6支持</h4><blockquote>\n<p>ipv6需要k8s同步开启双栈</p>\n</blockquote>\n<h5 id=\"修改cni配置文件\"><a href=\"#修改cni配置文件\" class=\"headerlink\" title=\"修改cni配置文件\"></a>修改cni配置文件</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl -n kube-system edit cm calico-config</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;ipam&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;calico-ipam&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;assign_ipv4&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;true&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;assign_ipv6&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"修改DS环境变量\"><a href=\"#修改DS环境变量\" class=\"headerlink\" title=\"修改DS环境变量\"></a>修改DS环境变量</h5><table>\n<thead>\n<tr>\n<th>环境变量</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IP6</td>\n<td>autodetect</td>\n</tr>\n<tr>\n<td>FELIX_IPV6SUPPORT</td>\n<td>true</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">修改环境变量</span></span><br><span class=\"line\">kubectl -n kube-system set env ds/calico-node -c calico-node IP6=autodetect</span><br><span class=\"line\">kubectl -n kube-system set env ds/calico-node -c calico-node FELIX_IPV6SUPPORT=true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://docs.tigera.io/calico/latest/about\">https://docs.tigera.io/calico/latest/about</a></p>\n","tags":["cni","网络","k8s"]},{"title":"将时间机器备份到smb上","url":"/2022/06/03/%E5%B0%86%E6%97%B6%E9%97%B4%E6%9C%BA%E5%99%A8%E5%A4%87%E4%BB%BD%E5%88%B0smb%E4%B8%8A/","content":"<p>macos的时间机器备份很方便</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>如果只是备份到优盘或者固态硬盘等设备上有的时候不够灵活，通过网络直接备份到smb文件服务器上</p>\n</blockquote>\n<h4 id=\"创建smb共享文件夹\"><a href=\"#创建smb共享文件夹\" class=\"headerlink\" title=\"创建smb共享文件夹\"></a>创建smb共享文件夹</h4><p>需要给读写权限</p>\n<h4 id=\"创建磁盘映像文件\"><a href=\"#创建磁盘映像文件\" class=\"headerlink\" title=\"创建磁盘映像文件\"></a>创建磁盘映像文件</h4><p>打开磁盘工具文件–&gt;创建空白映像</p>\n<p>这里注意<code>格式大小和容量</code></p>\n<p><img src=\"/../images/pasted-25.png\" alt=\"图\"></p>\n<p>将创建好的文件拷贝到共享文件夹里</p>\n<h4 id=\"挂载时间机器\"><a href=\"#挂载时间机器\" class=\"headerlink\" title=\"挂载时间机器\"></a>挂载时间机器</h4><h5 id=\"1-双击共享文件夹里的创建的磁盘挂载\"><a href=\"#1-双击共享文件夹里的创建的磁盘挂载\" class=\"headerlink\" title=\"1.双击共享文件夹里的创建的磁盘挂载\"></a>1.双击共享文件夹里的创建的磁盘挂载</h5><h5 id=\"2-命令行查看挂载路径\"><a href=\"#2-命令行查看挂载路径\" class=\"headerlink\" title=\"2.命令行查看挂载路径\"></a>2.命令行查看挂载路径</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-设置时间机器备份磁盘\"><a href=\"#3-设置时间机器备份磁盘\" class=\"headerlink\" title=\"3.设置时间机器备份磁盘\"></a>3.设置时间机器备份磁盘</h5><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo tmutil setdestination &lt;挂载路径&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-这个时候打开时间机器就可以看到我们创建的磁盘了\"><a href=\"#4-这个时候打开时间机器就可以看到我们创建的磁盘了\" class=\"headerlink\" title=\"4.这个时候打开时间机器就可以看到我们创建的磁盘了\"></a>4.这个时候打开时间机器就可以看到我们创建的磁盘了</h5>","tags":["备份"]},{"title":"用k8s资源方式创建k8s-clusterapi","url":"/2022/12/19/%E7%94%A8k8s%E8%B5%84%E6%BA%90%E6%96%B9%E5%BC%8F%E5%88%9B%E5%BB%BAk8s-clusterapi/","content":"<p>cluster-api是k8s的一个子项目隶属于SIG Cluster Lifecycle,主要使用类似k8s风格的资源对象来管理k8s集群的生命周期</p>\n<span id=\"more\"></span>\n\n<p>k8s的部署比较复杂，且每个发行版本稍微有些不应，cluster api则致力于通过k8s得资源对象来创建，管理k8s集群</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><ul>\n<li>clustar api的命令工具为<code>clusterctl</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">m1 macos</span></span><br><span class=\"line\">curl -L https://github.com/kubernetes-sigs/cluster-api/releases/download/v1.3.1/clusterctl-darwin-arm64 -o clusterctl</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化管理集群服务端\"><a href=\"#初始化管理集群服务端\" class=\"headerlink\" title=\"初始化管理集群服务端\"></a>初始化管理集群服务端</h4><ul>\n<li>infrastructure参数指定基础架构供应商</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">clusterctl init --infrastructure vcluster</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用clusterctl部署集群\"><a href=\"#使用clusterctl部署集群\" class=\"headerlink\" title=\"使用clusterctl部署集群\"></a>使用clusterctl部署集群</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export HELM_VALUES=&quot;service:\\n  type: NodePort&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl create namespace $&#123;CLUSTER_NAMESPACE&#125;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成cluster-api的cr并应用</span></span><br><span class=\"line\">clusterctl generate cluster $&#123;CLUSTER_NAME&#125; \\</span><br><span class=\"line\">    --infrastructure vcluster \\</span><br><span class=\"line\">    --kubernetes-version $&#123;KUBERNETES_VERSION&#125; \\</span><br><span class=\"line\">    --target-namespace $&#123;CLUSTER_NAMESPACE&#125; | kubectl apply -f -</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看集群发现已经部署好了</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ vcluster list        </span><br><span class=\"line\"> NAME        NAMESPACE         STATUS    CONNECTED   CREATED                         AGE     CONTEXT   </span><br><span class=\"line\"> capi-test   clusterapi-test   Running               2022-12-19 15:40:46 +0800 CST   3m22s   minikube  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看集群详情</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">clusterctl describe cluster  capi-test</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取创建的集群的kube-config</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">clusterctl get kubeconfig capi-test</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除管理集群</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除 供应商 创建的命名空间和crd</span></span><br><span class=\"line\">clusterctl delete --infrastructure aws --include-namespace --include-crd</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">删除所有</span></span><br><span class=\"line\">clusterctl delete --all</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"命令补全\"><a href=\"#命令补全\" class=\"headerlink\" title=\"命令补全\"></a>命令补全</h4><ul>\n<li>zsh</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">已经有了此配置可以忽略</span></span><br><span class=\"line\">echo &quot;autoload -U compinit; compinit&quot; &gt;&gt; ~/.zshrc</span><br><span class=\"line\"></span><br><span class=\"line\">clusterctl completion zsh &gt; &quot;$&#123;fpath[1]&#125;/_clusterctl&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://cluster-api.sigs.k8s.io/introduction.html\">https://cluster-api.sigs.k8s.io/introduction.html</a></p>\n","tags":["k8s","部署"]},{"title":"在k8s集群中部署tikv","url":"/2023/11/10/%E5%9C%A8k8s%E9%9B%86%E7%BE%A4%E4%B8%AD%E9%83%A8%E7%BD%B2tikv/","content":"<p><a href=\"https://github.com/pingcap/tidb\">tidb</a>是<a href=\"https://www.pingcap.com/\">pingcap</a>开发的开源数据库</p>\n<span id=\"more\"></span>\n\n<p>其底层使用rust上层使用go开发，兼容mysql协议</p>\n<p><img src=\"/../images/tidb-1.png\" alt=\"Alt text\"></p>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><ul>\n<li>部署crd</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create -f https://raw.githubusercontent.com/pingcap/tidb-operator/master/manifests/crd.yaml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>部署operator</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">helm repo add pingcap https://charts.pingcap.org/</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl create namespace tidb-admin</span><br><span class=\"line\"></span><br><span class=\"line\">helm install --namespace tidb-admin tidb-operator pingcap/tidb-operator --version v1.5.1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>部署一个官方示例的集群</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl create namespace tidb-cluster &amp;&amp; \\</span><br><span class=\"line\">    kubectl -n tidb-cluster apply -f https://raw.githubusercontent.com/pingcap/tidb-operator/master/examples/basic/tidb-cluster.yaml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看集群</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">k get tc</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">NAME    READY   PD                  STORAGE   READY   DESIRE   TIKV                  STORAGE   READY   DESIRE   TIDB                  READY   DESIRE   AGE</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">basic   True    pingcap/pd:v7.1.1   1Gi       1       1        pingcap/tikv:v7.1.1   1Gi       1       1        pingcap/tidb:v7.1.1   1       1        45m</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>部署dashboard</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl -n tidb-cluster apply -f https://raw.githubusercontent.com/pingcap/tidb-operator/master/examples/basic/tidb-dashboard.yaml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>部署监控</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl -n tidb-cluster apply -f https://raw.githubusercontent.com/pingcap/tidb-operator/master/examples/basic/tidb-monitor.yaml</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h4><ul>\n<li>转发svc到本地，使用使用直接写对应的svc的地址和端口就好</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl port-forward -n tidb-cluster svc/basic-tidb 14000:4000 &gt; pf14000.out &amp;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mysql连接</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql --comments -h 127.0.0.1 -P 14000 -u root</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Welcome to the MariaDB monitor.  Commands end with ; or \\g.</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Your MySQL connection <span class=\"built_in\">id</span> is 677</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Server version: 5.7.25-TiDB-v7.1.1 TiDB Server (Apache License 2.0) Community Edition, MySQL 5.7 compatible</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"comment\"># Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"comment\"># Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"></span></span><br><span class=\"line\"><span class=\"language-bash\"><span class=\"comment\"># MySQL [(none)]&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建一个表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">use test;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> hello_world (id <span class=\"type\">int</span> unsigned <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> auto_increment <span class=\"keyword\">primary</span> key, v <span class=\"type\">varchar</span>(<span class=\"number\">32</span>));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查询版本号</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> tidb_version()\\G</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查询存储状态</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> information_schema.tikv_store_status\\G</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查询集群状态</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> information_schema.cluster_info\\G</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看监控的grafana，转发下grafana的svc然后打开浏览默认密码admin&#x2F;admin,也可以将svc改成nodeport模式</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">转发</span></span><br><span class=\"line\">kubectl port-forward -n tidb-cluster svc/basic-grafana 3000 &gt; pf12333.out &amp;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tidb的ui,默认没密码</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl port-forward -n tidb-cluster svc/basic-tidb-dashboard-exposed 12333 &gt; pf12333.out &amp;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"升级集群\"><a href=\"#升级集群\" class=\"headerlink\" title=\"升级集群\"></a>升级集群</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl patch tc basic -n tidb-cluster --type merge -p &#x27;&#123;&quot;spec&quot;: &#123;&quot;version&quot;: &quot;&lt;版本号&gt;&quot;&#125; &#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扩缩容\"><a href=\"#扩缩容\" class=\"headerlink\" title=\"扩缩容\"></a>扩缩容</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">kubectl patch -n $&#123;namespace&#125; tc $&#123;cluster_name&#125; --type merge --patch &#x27;&#123;&quot;spec&quot;:&#123;&quot;pd&quot;:&#123;&quot;replicas&quot;:&lt;副本数&gt;&#125;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://docs.pingcap.com/zh/tidb-in-kubernetes/dev/get-started\">https://docs.pingcap.com/zh/tidb-in-kubernetes/dev/get-started</a></p>\n","tags":["k8s","tikv","数据库"]},{"title":"测试工具","url":"/2022/10/11/%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/","content":"<p>整理一些linux上常用测试工具</p>\n<span id=\"more\"></span>\n\n<h2 id=\"硬盘测试\"><a href=\"#硬盘测试\" class=\"headerlink\" title=\"硬盘测试\"></a>硬盘测试</h2><h3 id=\"fio\"><a href=\"#fio\" class=\"headerlink\" title=\"fio\"></a>fio</h3><h4 id=\"fio安装\"><a href=\"#fio安装\" class=\"headerlink\" title=\"fio安装\"></a>fio安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y fio</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>direct&#x3D;1</td>\n<td>忽略缓存，直接写入磁盘</td>\n</tr>\n<tr>\n<td>iodepth&#x3D;128</td>\n<td>请求的IO队列深度</td>\n</tr>\n<tr>\n<td>rw&#x3D;write</td>\n<td>读写策略，可选值randread(随机读)，randwrite(随机写)，read(顺序读)，write(顺序写)，randrw(混合随机读写)</td>\n</tr>\n<tr>\n<td>ioengine&#x3D;libaio</td>\n<td>IO引擎配置，建议使用libaio</td>\n</tr>\n<tr>\n<td>bs&#x3D;4k</td>\n<td>块大小配置，可以使用4k，8k，16k等</td>\n</tr>\n<tr>\n<td>size&#x3D;200G</td>\n<td>测试生成文件的大小</td>\n</tr>\n<tr>\n<td>numjobs&#x3D;1</td>\n<td>线程数配置</td>\n</tr>\n<tr>\n<td>runtime&#x3D;1000</td>\n<td>测试运行时长，单位秒</td>\n</tr>\n<tr>\n<td>group_reporting</td>\n<td>测试结果汇总展示</td>\n</tr>\n<tr>\n<td>name&#x3D;test</td>\n<td>测试任务名称</td>\n</tr>\n<tr>\n<td>filename&#x3D;&#x2F;data&#x2F;test</td>\n<td>测试输出的路径与文件名</td>\n</tr>\n</tbody></table>\n<h4 id=\"测试使用\"><a href=\"#测试使用\" class=\"headerlink\" title=\"测试使用\"></a>测试使用</h4><ul>\n<li>读时延</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">fio -direct=1 -iodepth=1 -rw=read -ioengine=libaio -bs=4k -size=200G -numjobs=1 -runtime=1000 -group_reporting -name=test -filename=/data/test</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>写时延</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">fio -direct=1 -iodepth=1 -rw=write -ioengine=libaio -bs=4k -size=200G -numjobs=1 -runtime=1000 -group_reporting -name=test -filename=/data/test</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>读带宽</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">fio -direct=1 -iodepth=32 -rw=read -ioengine=libaio -bs=256k -size=200G -numjobs=4 -runtime=1000 -group_reporting -name=test -filename=/data/test  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>写带宽</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">fio -direct=1 -iodepth=32 -rw=write -ioengine=libaio -bs=256k -size=200G -numjobs=4 -runtime=1000 -group_reporting -name=test -filename=/data/test</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>读IOPS</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">fio -direct=1 -iodepth=32 -rw=randread  -ioengine=libaio -bs=4k -size=200G -numjobs=4 -runtime=1000 -group_reporting -name=test -filename=/data/test</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>写IOPS</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">fio -direct=1 -iodepth=32 -rw=randwrite -ioengine=libaio -bs=4k -size=200G -numjobs=4 -runtime=1000 -group_reporting -name=test -filename=/data/test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h3 id=\"iperf3\"><a href=\"#iperf3\" class=\"headerlink\" title=\"iperf3\"></a>iperf3</h3><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install iperf3</span><br></pre></td></tr></table></figure>\n\n<p>下载地址:<a href=\"https://iperf.fr/iperf-download.php\">https://iperf.fr/iperf-download.php</a></p>\n<h4 id=\"参数说明-1\"><a href=\"#参数说明-1\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-c</td>\n<td>客户端模式</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>服务端模式</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>指定端口号</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>打印调试信息</td>\n</tr>\n<tr>\n<td>-P</td>\n<td>多线程</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>使用udb</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>测试时间</td>\n</tr>\n<tr>\n<td>-b</td>\n<td>带宽</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>双向测试</td>\n</tr>\n</tbody></table>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><ul>\n<li>基本使用</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">服务端</span></span><br><span class=\"line\">iperf3 -s</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">客户端</span></span><br><span class=\"line\">iperf3 -c 10.23.219.49</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在tcp在100m带宽3个线程下双向测试10秒</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">iperf3 -c 10.23.219.49 -i -d -P 3 -R -t 10 -b 100M</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tcp测试</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">iperf3 -c 10.23.219.49 -R -P 10</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>udp测试</li>\n</ul>\n<p>侧重于看丢包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">iperf3 -c 10.23.219.49 -u -b 10M</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ethr\"><a href=\"#ethr\" class=\"headerlink\" title=\"ethr\"></a>ethr</h3><p>微软出的一个综合网络测试工具<a href=\"https://github.com/Microsoft/Ethr\">https://github.com/Microsoft/Ethr</a></p>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-m</td>\n<td>x 表示Ethr作为外部客户端模式与共它服务端对接</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>表示作为客户端模式连接服务端与iperf类似</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>表示测试类型 如TCP新建:c、TCP带宽:b、TCP延迟:l</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>表示并发会话&#x2F;线程数据0表示采用当前CPU数量</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>表示测试时长默认10s、0表示不限时长测试</td>\n</tr>\n</tbody></table>\n<h4 id=\"erhr使用\"><a href=\"#erhr使用\" class=\"headerlink\" title=\"erhr使用\"></a>erhr使用</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">服务端</span></span><br><span class=\"line\">ethr -s -ui -port 9999</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">客户端</span></span><br><span class=\"line\"></span><br><span class=\"line\">ethr -c 192.168.1.1</span><br></pre></td></tr></table></figure>\n\n<p>-ui 开启一个文本界面</p>\n<ul>\n<li>tcp带宽测试</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ethr -c 10.23.219.49 -t b -p tcp -n 0 -d 0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tcp新建测试</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ethr -c 10.23.219.49 -t c -p tcp -n 0 -d 0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tcp 延迟测试</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ethr -c 10.23.219.49 -t l -p tcp -n 0 -d 0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>udp pps测试</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ethr -c 10.23.219.49 -t p -p udp -n 0 -d 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"web服务测试\"><a href=\"#web服务测试\" class=\"headerlink\" title=\"web服务测试\"></a>web服务测试</h2><h3 id=\"ab-apachebench\"><a href=\"#ab-apachebench\" class=\"headerlink\" title=\"ab(apachebench)\"></a>ab(apachebench)</h3><p>ab是apachebench的缩写最开始用来测试apache httpd的也可以用来测试其他web服务器</p>\n<h4 id=\"ab安装\"><a href=\"#ab安装\" class=\"headerlink\" title=\"ab安装\"></a>ab安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum -y install httpd-tools</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>测试</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ab -c 10 -n 10 http://www.baidu.com/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>-c 次数</p>\n</li>\n<li><p>-n 并发数</p>\n</li>\n</ul>\n<h2 id=\"综合测试\"><a href=\"#综合测试\" class=\"headerlink\" title=\"综合测试\"></a>综合测试</h2><h3 id=\"sysbench\"><a href=\"#sysbench\" class=\"headerlink\" title=\"sysbench\"></a>sysbench</h3><p>sysbench是个综合测试工具包括cpu硬盘数据等</p>\n<h3 id=\"安装sysbench\"><a href=\"#安装sysbench\" class=\"headerlink\" title=\"安装sysbench\"></a>安装sysbench</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y sysbench</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用sysbench\"><a href=\"#使用sysbench\" class=\"headerlink\" title=\"使用sysbench\"></a>使用sysbench</h4><ul>\n<li>测试cpu</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sysbench --test=cpu --cpu-max-prime=20000 run</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>测试内存</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sysbench --test=memory run</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>测试io</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sysbench --test=fileio --file-test-mode=seqwr run</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>测试mysql</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">准备数据</span></span><br><span class=\"line\">sysbench /usr/share/sysbench/oltp_read_only.lua --mysql-host=localhost --mysql-port=3306 --mysql-user=root --mysql-db=test --db-driver=mysql --tables=10 --table-size=1000 --time=10 prepare</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行测试</span></span><br><span class=\"line\">sysbench /usr/share/sysbench/oltp_read_only.lua --mysql-host=localhost --mysql-port=3306 --mysql-user=root --mysql-db=test --db-driver=mysql --tables=10 --table-size=1000 --time=10 run</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">清理</span></span><br><span class=\"line\">sysbench /usr/share/sysbench/oltp_read_only.lua --mysql-host=localhost --mysql-port=3306 --mysql-user=root --mysql-db=test --db-driver=mysql --tables=10 --table-size=1000 --time=10 cleanup</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>&#x2F;usr&#x2F;share&#x2F;sysbench&#x2F;下有很多测试脚本,根据测试需要填写，可以使用help命令查看参数,–help查看测试项的参数</p>\n</blockquote>\n<h2 id=\"k8s\"><a href=\"#k8s\" class=\"headerlink\" title=\"k8s\"></a>k8s</h2><ul>\n<li>kubemark</li>\n<li>testkube</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://mp.weixin.qq.com/s?src=11&amp;timestamp=1665469357&amp;ver=4097&amp;signature=UHpleVGTVCM4lwywMQ3B9xfQXA0H5tOi8Ju3nw9YxPQNHo9KazyAmpeLLBvXOFJh9O5OPzrsxoVkF5SCso0kIu9HlAD5EuZ9tffPaTfbVBn0QLf8h0PURQoTCtHOxjkK&amp;new=1\">https://mp.weixin.qq.com/s?src=11&amp;timestamp=1665469357&amp;ver=4097&amp;signature=UHpleVGTVCM4lwywMQ3B9xfQXA0H5tOi8Ju3nw9YxPQNHo9KazyAmpeLLBvXOFJh9O5OPzrsxoVkF5SCso0kIu9HlAD5EuZ9tffPaTfbVBn0QLf8h0PURQoTCtHOxjkK&amp;new=1</a></p>\n<p><a href=\"https://linuxhint.com/use-sysbench-for-linux-performance-testing/\">https://linuxhint.com/use-sysbench-for-linux-performance-testing/</a></p>\n","tags":["测试"]},{"title":"记一次k8s节点网络重传排查","url":"/2024/03/05/%E8%AE%B0%E4%B8%80%E6%AC%A1k8s%E8%8A%82%E7%82%B9%E7%BD%91%E7%BB%9C%E9%87%8D%E4%BC%A0%E6%8E%92%E6%9F%A5/","content":"<p>值班的时候有用户报障他们的一个定时job有超时，他们自己抓包发现网络有重传认为我们的k8s网络有问题</p>\n<p>看了下历史记录问，题是去年提出的，之前同事已经测试过长ping，且抓包未发现异常，他们发现访问的服务端和客户端的pod都在同一个节点上，怀疑用户业务自身问题</p>\n<span id=\"more\"></span>\n\n<h4 id=\"经过\"><a href=\"#经过\" class=\"headerlink\" title=\"经过\"></a>经过</h4><p>年后来了之后，用户依然出现超时问题，查看用户集群有ingress询问用户是否经过ingress过到服务端，且用户反应出现此类问题的不只是这一个业务以及测试集群也有出现</p>\n<p>从现象来看此时我也认为是客户自身业务导致，但是客户坚持认为和业务没关系</p>\n<p>客户提供了一个是集群让我们测试，以及出问题的pod</p>\n<p>于是就在客户的测试集群中使用ab测试出问题的那些pod的网络情况，并没有发现问题,因为ab没有按时间探测的功能所有把包给加大了，测试了同node和不同node</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ab -c 10 -t 1000 -n 10000000 http://&lt;ip&gt;/</span><br></pre></td></tr></table></figure>\n\n<p>在测试3天之后发现ab中偶有超时最长是1000ms+，此时怀疑可能网络有问题了但不是那么的确定，因为重传有很多原因</p>\n<p>同时登录上客户的机器看了cpu，内存等情况，发现客户的内存的free很少，网卡有丢包统计但是不是很多<code>ethtool -S etho</code>等命令查看队列等，没有发现太多相关性</p>\n<p>客户表示出问题已经几个月且没有啥变更，同时我们和技术支持还有部门其他同事一块开了个会议，其他同事也进行了排查也没发现问题所在，且怀疑svc导致的得到的答复并没有svc，是pod和pod直接连接</p>\n<p>同时我们提出试试重启pod来尝试下，我又用ab压测的同时抓包，且约了客户会议</p>\n<p>抓包的结果有大量的rst，改下之后rst减少所以我认为这个属于压测问题</p>\n<p>和客户会议得知客户的服务调用链和我们之前了解的略有出入,此时心中感觉有些希望</p>\n<p>整个调用链中多了个ingress，我觉得可能是ingress导致的，查看了下ingress日志也没发现一些异常，询问用户是否可以排除ingress直接访问得到了否定的结果</p>\n<p><img src=\"/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1k8s%E8%8A%82%E7%82%B9%E7%BD%91%E7%BB%9C%E9%87%8D%E4%BC%A0%E6%8E%92%E6%9F%A5-1.png\" alt=\"alt text\"></p>\n<p>和客户会议后的第二天客户表示问题依然出现，客户部署了监控之后我们看监控也是正常的</p>\n<p>此时想抓出问题的时候的ingress包，则在客户的生产环境的node上执行了一个抓包，同时查看tcp重传相关</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nohup  tcpdump -i any src host &lt;src_ip&gt; and dst host &lt;dest_ip&gt; -w test.pcap &amp;</span><br></pre></td></tr></table></figure>\n\n<p>经过一夜抓包之后使用wireshark分析发现有大量的重传和重复确认的包，在分析包中的时候顺吧看了下系统日志,发现里面有一些oom且内存free较少，将oom和内存的情况反馈给客户</p>\n<p><img src=\"/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1k8s%E8%8A%82%E7%82%B9%E7%BD%91%E7%BB%9C%E9%87%8D%E4%BC%A0%E6%8E%92%E6%9F%A5-3.png\" alt=\"alt text\"></p>\n<p>同时让客户看了下服务端的资源情况也没发现异常，客户反馈oom的是logstash并问是否有关系，我回复关系不大</p>\n<p>此时将抓包的截图发给网络的同事让帮看看，网络的同事一看说你抓包有问题，因为在tcpdump中<code>-i</code>参数使用了any，机器内的包经过了2个网卡就会出现wireshark中有大量的重传和重复确认包</p>\n<p>恍然大悟于是改进了抓包机制，只抓pod网卡的包摒弃了<code>-i any</code>参数</p>\n<p>又抓了一夜的包。。。</p>\n<p>不如意外故障依旧，但这次抓包中就没有满屏的重传和重复确认包，但是依然有重传且和客户超时的时间前后脚</p>\n<p><img src=\"/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1k8s%E8%8A%82%E7%82%B9%E7%BD%91%E7%BB%9C%E9%87%8D%E4%BC%A0%E6%8E%92%E6%9F%A5-4.png\" alt=\"alt text\"></p>\n<p>同时将截图发给了网络的同事帮确认下，他们怀疑丢包，但是需要2端同时抓包来确认丢包</p>\n<p>已经连续抓包了好几次这次想彻底一点，让网络的同事从底层抓包将所有的客户端和server都进行抓包</p>\n<p>中途上厕所遇到了负责内核的同事，他也参加了和客户的会议，我将我这几天的情况告诉他，他说等会他看下</p>\n<p>他登录到机器之后和我们之前一样查了下cpu，内存等资源，最后他在看日志的时候发现oom了，他说这个可能会导致网络超时，</p>\n<p>我问他为啥 他说内核在执行oom的时候会放下其他工作专注杀死oom的进程，但是杀死的进程时间太长了就可能导致网络收发包出问题</p>\n<p><img src=\"/../images/%E8%AE%B0%E4%B8%80%E6%AC%A1k8s%E8%8A%82%E7%82%B9%E7%BD%91%E7%BB%9C%E9%87%8D%E4%BC%A0%E6%8E%92%E6%9F%A5-2.png.png\" alt=\"alt text\"></p>\n<p>没错就是那个oom的logstash！！！</p>\n<p>于是让客户将这个logstash加大内存，客户加了内存之后k8s将其调度到其他地方</p>\n<p>处理了oom第二天之后询问客户没有发现超时问题，为了防止被打脸就延长了网络的抓包时间</p>\n<p>新的一周开始问客户是否还发生，结果没发生。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li><p>应该及时和客户沟通获取业务的调用链</p>\n</li>\n<li><p>wireshark分析会被<code>-i any</code>干扰</p>\n</li>\n<li><p>内核oom的时候会停止网络收发包等工作导致网络超时，至于oom事件过长是因为logstash有大约几百个线程</p>\n</li>\n</ol>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://cloud.tencent.com/developer/article/1404089\">https://cloud.tencent.com/developer/article/1404089</a></p>\n","tags":["网络","故障处理"]},{"title":"部署Rancher","url":"/2020/11/02/%E9%83%A8%E7%BD%B2Rancher/","content":"<p>rancer是一个多k8s集群管理工具</p>\n<span id=\"more\"></span>\n\n<h5 id=\"在k8s集群里安装\"><a href=\"#在k8s集群里安装\" class=\"headerlink\" title=\"在k8s集群里安装\"></a>在k8s集群里安装</h5><blockquote>\n<p>直接部署在k8s中具备高可用 <br>中文官方<a href=\"https://www.rancher.cn/\">https://www.rancher.cn</a>英文官网<a href=\"https://rancher.com/\">https://rancher.com</a></p>\n</blockquote>\n<h6 id=\"rancher需要cert-manager\"><a href=\"#rancher需要cert-manager\" class=\"headerlink\" title=\"rancher需要cert-manager\"></a>rancher需要cert-manager</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加helm仓库</span></span><br><span class=\"line\">helm repo add jetstack https://charts.jetstack.io</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新仓库</span></span><br><span class=\"line\">helm repo update</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用helm安装cert-manager</span></span><br><span class=\"line\">helm install \\</span><br><span class=\"line\"> cert-manager jetstack/cert-manager \\</span><br><span class=\"line\"> --namespace cert-manager \\</span><br><span class=\"line\"> --set installCRDs=true \\</span><br><span class=\"line\"> --create-namespace</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"使用helm安装rancher\"><a href=\"#使用helm安装rancher\" class=\"headerlink\" title=\"使用helm安装rancher\"></a>使用helm安装rancher</h6><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加rancher的repo仓库，这里是用latest，生产环境推荐使用stable，尝鲜使用alpha</span></span><br><span class=\"line\">helm repo add rancher-latest http://rancher-mirror.oss-cn-beijing.aliyuncs.com/server-charts/latest</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装rancher</span></span><br><span class=\"line\">helm install rancher rancher-latest/rancher \\</span><br><span class=\"line\"> --namespace cattle-system \\</span><br><span class=\"line\"> --set hostname=&lt;域名&gt; \\</span><br><span class=\"line\"> --create-namespace</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"单节点安装\"><a href=\"#单节点安装\" class=\"headerlink\" title=\"单节点安装\"></a>单节点安装</h5><blockquote>\n<p>作为一个单独的程序管理其他的集群</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --restart=unless-stopped \\</span><br><span class=\"line\">  -p 80:80 -p 443:443 \\</span><br><span class=\"line\">  -v /data/rancher:/var/lib/rancher/ \\</span><br><span class=\"line\">  -v /data/rancher/log/auditlog:/var/log/auditlog \\</span><br><span class=\"line\">  -e CATTLE_SYSTEM_CATALOG=bundled \\</span><br><span class=\"line\">  -e AUDIT_LEVEL=3 \\</span><br><span class=\"line\"> rancher/rancher:stable --no-cacerts</span><br></pre></td></tr></table></figure>\n","tags":["k8s","rancher"]},{"title":"about","url":"/about/index.html","content":"<p>随着年纪的增长和技术解除的越来越多<br>有些东西记不太住<br>遂用此博客记录解决问题的过程和方法</p>\n"},{"title":"404","url":"//404.html","content":"<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">██╗  ██╗ ██████╗ ██╗  ██╗    ███╗   ██╗ ██████╗ ████████╗</span><br><span class=\"line\">██║  ██║██╔═████╗██║  ██║    ████╗  ██║██╔═══██╗╚══██╔══╝</span><br><span class=\"line\">███████║██║██╔██║███████║    ██╔██╗ ██║██║   ██║   ██║</span><br><span class=\"line\">╚════██║████╔╝██║╚════██║    ██║╚██╗██║██║   ██║   ██║</span><br><span class=\"line\">     ██║╚██████╔╝     ██║    ██║ ╚████║╚██████╔╝   ██║</span><br><span class=\"line\">     ╚═╝ ╚═════╝      ╚═╝    ╚═╝  ╚═══╝ ╚═════╝    ╚═╝</span><br><span class=\"line\"></span><br><span class=\"line\">    ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗</span><br><span class=\"line\">    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗</span><br><span class=\"line\">    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║</span><br><span class=\"line\">    ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║</span><br><span class=\"line\">    ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝</span><br><span class=\"line\">    ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝</span><br></pre></td></tr></table></figure>\n"},{"title":"tags","url":"/tags/index.html","content":""}]